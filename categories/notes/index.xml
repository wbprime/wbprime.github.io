<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on wbprime</title>
    <link>http://www.wbprime.me/categories/notes/</link>
    <description>Recent content in Notes on wbprime</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 06 Feb 2018 13:08:22 +0800</lastBuildDate>
    
	<atom:link href="http://www.wbprime.me/categories/notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>IP TCP UDP Frame Header Structure</title>
      <link>http://www.wbprime.me/posts/2018-02-06-ip-tcp-udp-frames/</link>
      <pubDate>Tue, 06 Feb 2018 13:08:22 +0800</pubDate>
      
      <guid>http://www.wbprime.me/posts/2018-02-06-ip-tcp-udp-frames/</guid>
      <description>IP v4 header structure:
TCP header structure:
UDP header structure:</description>
    </item>
    
    <item>
      <title>Spring Mvc Note</title>
      <link>http://www.wbprime.me/posts/2018-02-06-spring-mvc-note/</link>
      <pubDate>Tue, 06 Feb 2018 12:51:13 +0800</pubDate>
      
      <guid>http://www.wbprime.me/posts/2018-02-06-spring-mvc-note/</guid>
      <description>Scenario 1 In client application (application is not web application, e.g may be swing app)
private static ApplicationContext context = new ClassPathXmlApplicationContext(&amp;quot;test-client.xml&amp;quot;); context.getBean(name);  No need of web.xml. ApplicationContext as container for getting bean service. No need for web server container. In test-client.xml there can be Simple bean with no remoting, bean with remoting.
Conclusion: In Scenario 1 applicationContext and DispatcherServlet are not related.
Scenario 2 In a server application (application deployed in server e.</description>
    </item>
    
    <item>
      <title>Mybatis Note</title>
      <link>http://www.wbprime.me/posts/2018-02-06-mybatis-note/</link>
      <pubDate>Tue, 06 Feb 2018 11:40:06 +0800</pubDate>
      
      <guid>http://www.wbprime.me/posts/2018-02-06-mybatis-note/</guid>
      <description>&amp;ldquo;select&amp;rdquo; &amp;lt;select id=&amp;quot;selectPerson&amp;quot; parameterType=&amp;quot;int&amp;quot; parameterMap=&amp;quot;deprecated&amp;quot; resultType=&amp;quot;hashmap&amp;quot; resultMap=&amp;quot;personResultMap&amp;quot; flushCache=&amp;quot;false&amp;quot; useCache=&amp;quot;true&amp;quot; timeout=&amp;quot;10000&amp;quot; fetchSize=&amp;quot;256&amp;quot; statementType=&amp;quot;PREPARED&amp;quot; resultSetType=&amp;quot;FORWARD_ONLY&amp;quot;&amp;gt;     属性 描述     id 在命名空间中唯一的标识符，可以被用来引用这条语句。   parameterType 将会传入这条语句的参数类的完全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过 TypeHandler 推断出具体传入语句的参数，默认值为 unset。   parameterMap 这是引用外部 parameterMap 的已经被废弃的方法。使用内联参数映射和 parameterType 属性。   resultType 从这条语句中返回的期望类型的类的完全限定名或别名。注意如果是集合情形，那应该是集合可以包含的类型，而不能是集合本身。使用 resultType 或 resultMap，但不能同时使用。   resultMap 外部 resultMap 的命名引用。结果集的映射是 MyBatis 最强大的特性，对其有一个很好的理解的话，许多复杂映射的情形都能迎刃而解。使用 resultMap 或 resultType，但不能同时使用。   flushCache 将其设置为 true，任何时候只要语句被调用，都会导致本地缓存和二级缓存都会被清空，默认值：false。   useCache 将其设置为 true，将会导致本条语句的结果被二级缓存，默认值：对 select 元素为 true。   timeout 这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为 unset（依赖驱动）。   fetchSize 这是尝试影响驱动程序每次批量返回的结果行数和这个设置值相等。默认值为 unset（依赖驱动）。   statementType STATEMENT，PREPARED 或 CALLABLE 的一个。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。   resultSetType FORWARD_ONLY，SCROLL_SENSITIVE 或 SCROLL_INSENSITIVE 中的一个，默认值为 unset （依赖驱动）。   databaseId 如果配置了 databaseIdProvider，MyBatis 会加载所有的不带 databaseId 或匹配当前 databaseId 的语句；如果带或者不带的语句都有，则不带的会被忽略。   resultOrdered 这个设置仅针对嵌套结果 select 语句适用：如果为 true，就是假设包含了嵌套结果集或是分组了，这样的话当返回一个主结果行的时候，就不会发生有对前面结果集的引用的情况。这就使得在获取嵌套的结果集的时候不至于导致内存不够用。默认值：false。   resultSets 这个设置仅对多结果集的情况适用，它将列出语句执行后返回的结果集并每个结果集给一个名称，名称是逗号分隔的。    &amp;ldquo;selectKey&amp;rdquo; &amp;lt;selectKey keyProperty=&amp;quot;id&amp;quot; resultType=&amp;quot;int&amp;quot; order=&amp;quot;BEFORE&amp;quot; statementType=&amp;quot;PREPARED&amp;quot;&amp;gt;     属性 描述     keyProperty selectKey 语句结果应该被设置的目标属性。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。   keyColumn 匹配属性的返回结果集中的列名称。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。   resultType 结果的类型。MyBatis 通常可以推算出来，但是为了更加确定写上也不会有什么问题。MyBatis 允许任何简单类型用作主键的类型，包括字符串。如果希望作用于多个生成的列，则可以使用一个包含期望属性的 Object 或一个 Map。   order 这可以被设置为 BEFORE 或 AFTER。如果设置为 BEFORE，那么它会首先选择主键，设置 keyProperty 然后执行插入语句。如果设置为 AFTER，那么先执行插入语句，然后是 selectKey 元素 - 这和像 Oracle 的数据库相似，在插入语句内部可能有嵌入索引调用。   statementType 与前面相同，MyBatis 支持 STATEMENT，PREPARED 和 CALLABLE 语句的映射类型，分别代表 PreparedStatement 和 CallableStatement 类型。    &amp;ldquo;insert&amp;rdquo; &amp;lt;insert id=&amp;quot;insertAuthor&amp;quot;&amp;gt; &amp;lt;selectKey keyProperty=&amp;quot;id&amp;quot; resultType=&amp;quot;int&amp;quot; order=&amp;quot;BEFORE&amp;quot;&amp;gt; select CAST(RANDOM()*1000000 as INTEGER) a from SYSIBM.</description>
    </item>
    
    <item>
      <title>Maven Note</title>
      <link>http://www.wbprime.me/posts/2018-02-06-maven-note/</link>
      <pubDate>Tue, 06 Feb 2018 10:50:17 +0800</pubDate>
      
      <guid>http://www.wbprime.me/posts/2018-02-06-maven-note/</guid>
      <description>Local Repository Location conf/setting.xml
&amp;lt;settings ...&amp;gt; &amp;lt;localRepository&amp;gt;/path/to/local/repo&amp;lt;/localRepository&amp;gt; &amp;lt;/settings&amp;gt;  Use mvn help:system to confirm it.
Create New Project mvn archetype:create -DgroupId=me.wbprime.test -DartifactId=hello -DpackageName=me.wbprime.test -Dversion=1.0
Maven Dependency mvn dependency:copy-dependencies -DoutputDirectory=lib
Lifecycles Three builtin lifecycles:
 default clean site  &amp;ldquo;clean&amp;rdquo; Lifecycle    phase description     pre-clean execute processes needed prior to the actual project cleaning   clean remove all files generated by the previous build   post-clean execute processes needed to finalize the project cleaning    &amp;ldquo;site&amp;rdquo; Lifecycle    phase description     pre-site execute processes needed prior to the actual project site generation   site generate the project&amp;rsquo;s site documentation   post-site execute processes needed to finalize the site generation, and to   prepare for site deployment   site-deploy deploy the generated site documentation to the specified web server    &amp;ldquo;default&amp;rdquo; Lifecycle    phase description     validate validate the project is correct and all necessary information is available.</description>
    </item>
    
    <item>
      <title>Posix &amp; GNU Make Note</title>
      <link>http://www.wbprime.me/posts/2018-02-05-posix-make-note/</link>
      <pubDate>Mon, 05 Feb 2018 18:00:50 +0800</pubDate>
      
      <guid>http://www.wbprime.me/posts/2018-02-05-posix-make-note/</guid>
      <description>Compile Source code -&amp;gt; object file: &amp;ldquo;*.c -&amp;gt; *.o&amp;rdquo;
Link Object files -&amp;gt; executable: &amp;ldquo;*.o -&amp;gt; a.out&amp;rdquo;
makefile Rules target : prerequisites command1 command2 ... commandn   target is a target to be generated. It can be a object file, or a executable file or a label. prerequisites are dependecies of target. It is required to generate target. commandn are commands to generate target. Lines started with a &amp;lsquo;\t&amp;rsquo;  If any of prerequisites is newer than target, then make will call command1 to commandn.</description>
    </item>
    
    <item>
      <title>Access Control List</title>
      <link>http://www.wbprime.me/posts/2018-02-05-acl-note/</link>
      <pubDate>Mon, 05 Feb 2018 17:46:28 +0800</pubDate>
      
      <guid>http://www.wbprime.me/posts/2018-02-05-acl-note/</guid>
      <description>Linux ACL - Access Control List Commands  setfacl getfacl  ACL Permission - Comma separated entry. - Each entry consists of type, value and permissions, separated by colon. - type is one of `u` (user), `g` (group), `o` (other), `m` (mask) - value is the user name or uid for `u`, group name or gid for `g`, nothing for `o` - permissions is the combination of `r` (read), `w` (write) and `e` (execute) - if value is empty, then means all users/groups - if no read permission is to granted, the replace `r` with `-` for read char - if no write permission is to granted, the replace `w` with `-` for read char - if no execute permission is to granted, the replace `x` with `-` for read char - `-` in value can be ommited, if at least one of `r`, `w` and `x` is present: `r-x` =&amp;gt; `rx` - at least one `-` in value must be present if none of `r`, `w` and `x` is present: `---` =&amp;gt; `-` - e.</description>
    </item>
    
    <item>
      <title>Libevent Note</title>
      <link>http://www.wbprime.me/posts/2018-02-05-libevent-notes/</link>
      <pubDate>Mon, 05 Feb 2018 17:08:50 +0800</pubDate>
      
      <guid>http://www.wbprime.me/posts/2018-02-05-libevent-notes/</guid>
      <description>Event Context Structure event_base
Setup a Default Context #include &amp;lt;event2/event.h&amp;gt; struct event_base *event_base_new(void);  Setup a Custom Context 可以用 event_config 来自定义上下文。
struct event_config *event_config_new(void); struct event_base *event_base_new_with_config(const struct event_config *cfg); void event_config_free(struct event_config *cfg);  event_config 的自定义方法：
#include &amp;lt;event2/event.h&amp;gt; int event_config_avoid_method(struct event_config *cfg, const char *method); enum event_method_feature { EV_FEATURE_ET = 0x01, EV_FEATURE_O1 = 0x02, EV_FEATURE_FDS = 0x04, }; int event_config_require_features(struct event_config *cfg, enum event_method_feature feature); enum event_base_config_flag { EVENT_BASE_FLAG_NOLOCK = 0x01, EVENT_BASE_FLAG_IGNORE_ENV = 0x02, EVENT_BASE_FLAG_STARTUP_IOCP = 0x04, EVENT_BASE_FLAG_NO_CACHE_TIME = 0x08, EVENT_BASE_FLAG_EPOLL_USE_CHANGELIST = 0x10, EVENT_BASE_FLAG_PRECISE_TIMER = 0x20 }; int event_config_set_flag(struct event_config *cfg, enum event_base_config_flag flag);  event_config_avoid_method() 指定不使用的后端名</description>
    </item>
    
    <item>
      <title>Jvm Memory Model</title>
      <link>http://www.wbprime.me/posts/2018-02-05-jvm-memory-model/</link>
      <pubDate>Mon, 05 Feb 2018 16:47:59 +0800</pubDate>
      
      <guid>http://www.wbprime.me/posts/2018-02-05-jvm-memory-model/</guid>
      <description>JVM 的内存模型，从网上整理的图片：</description>
    </item>
    
    <item>
      <title>Jvm GC Options</title>
      <link>http://www.wbprime.me/posts/2018-02-05-jvm-gc-options/</link>
      <pubDate>Mon, 05 Feb 2018 16:16:53 +0800</pubDate>
      
      <guid>http://www.wbprime.me/posts/2018-02-05-jvm-gc-options/</guid>
      <description>General options  -XX:+PrintFlagsFinal -XX:+PrintFlagsInitial -XX:+PrintCommandLineFlags -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions
 -XX:+ParallelRefProcEnabled
  java -server -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+PrintFlagsFinal java -client -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+PrintFlagsFinal  GC See following image first:
Young generation  &amp;ldquo;Serial&amp;rdquo; 是串行收集器，也是 -client 默认的GC收集器，可以 -XX:+UseSerialGC 来强制开启 &amp;ldquo;ParNew&amp;rdquo; 是并行收集齐，也是 -server 默认的GC收集器，可以 -XX:+UseParallelGC 来强制开启 &amp;ldquo;Parallel Scavenge&amp;rdquo; 是吞吐量优先收集器，可以通过 -XX:+UseParallelGC 来强制开启  Old generation  &amp;ldquo;CMS&amp;rdquo; 是 Concurrent Mark Sweep 收集器  执行阶段：
 CMS-initial-mark CMS-concurrent-mark CMS-concurrent-preclean CMS-remark CMS-concurrent-sweep CMS-concurrent-reset  相关参数：</description>
    </item>
    
    <item>
      <title>Jdk VS Jre</title>
      <link>http://www.wbprime.me/posts/2018-02-05-jdk-vs-jre/</link>
      <pubDate>Mon, 05 Feb 2018 15:54:01 +0800</pubDate>
      
      <guid>http://www.wbprime.me/posts/2018-02-05-jdk-vs-jre/</guid>
      <description>&lt;p&gt;JDK 与 JRE 的区别。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Note] Http Responce Status Code</title>
      <link>http://www.wbprime.me/posts/2018-02-05-http_responce_status_code/</link>
      <pubDate>Mon, 05 Feb 2018 15:45:52 +0800</pubDate>
      
      <guid>http://www.wbprime.me/posts/2018-02-05-http_responce_status_code/</guid>
      <description>&lt;p&gt;Notes about HTTP response status code.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
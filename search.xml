<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Awk Tips: md5]]></title>
      <url>http://www.wbprime.me/2017/06/01/awk-tips-md5/</url>
      <content type="html"><![CDATA[<h1 id="Awk-之-md5"><a href="#Awk-之-md5" class="headerlink" title="Awk 之 md5"></a>Awk 之 md5</h1><h2 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h2><p>有这么一个需求：文本文件中每一行是用户名和密码，现在需要对文件进行变换，输出用户名和对应的密码的md5值。</p><p>原始文件(“input.txt”)如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">user1 user1_password</div><div class="line">user2 user2_password</div><div class="line">user3 user3_password</div><div class="line">user4 user4_password</div><div class="line">user5 user5_password</div><div class="line">user6 user6_password</div><div class="line">user7 user7_password</div></pre></td></tr></table></figure><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>可以使用支持GNU扩展特性的awk来完成这个任务。</p><p>awk 脚本如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/awk -f</div><div class="line"></div><div class="line">BEGIN &#123;</div><div class="line">    md5cmd = &quot;md5sum&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">    printf $2 |&amp; md5cmd;</div><div class="line">    close(md5cmd, &quot;to&quot;);</div><div class="line"></div><div class="line">    md5cmd |&amp; getline md5result;</div><div class="line">trueclose(md5cmd);</div><div class="line"></div><div class="line">    print $1, substr(md5result, 1, 32);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>脚本另存为 “md5.awk” 。</p><p>在终端中输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; awk -f md5.awk input.txt</div></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">user1 b4ca6e90dcef1196a20930c2d9ecfbc0</div><div class="line">user2 049914ab3268e59eb90526f64a5322d9</div><div class="line">user3 99675fb0c81fdf505a95318e4c72b685</div><div class="line">user4 5f3cca1f85aa649323c336546b3c7cc0</div><div class="line">user5 41a87fa27533b238ed77824267259837</div><div class="line">user6 758b093168f255636ad83f5f076213e6</div><div class="line">user7 c1293b0e2400acb1461d25dbe4c6e75c</div></pre></td></tr></table></figure><h2 id="释义"><a href="#释义" class="headerlink" title="释义"></a>释义</h2><p>解决方案使用了GNU awk扩展的协程功能，详解参见 [Two-Way Communications with Another Process](<a href="https://www.gnu.org/software/gawk/manual/html_node/Two_002dway-I_002fO.html#Two_002dway-I_002fO）。" target="_blank" rel="external">https://www.gnu.org/software/gawk/manual/html_node/Two_002dway-I_002fO.html#Two_002dway-I_002fO）。</a></p><p>具体来说，<code>printf $2 |&amp; md5cmd;</code> 这一行会将用户密码输出，同时 awk 会使用 sh 启动 md5cmd 进程，并将该进程的标准输入与 awk 的标准输出相连接；md5cmd 读取标准输入之后会输出其 md5sum 的结果到标准输出；<code>md5cmd |&amp; getline md5result;</code> 这一行会将 md5cmd 进程的标准输出作为输入，读取一行文本并存储到变量 md5result 中。</p><p>因为这些语句是对每一行输入文本都会执行的，所以需要在合适的时候关闭 md5cmd 进程的输入输出文件标识符。<code>close(md5cmd, &quot;to&quot;);</code> 关闭输入到 md5cmd 进程的文件标识符；<code>close(md5cmd)</code> 关闭剩下的其他文件标识符。如果不关闭的话，在如入文本文件行数很多的情况下，可能会出现由于大量打开一次性文件标识符而不释放导致可用文件标识符被耗尽的错误。</p>]]></content>
      
        <categories>
            
            <category> Awk </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> awk </tag>
            
            <tag> md5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[当时明月在 曾照彩云归]]></title>
      <url>http://www.wbprime.me/2017/04/07/huangyi-memory/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><br>当时明月在，曾照彩云归。<br></blockquote>]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> upset </tag>
            
            <tag> huangyi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Fast into Graphviz]]></title>
      <url>http://www.wbprime.me/2017/03/20/fast-into-graphviz/</url>
      <content type="html"><![CDATA[<p><a href="http://www.graphviz.org" target="_blank" rel="external">Graphviz - Graph Visualization Software</a> 由 AT&amp;T 出品， 是一种结构化信息的可视化方式，也是一套开放源代码软件，可以被广泛地使用于网络拓扑、软件工程、数据库设计、机器学习等方向的图表展示。</p><p>Graphviz 1.2D 及之前的版本使用了 AT&amp;T 代码许可证 (the AT&amp;T Source Code Agreement)，之后的版本使用了EPL (The Eclipse Public License) 。</p><p>Graphviz 是一款面向程序员的绘图软件，不仅体现在其设计和使用方式上，还体现在其文档上 :)</p><h1 id="Demos"><a href="#Demos" class="headerlink" title="Demos"></a>Demos</h1><h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h2><p>新建一个文本文件 <code>a.dot</code> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">graph start &#123;</div><div class="line">   hello -- &#123;graphviz world&#125;;</div><div class="line">   graphviz -- world</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行 <code>dot -Tpng a.dot -o a.png</code></p><p>得到：</p><p><img src="demo0_start.png" alt="a.png"></p><h2 id="程序调用"><a href="#程序调用" class="headerlink" title="程序调用"></a>程序调用</h2><p>新建一个文本文件 <code>b.dot</code> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">digraph Invoke &#123;</div><div class="line">    size = &quot;4, 4&quot;;// 图片大小</div><div class="line">    main[shape=box];/* 形状 */</div><div class="line"></div><div class="line">    main-&gt;parse;</div><div class="line">    parse-&gt;execute;</div><div class="line"></div><div class="line">    main-&gt;init[style = dotted];// 虚线</div><div class="line"></div><div class="line">    main-&gt;cleanup;</div><div class="line"></div><div class="line">    execute-&gt;&#123;make_string; printf&#125;// 连接两个</div><div class="line"></div><div class="line">    init-&gt;make_string;</div><div class="line"></div><div class="line">    edge[color = red]; // 连接线的颜色</div><div class="line"></div><div class="line">    main-&gt;printf[style=bold, label=&quot;100 times&quot;];// 线的 label</div><div class="line"></div><div class="line">    make_string[label = &quot;make a\nstring&quot;]// \n, 这个node的label，注意和上一行的区别</div><div class="line"></div><div class="line">    node[shape = box, style = filled, color = &quot;.7.3 1.0&quot;];// 一个node的属性</div><div class="line"></div><div class="line">    execute-&gt;compare;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行 <code>dot -Tpng b.dot -o b.png</code></p><p>得到：</p><p><img src="demo1_invoke.png" alt="b.png"></p><h2 id="节点形状"><a href="#节点形状" class="headerlink" title="节点形状"></a>节点形状</h2><p>新建一个文本文件 <code>c.dot</code> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">digraph node_shape &#123;</div><div class="line">    size = &quot;4, 4&quot;</div><div class="line"></div><div class="line">    a-&gt;b-&gt;c;</div><div class="line">    b-&gt;d;</div><div class="line"></div><div class="line">    a[shape = polygon, sides = 5, peripheries=3, color = lightblue, style = filled];</div><div class="line"></div><div class="line">    c[shape = polygon, sides = 4, skew= 0.4, lable = &quot;hello world&quot;];</div><div class="line"></div><div class="line">    d[shape = rect];</div><div class="line"></div><div class="line">    e[shape = polygon, side = 4, distortion = .7];</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行 <code>dot -Tpng c.dot -o c.png</code></p><p>得到：</p><p><img src="demo2_node_shape.png" alt="c.png"></p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>新建一个文本文件 <code>d.dot</code> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">digraph data_struct &#123;</div><div class="line">    node [shape = record, height=.1]; // 全局样式;  </div><div class="line"></div><div class="line">    node0[label = &quot;&lt;f0&gt; |&lt;f1&gt; G|&lt;f2&gt; &quot;];  </div><div class="line">    node1[label = &quot;&lt;f0&gt; |&lt;f1&gt; E|&lt;f2&gt; &quot;];  </div><div class="line">    node2[label = &quot;&lt;f0&gt; |&lt;f1&gt; B|&lt;f2&gt; &quot;];  </div><div class="line">    node3[label = &quot;&lt;f0&gt; |&lt;f1&gt; F|&lt;f2&gt; &quot;];  </div><div class="line">    node4[label = &quot;&lt;f0&gt; |&lt;f1&gt; R|&lt;f2&gt; &quot;];  </div><div class="line">    node5[label = &quot;&lt;f0&gt; |&lt;f1&gt; H|&lt;f2&gt; &quot;];  </div><div class="line">    node6[label = &quot;&lt;f0&gt; |&lt;f1&gt; Y|&lt;f2&gt; &quot;];  </div><div class="line">    node7[label = &quot;&lt;f0&gt; |&lt;f1&gt; A|&lt;f2&gt; &quot;];  </div><div class="line">    node8[label = &quot;&lt;f0&gt; |&lt;f1&gt; C|&lt;f2&gt; &quot;];  </div><div class="line"></div><div class="line">    &quot;node0&quot;:f2 -&gt; &quot;node4&quot;:f1;</div><div class="line">    &quot;node0&quot;:f0 -&gt; &quot;node1&quot;:f1;</div><div class="line">    &quot;node1&quot;:f0 -&gt; &quot;node2&quot;:f1;</div><div class="line">    &quot;node1&quot;:f2 -&gt; &quot;node3&quot;:f1;</div><div class="line">    &quot;node2&quot;:f2 -&gt; &quot;node8&quot;:f1;</div><div class="line">    &quot;node2&quot;:f0 -&gt; &quot;node7&quot;:f1;</div><div class="line">    &quot;node4&quot;:f2 -&gt; &quot;node6&quot;:f1;</div><div class="line">    &quot;node4&quot;:f0 -&gt; &quot;node5&quot;:f1;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行 <code>dot -Tpng d.dot -o d.png</code></p><p>得到：</p><p><img src="demo3_data_struct.png" alt="d.png"></p><h2 id="Hash-table"><a href="#Hash-table" class="headerlink" title="Hash table"></a>Hash table</h2><p>新建一个文本文件 <code>e.dot</code> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">digraph hash_table &#123;</div><div class="line">    nodesep = .05;</div><div class="line">    rankdir = LR;</div><div class="line"></div><div class="line">    node[shape = record, width = .1, height = .1];</div><div class="line"></div><div class="line">    node0[label = &quot;&lt;f0&gt; |&lt;f1&gt; |&lt;f2&gt; |&lt;f3&gt; |&lt;f4&gt; |&lt;f5&gt; |&lt;f6&gt; |&quot;, height = 2.5];</div><div class="line"></div><div class="line">    node [width = 1.5];</div><div class="line"></div><div class="line">    node1[label = &quot;&#123;&lt;n&gt; n14 | 719 |&lt;p&gt;&#125;&quot;];</div><div class="line">    node2[label = &quot;&#123;&lt;n&gt; a1 | 719 |&lt;p&gt;&#125;&quot;];</div><div class="line">    node3[label = &quot;&#123;&lt;n&gt; i9 | 512 |&lt;p&gt;&#125;&quot;];</div><div class="line">    node4[label = &quot;&#123;&lt;n&gt; e5 | 632 |&lt;p&gt;&#125;&quot;];</div><div class="line">    node5[label = &quot;&#123;&lt;n&gt; t20 | 959 |&lt;p&gt;&#125;&quot;];</div><div class="line">    node6[label = &quot;&#123;&lt;n&gt; o15 | 794 |&lt;p&gt;&#125;&quot;];</div><div class="line">    node7[label = &quot;&#123;&lt;n&gt; s19 | 659 |&lt;p&gt;&#125;&quot;];</div><div class="line"></div><div class="line">    node0:f0 -&gt; node1:n;</div><div class="line">    node0:f1 -&gt; node2:n;</div><div class="line">    node0:f2 -&gt; node3:n;</div><div class="line">    node0:f5 -&gt; node4:n;</div><div class="line">    node0:f6 -&gt; node5:n;</div><div class="line">    node2:p  -&gt; node6:n;</div><div class="line">    node4:p  -&gt; node7:n;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行 <code>dot -Tpng e.dot -o e.png</code></p><p>得到：</p><p><img src="demo4_hash_table.png" alt="e.png"></p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>新建一个文本文件 <code>f.dot</code> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">digraph work_flow &#123;</div><div class="line">    subgraph cluster0 &#123;</div><div class="line">        node[style = filled, color = white];</div><div class="line">        style = filled;</div><div class="line">        color = lightgrey;</div><div class="line"></div><div class="line">        a0-&gt;a1-&gt;a2-&gt;a3;</div><div class="line"></div><div class="line">        label = &quot;prcess #1&quot;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    subgraph cluster1 &#123;</div><div class="line">        node[style = filled];</div><div class="line"></div><div class="line">        b0-&gt;b1-&gt;b2-&gt;b3;</div><div class="line"></div><div class="line">        label = &quot;process #2&quot;;</div><div class="line">        color = blue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    start-&gt;a0;</div><div class="line">    start-&gt;b0;</div><div class="line">    a1-&gt;b3;</div><div class="line">    b2-&gt;a3;</div><div class="line">    a3-&gt;end;</div><div class="line">    b3-&gt;end;</div><div class="line"></div><div class="line">    start[shape=Mdiamond];</div><div class="line">    end[shape=Msquare];</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行 <code>dot -Tpng f.dot -o f.png</code></p><p>得到：</p><p><img src="demo5_work_flow.png" alt="f.png"></p><h1 id="Utilities"><a href="#Utilities" class="headerlink" title="Utilities"></a>Utilities</h1><ul><li>dot : filter for drawing directed graphs</li><li>neato : filter for drawing undirected graphs</li><li>twopi : filter for radial layouts of graphs</li><li>circo : filter for circular layout of graphs</li><li>fdp : filter for drawing undirected graphs</li><li>sfdp : filter for drawing large undirected graphs</li><li>patchwork : filter for tree maps</li></ul><p>以上命令工具是同一套代码的wrapper，共享相同的命令行参数:</p><ul><li><code>-G</code> sets a default graph attribute.</li><li><code>-N</code> sets a default node attribute.</li><li><code>-E</code> sets a default edge attribute.</li><li><code>-Tlang</code> sets the output language.</li><li><code>-Klayout</code> override the default layout engine implied by the command name.</li><li><code>-O</code> automatically generate output filenames based on the input filename and the -T format.</li><li><code>-ooutfile</code> writes output to file outfile.</li></ul><p>常用的输出格式有:</p><ul><li>-Tps (PostScript)</li><li>-Tsvg -Tsvgz (Structured Vector Graphics)</li><li>-Tfig (XFIG graphics)</li><li>-Tpng -Tgif (bitmap graphics)</li><li>-Timap (imagemap files for httpd servers for each node or edge that has a non‐null “href” attribute)</li><li>-Tcmapx (client‐side imagemap for use in html and xhtml)</li></ul><p>更多输出格式参见 <a href="http://www.graphviz.org/content/output-format" target="_blank" rel="external">http://www.graphviz.org/content/output-format</a> 。</p><h1 id="DOT-Language"><a href="#DOT-Language" class="headerlink" title="DOT Language"></a>DOT Language</h1><h2 id="Abstract-Grammar-Definition"><a href="#Abstract-Grammar-Definition" class="headerlink" title="Abstract Grammar Definition"></a>Abstract Grammar Definition</h2><p>官方对DOT语言的语法的描述如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">     graph: [ strict ] (graph | digraph) [ ID ] &apos;&#123;&apos; stmt_list &apos;&#125;&apos;</div><div class="line"> stmt_list: [ stmt [ &apos;;&apos; ] stmt_list ]</div><div class="line">      stmt: node_stmt |	edge_stmt |	attr_stmt |	ID &apos;=&apos; ID |	subgraph</div><div class="line"> attr_stmt: (graph | node | edge) attr_list</div><div class="line"> attr_list: &apos;[&apos; [ a_list ] &apos;]&apos; [ attr_list ]</div><div class="line">    a_list: ID &apos;=&apos; ID [ (&apos;;&apos; | &apos;,&apos;) ] [ a_list ]</div><div class="line"> edge_stmt: (node_id | subgraph) edgeRHS [ attr_list ]</div><div class="line">   edgeRHS: edgeop (node_id | subgraph) [ edgeRHS ]</div><div class="line"> node_stmt: node_id [ attr_list ]</div><div class="line">   node_id: ID [ port ]</div><div class="line">      port: &apos;: &apos; ID [ &apos;:&apos; compass_pt ] |	&apos;:      &apos; compass_pt</div><div class="line">  subgraph: [ subgraph [ ID ] ] &apos;&#123;&apos; stmt_list &apos;&#125;&apos;</div><div class="line">compass_pt: (n | ne | e | se | s | sw | w | nw | c | _)</div></pre></td></tr></table></figure><p>具体说明，参见 <a href="http://www.graphviz.org/content/dot-language" target="_blank" rel="external">The DOT Language</a><br>。</p><h2 id="keywords"><a href="#keywords" class="headerlink" title="keywords"></a>keywords</h2><p>DOT 语言里面的关键字是大小写无关的 (node, edge, graph, digraph, subgraph,<br>strict) 。</p><h2 id="graph-amp-digraph"><a href="#graph-amp-digraph" class="headerlink" title="graph &amp; digraph"></a><code>graph</code> &amp; <code>digraph</code></h2><p>一个图由 <code>graph</code> 或者 <code>digraph</code> 关键字定义，后面跟一个可选的图ID，后跟一对大括号 (<code>{</code>, <code>}</code>) 包围的语句块。<code>grpha</code> 是无向图，<code>digraph</code> 是有向图。</p><h2 id="ID"><a href="#ID" class="headerlink" title="ID"></a>ID</h2><p>图ID是一个常规的字符串，可以由一个可选的双引号包围起来；如果要使用关键字作为ID，则必须要用双引号；图ID字符串中的字符可以是任意的大小写字符 (<code>[a-zA-Z\200-\377]</code>) ，下划线 (<code>_</code>) 和数字 (<code>[0-9]</code>) ，但不能是以数字开头；图ID也可以是有效的数字 (<code>[-]?(.[0-9]+ | [0-9]+(.[0-9]*)? )</code>) ；图ID也可以是有效的HTML串。</p><h2 id="stmt"><a href="#stmt" class="headerlink" title="stmt"></a><code>stmt</code></h2><p>语句是可以是节点定义语句 (<code>node_stmt</code>) 、边定义语句 (<code>edge_stmt</code>) 、属性定义语句 (<code>attr_stmt</code>) 或者子图定义语句 (<code>subgraph</code>) 。</p><p>在 <code>graph</code> 中，需要用 <code>--</code> 操作符来定义一条边；在 <code>digraph</code> 中，需要用 <code>-&gt;</code> 操作符来定义一条边。</p><p>两个语句之间可以用一个可选的 <code>;</code> 分隔。</p><h2 id="subgraph"><a href="#subgraph" class="headerlink" title="subgraph"></a><code>subgraph</code></h2><p>子图可以用来对节点和边进行分组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">A -&gt; &#123;B C&#125;</div></pre></td></tr></table></figure><p>子图也可以用来批量设置属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">subgraph &#123;</div><div class="line">    rank = same; A; B; C;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>子图也可以用来指定布局引擎。如果子图ID以 “cluster”<br>开始，则该子图会被布局引擎作为特殊的集聚图来对待。</p><h2 id="strict"><a href="#strict" class="headerlink" title="strict"></a><code>strict</code></h2><p>如果使用了 <code>strict</code><br>关键字，则图中一个起点一个终点之间最多生成一条边。在无向图中，两个点之间最多一条边；在有向图中，两个点之间最多两条边，并且方向相反。</p><h2 id="attrs"><a href="#attrs" class="headerlink" title="attrs"></a>attrs</h2><p>属性可以是特定于节点或者边的，也可以是特定于图的。多个属性之间由空格分隔，也可以有可选的 <code>;</code> 或者 <code>,</code> 。</p><ul><li><code>name=val;</code> : 图属性</li><li><code>node [name=val];</code> : 节点属性</li><li><code>edge [name=val];</code> : 边属性</li></ul><p>详细说明，参见 <a href="http://www.graphviz.org/content/attrs" target="_blank" rel="external">Graphviz attrs</a> 。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://www.graphviz.org/content/dot-language" target="_blank" rel="external">http://www.graphviz.org/content/dot-language</a></li><li><a href="http://www.cnblogs.com/sld666666/archive/2010/06/25/1765510.html" target="_blank" rel="external">http://www.cnblogs.com/sld666666/archive/2010/06/25/1765510.html</a></li></ul>]]></content>
      
        <categories>
            
            <category> Graphviz </category>
            
        </categories>
        
        
        <tags>
            
            <tag> graphviz </tag>
            
            <tag> tech </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Learning Java Concurrency - Executors(1) ExecutorService]]></title>
      <url>http://www.wbprime.me/2016/04/15/learning-java-concurrency-executors-1-executorservice/</url>
      <content type="html"><![CDATA[<p>回过头来看<code>Thread</code>类，其实可以发现该类是对一件任务的抽象。通过将要完成的任务抽象出来用<code>Thread</code>或者<code>Runnable</code>来表示，然后委托给另外的线程来处理。<code>Thread</code>类在这里充当的是任务执行者的角色，表示一个执行任务的线程。</p><p>有时候，任务是不是由另一个线程执行并不重要，甚至于由几个线程共同完成我们也并不在意，我们只关心任务被完成了。任务这个概念已经被抽象的很好了：<code>Runnable</code>；接下来要抽象出任务执行者这个概念了。</p><p>Java提供了另一个接口<code>Executor</code>来真正地抽象任务执行者这个概念：线程池。怎么理解呢，看一下<code>Executor</code>接口的代码就好了。</p><h1 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Executor</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>是不是很简单？</p><p>任务执行者的角色有了，但是还是不够，我们还需要控制任务执行者的行为。</p><h1 id="ExecutorService"><a href="#ExecutorService" class="headerlink" title="ExecutorService"></a>ExecutorService</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ExecutorService</span> <span class="keyword">extends</span> <span class="title">Executor</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">List&lt;Runnable&gt; <span class="title">shutdownNow</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isShutdown</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isTerminated</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">awaitTermination</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></div><div class="line">        <span class="keyword">throws</span> InterruptedException;</div><div class="line"></div><div class="line">    &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span></span>;</div><div class="line"></div><div class="line">    &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Runnable task, T result)</span></span>;</div><div class="line"></div><div class="line">    Future&lt;?&gt; submit(Runnable task);</div><div class="line"></div><div class="line">    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</div><div class="line">        <span class="keyword">throws</span> InterruptedException;</div><div class="line"></div><div class="line">    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(</div><div class="line">        Collection&lt;? extends Callable&lt;T&gt;&gt; tasks, <span class="keyword">long</span> timeout, TimeUnit unit</div><div class="line">    ) <span class="keyword">throws</span> InterruptedException;</div><div class="line"></div><div class="line">    &lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span></span></div><div class="line">        <span class="keyword">throws</span> InterruptedException, ExecutionException;</div><div class="line"></div><div class="line">    &lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(</span></span></div><div class="line">        Collection&lt;? extends Callable&lt;T&gt;&gt; tasks, <span class="keyword">long</span> timeout, TimeUnit unit</div><div class="line">    ) <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>添加的<code>ExecutorService</code>接口扩展了<code>Executor</code>接口的功能，提供了对任务执行的更多的控制。<code>ExecutorService</code>从功能上才能真正称为线程池。</p><ul><li>可以停止执行任务</li><li>可以判断任务的执行情况</li><li>可以提交执行有返回值的任务</li><li>增加了对批量任务的支持</li></ul><h2 id="线程池的关闭"><a href="#线程池的关闭" class="headerlink" title="线程池的关闭"></a>线程池的关闭</h2><p>线程池被创建之后，就可以向其提交任务了，直到该线程池被关闭。</p><p><code>shutdown()</code>方法和<code>shutdownNow()</code>方法被用来关闭线程池。区别在于<code>shutdown()</code>方法只是让线程池停止接受新的任务；而<code>shutdownNow()</code>方法除了设置停止接受新任务之外，还将线程池的等待队列中的任务也取消掉。</p><p>具体地说，就是<code>shutdown()</code>方法会设置线程池为关闭状态，不再接受新的任务；原有的已经提交的任务不受影响，会继续执行直到结束；<code>shutdown()</code>方法调用后立即返回，并不会阻塞等待已提交任务的执行结束。<code>shutdownNow()</code>方法会设置线程池为关闭状态，不再接受新的任务；已经提交的任务但是未开始的任务会被取消；已经执行的任务会尝试去取消，但是不保证能取消成功；<code>shutdownNow()</code>方法的调用也是立即返回。</p><p>因为<code>shutdown()</code>方法并不会阻塞，所以还有另外一个方法来阻塞等待任务结束：<code>awaitTermination()</code>。该方法有一个过期时间的参数，如果在给定的时间内线程池的任务结束，返回成功，否则返回失败。注意，<code>awaitTermination()</code>方法本身并不试图关闭线程池，往往用来配合<code>shutdown()</code>方法使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">executorService.shutdownNow();</div><div class="line"><span class="keyword">boolean</span> re = executorService.awaitTermination(<span class="number">10</span>, TimeUnit.SECONDS);</div><div class="line"><span class="keyword">if</span> (!re) &#123;</div><div class="line">    <span class="comment">// handle error</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>isShutdown()</code>方法和<code>isTerminated()</code>方法用来判断线程池是否已关闭和已结束。可以看出，线程池总是先关闭再结束。</p><h2 id="有返回值的任务-submit"><a href="#有返回值的任务-submit" class="headerlink" title="有返回值的任务 submit()"></a>有返回值的任务 submit()</h2><p>除了可以向线程池提交<code>Runnable</code>类实例外，还可以提交<code>Callable</code>类实例。线程池也提供了用<code>Callable</code>类实例包装<code>Runnable</code>类实例的方法。</p><p><code>Callable</code>类和<code>Future</code>类的使用参见 <a href="/2016/04/13/learning-java-concurrency-futuretask-callable/">FutureTask &amp; Callable</a> 。</p><h2 id="批量任务-invokeAll-amp-invokeAny"><a href="#批量任务-invokeAll-amp-invokeAny" class="headerlink" title="批量任务 invokeAll &amp; invokeAny()"></a>批量任务 invokeAll &amp; invokeAny()</h2><p>线程池当然页提供了提交批量任务的方法。</p><p><code>invokeAll()</code>方法用于向线程池提交多个异步任务，返回任务的对应<code>Future</code>类实例。</p><p><code>invokeAny()</code>方法用于向线程池提交多个任务。与<code>invokeAll()</code>方法不同的是，该方法会阻塞直到批量任务的任一个执行结束；只要有一个任务结束，该方法就会返回该任务的结果，其他任务会被结束。</p><h1 id="ScheduledExecutorService"><a href="#ScheduledExecutorService" class="headerlink" title="ScheduledExecutorService"></a>ScheduledExecutorService</h1><p>Java通过<code>ScheduledExecutorService</code>接口扩展了<code>ExecutorService</code>接口的功能，增加了延迟执行任务的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ScheduledExecutorService</span> <span class="keyword">extends</span> <span class="title">ExecutorService</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> ScheduledFuture&lt;?&gt; schedule(</div><div class="line">        Runnable command, <span class="keyword">long</span> delay, TimeUnit unit</div><div class="line">    );</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;V&gt; <span class="function">ScheduledFuture&lt;V&gt; <span class="title">schedule</span><span class="params">(</span></span></div><div class="line">        Callable&lt;V&gt; callable, <span class="keyword">long</span> delay, TimeUnit unit</div><div class="line">    );</div><div class="line"></div><div class="line">    <span class="keyword">public</span> ScheduledFuture&lt;?&gt; scheduleAtFixedRate(</div><div class="line">        Runnable command, <span class="keyword">long</span> initialDelay, <span class="keyword">long</span> period, TimeUnit unit</div><div class="line">    );</div><div class="line"></div><div class="line">    <span class="keyword">public</span> ScheduledFuture&lt;?&gt; scheduleWithFixedDelay(</div><div class="line">        Runnable command, <span class="keyword">long</span> initialDelay, <span class="keyword">long</span> delay, TimeUnit unit</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>ScheduledExecutorService</code>接口内各方法的含义不言自明。需要注意的是<code>ScheduledFuture</code>接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ScheduledFuture</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Delayed</span>, <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Delayed</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Delayed</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getDelay</span><span class="params">(TimeUnit unit)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以发现<code>ScheduledFuture</code>接口是<code>Future</code>接口的扩展，增加了一个返回延迟时间的参数。</p><p>Java线程池的几个重要接口就介绍到这里，具体的实现下次再说吧！</p>]]></content>
      
        <categories>
            
            <category> Learning Java Concurrency </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Concurrency </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Learning Java Concurrency - FutureTask & Callable]]></title>
      <url>http://www.wbprime.me/2016/04/13/learning-java-concurrency-futuretask-callable/</url>
      <content type="html"><![CDATA[<p>Java的<code>java.util.concurrent</code>包里面提供了多线程并发和同步的支持。</p><p>最开始的时候，多线程被认为是执行任务的手段，也就是说，我启动一个新线程来执行代码，至于资源共享、线程同步等可以用锁、同步器等解决。所以<code>Thread</code>类和<code>Rannable</code>接口暴露了一个<code>void run()</code>方法来提供自定义行为。</p><p>但慢慢地，人们开始发现如果自定义的线程是计算结果的，那我怎么来拿到计算之后的结果呢？另外，我得知道什么时候计算结束了，如果计算的时间太长了，我也想能够终止计算线程的执行。这些需求其实用基本的多线程工具也可以实现，但是过程比较繁琐；而且这些需求有一段时间又特别普遍。终于，jdk 1.5开始引入了<code>Callable</code>接口和<code>Future</code>接口，用于支援有返回值的计算任务。</p><h1 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h1><p><code>Callable</code>接口和<code>Runnable</code>接口很接近，有多接近呢？对比一下代码就知道了。</p><p>这是<code>Runnable</code>的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这是<code>Callable</code>的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callable</span>&lt;<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="function">V <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看到，<code>Callable</code>接口比<code>Runnable</code>接口多了两个功能：</p><ul><li>方法可以有返回值</li><li>方法可以抛出Checked异常</li></ul><p>添加返回值就是为了支援计算类的任务；可以抛出Checked异常则是为了完善错误处理机制。</p><p>Thread/Runnable 机制是不允许抛出Checked异常的；如果抛出了Unchecked异常，会自动去寻找线程的异常处理器进行处理，参见 <a href="/2016/04/11/learning-java-concurrency-thread-runnable/">Learning Java Concurrency - Thread &amp; Runnable</a> 里面关于线程异常处理的部分。</p><h1 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h1><p><code>Future</code>接口封装了异步计算的结果，用于在异步任务完成之后获取结果。</p><p>接口的方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">V <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</div><div class="line"></div><div class="line">    <span class="function">V <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></div><div class="line">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>get()</code>方法用于获取异步任务的结果。如果异步任务还没有结束，该方法的调用会被阻塞，一直到异步任务运行结束（正常结束或者抛出异常），或者异步任务线程被中断。如果异步任务线程被中断，该方法抛出<code>InterruptedException</code>异常；如果异步任务执行抛出异常，该方法抛出<code>ExecutionException</code>异常。</p><p><code>get(long, TimeUnit)</code>方法同上，添加了过期时间的设置：当在指定时间内异步任务没有执行完毕，该方法抛出<code>TimeoutException</code>异常。</p><p>除了获取异步任务计算结果的方法之外，<code>Future</code>接口还提供了判断异步任务状态的方法和取消任务的方法。</p><p><code>isDone()</code>方法返回异步任务是否结束。异步任务正常、异常结束，异步任务被手动取消，都被认为是结束（Done）。</p><p><code>isCancelled()</code>方法返回异步任务是否被取消。</p><p><code>cancle(boolean mayInterruptIfRunning)</code>方法用于取消异步任务。顾名思义，如果异步任务已经运行完毕了，当然没法再取消了，该方法会返回失败；同理，一个已经被取消了的异步任务，该方法也会返回失败。对于正在执行的任务，该方法会根据<code>mayInterruptIfRunning</code>参数的值去判断是否需要中断异步线程。对于未开始执行的任务，调用该方法之后，任务永远不会再运行。</p><h1 id="Callable-amp-Future-的使用"><a href="#Callable-amp-Future-的使用" class="headerlink" title="Callable &amp; Future 的使用"></a>Callable &amp; Future 的使用</h1><p>因为<code>Thread</code>类并不支持直接使用<code>Callable</code>接口，所以JUC在<code>ExecutorService</code>框架中提供了使用<code>Callable</code>和<code>Future</code>的入口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span></span>;</div></pre></td></tr></table></figure><p>使用方法很简单：自定义一个<code>Callable</code>接口的实现，然后提交给<code>ExecutorService</code>实例，然后调用<code>Future.get()</code>等待异步任务运行结束并获取结果就好了。当然，如果任务运行期间等不及的话，也可以取消任务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableFutureCase</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SumupTask</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> val_;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SumupTask</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.val_ = val;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Long <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            <span class="keyword">long</span> result = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= val_; i++) &#123;</div><div class="line">                result = result + i;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> Long.valueOf(result);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] _args)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> ExecutorService executor = Executors.newCachedThreadPool();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> Future&lt;Long&gt; result = executor.submit(<span class="keyword">new</span> SumupTask(<span class="number">10000</span>));</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Main thread started!"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">final</span> Long longResult = result.get();</div><div class="line">            System.out.println(<span class="string">"Result is "</span> + longResult);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            <span class="comment">// do nothing</span></div><div class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</div><div class="line">            <span class="comment">// do nothing</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Main thread finished!"</span>);</div><div class="line"></div><div class="line">        executor.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h1><p>然而，既然已经设计了<code>Callable</code>接口和<code>Future</code>接口，却不能直接与<code>Thread</code>类一起使用，感觉有点心里不是滋味。所以有人设计了一个<code>FutureTask</code>类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTask</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Runnable</span>, <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;&#125;</div></pre></td></tr></table></figure><p>因为<code>FutureTask</code>实现了<code>Runnable</code>接口，所以可以与<code>Thread</code>类配合使用；又因为<code>FutureTask</code>实现了<code>Future</code>接口，所以可以控制任务的状态以及获取任务执行结果。</p><p><code>FutureTask</code>类有两个构造方法：</p><ul><li>public FutureTask(Callable<v>callable)</v></li><li>public FutureTask(Runnable runnable, V result)</li></ul><p>可以通过实例来看一下<code>FutureTask</code>类实际使用。</p><h2 id="FutureTask-by-Callable"><a href="#FutureTask-by-Callable" class="headerlink" title="FutureTask by Callable"></a>FutureTask by Callable</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTaskCase</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableMax</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Integer&gt; list_;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CallableMax</span><span class="params">(<span class="keyword">final</span> List&lt;Integer&gt; list)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.list_ = list;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != list_ &amp;&amp; !list_.isEmpty()) &#123;</div><div class="line">                <span class="keyword">int</span> result = list_.get(<span class="number">0</span>).intValue();</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">final</span> Integer val: list_) &#123;</div><div class="line">                    <span class="keyword">if</span> (result &lt; val.intValue()) &#123;</div><div class="line">                        result = val.intValue();</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        Thread.sleep(<span class="number">100</span>);</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        <span class="comment">// do nothing</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> Integer.valueOf(result);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] _args)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> List&lt;Integer&gt; list = ImmutableList.of(</div><div class="line">            <span class="number">1</span>, <span class="number">199</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">56</span>, <span class="number">299</span>, <span class="number">199</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">234</span></div><div class="line">        );</div><div class="line"></div><div class="line">        <span class="keyword">final</span> FutureTask&lt;Integer&gt; task1 = <span class="keyword">new</span> FutureTask(<span class="keyword">new</span> CallableMax(list));</div><div class="line"></div><div class="line">        <span class="keyword">final</span> Thread task1Thread = <span class="keyword">new</span> Thread(task1);</div><div class="line">        task1Thread.start();</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Main thread started!"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">final</span> Integer re1 = task1.get();</div><div class="line">            System.out.println(<span class="string">"Result is "</span> + re1);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            <span class="comment">// do nothing</span></div><div class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</div><div class="line">            <span class="comment">// do nothing</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Main thread finished!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用<code>Callable</code>实例去构造<code>FutureTask</code>类实例时，因为结果是<code>call()</code>方法直接返回的，所以用法比较简单。但是使用<code>Runnable</code>实例去构造<code>FutureTask</code>实例时，因为<code>run()</code>方法不能返回结果，所以要提供一个共享变量用来作为容器接受<code>run()</code>方法处理的结果，同时传递结果给调用线程。注意，使用<code>Runnable</code>方式时，共享的变量需要是一个可变的对象，不可遍对象类如<code>String</code>、<code>Integer</code>等需要提供一个包装类。</p><h2 id="FutureTask-by-Runnable"><a href="#FutureTask-by-Runnable" class="headerlink" title="FutureTask by Runnable"></a>FutureTask by Runnable</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTaskCase</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueHolder</span> </span>&#123;</div><div class="line">        Integer value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableMax</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Integer&gt; list_;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ValueHolder holder;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RunnableMax</span><span class="params">(</span></span></div><div class="line">            <span class="keyword">final</span> List&lt;Integer&gt; list, <span class="keyword">final</span> ValueHolder valueHolder</div><div class="line">        ) &#123;</div><div class="line">            <span class="keyword">this</span>.list_ = list;</div><div class="line">            <span class="keyword">this</span>.holder = valueHolder;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == holder) <span class="keyword">return</span> ;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != list_ &amp;&amp; !list_.isEmpty()) &#123;</div><div class="line">                <span class="keyword">int</span> result = list_.get(<span class="number">0</span>).intValue();</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">final</span> Integer val : list_) &#123;</div><div class="line">                    <span class="keyword">if</span> (result &lt; val.intValue()) &#123;</div><div class="line">                        result = val.intValue();</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        Thread.sleep(<span class="number">100</span>);</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        <span class="comment">// do nothing</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                holder.value = Integer.valueOf(result);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                holder.value = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] _args)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> List&lt;Integer&gt; list = ImmutableList.of(</div><div class="line">            <span class="number">1</span>, <span class="number">199</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">56</span>, <span class="number">299</span>, <span class="number">199</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">234</span></div><div class="line">        );</div><div class="line"></div><div class="line">        <span class="keyword">final</span> ValueHolder holder = <span class="keyword">new</span> ValueHolder();</div><div class="line">        <span class="keyword">final</span> FutureTask&lt;ValueHolder&gt; task2 = <span class="keyword">new</span> FutureTask(</div><div class="line">            <span class="keyword">new</span> RunnableMax(list, holder),</div><div class="line">            holder</div><div class="line">        );</div><div class="line"></div><div class="line">        <span class="keyword">final</span> Thread task2Thread = <span class="keyword">new</span> Thread(task2);</div><div class="line">        task2Thread.start();</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Main thread started!"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">final</span> ValueHolder re2 = task2.get();</div><div class="line">            System.out.println(<span class="string">"Result is "</span> + re2.value);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            <span class="comment">// do nothing</span></div><div class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</div><div class="line">            <span class="comment">// do nothing</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Main thread finished!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>代码中使用了<code>ValueHolder</code>来保存<code>run()</code>计算的结果并传递给<code>Future.get()</code>返回调用线程。</p><p>为什么要使用这种方式呢？我们来看一下<code>FutureTask</code>的对应代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">FutureTask</span><span class="params">(Runnable runnable, V result)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.callable = Executors.callable(runnable, result);</div><div class="line">    <span class="keyword">this</span>.state = NEW;       <span class="comment">// ensure visibility of callable</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>该构造器调用了<code>Executors.callable()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Callable&lt;T&gt; <span class="title">callable</span><span class="params">(Runnable task, T result)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (task == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RunnableAdapter&lt;T&gt;(task, result);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>Executors.callable()</code>方法用一个<code>RunnableAdapter</code>类对传入的参数进行了包装。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableAdapter</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">final</span> Runnable task;</div><div class="line">    <span class="keyword">final</span> T result;</div><div class="line">    RunnableAdapter(Runnable task, T result) &#123;</div><div class="line">        <span class="keyword">this</span>.task = task;</div><div class="line">        <span class="keyword">this</span>.result = result;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">call</span><span class="params">()</span> </span>&#123;</div><div class="line">        task.run();</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在包装类<code>RunnableAdapter</code>内部简单地保存了<code>Runnable</code>实例和目标类型对象。可以理解为，<code>T</code>类型的对象负责记录任务结果，而<code>Runnable</code>实例的<code>run()</code>方法在执行过程中修改该对象的值。如果<code>T</code>是一个不可变对象，则<code>run()</code>方法中的修改传递不到外部来。</p><p>既然这么复杂，那么还是尽量使用带<code>Callable</code>构造器的版本吧！</p><h1 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h1><p><a href="CallableFutureCase.java">CallableFutureCase.java</a><br><a href="FutureTaskCase.java">FutureTaskCase.java</a></p>]]></content>
      
        <categories>
            
            <category> Learning Java Concurrency </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Concurrency </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Learning Java Concurrency - Thread & Runnable]]></title>
      <url>http://www.wbprime.me/2016/04/11/learning-java-concurrency-thread-runnable/</url>
      <content type="html"><![CDATA[<p>Java并发多线程的第一课，应该就是<code>Thread</code>了。顾名思义，<code>Thread</code>就是一个线程。线程是很底层的一个概念，在不同的操作系统上实现的模型和细节并不相同，甚至于可以说天差地别；但是总体来说，线程是比进程更细粒度的操作系统调度的单位，线程有自己的运行栈，但是同一个进程的线程共享方法区和堆区数据。</p><p>对于进程和线程的差别，有一种说法是：线程是操作系统调度的基本单位，而进程是操作系统分配运行资源的基本单位。</p><p>Java中对线程作了很好的封装：<code>Thread</code>类。<code>Thread</code>类的使用非常简单。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadCase</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String word;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">EchoThread</span><span class="params">(<span class="keyword">final</span> String word)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.word = word;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</div><div class="line">                System.out.println(<span class="keyword">this</span>.getName() + <span class="string">" echos "</span> + word);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] _args)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Thread echo1 = <span class="keyword">new</span> EchoThread(<span class="string">"First"</span>);</div><div class="line">        <span class="keyword">final</span> Thread echo2 = <span class="keyword">new</span> EchoThread(<span class="string">"Second"</span>);</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Main thread started!"</span>);</div><div class="line"></div><div class="line">        echo1.start();</div><div class="line">        echo2.start();</div><div class="line"></div><div class="line">        joinThread(echo1);</div><div class="line">        joinThread(echo2);</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Main thread finished!"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">joinThread</span><span class="params">(<span class="keyword">final</span> Thread th)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            th.join();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            System.out.println(th.getName() + <span class="string">" interrupted!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以很明显地发现：</p><ul><li>main负责启动其他线程，main本身也是一个线程</li><li>线程的调度是难以预料的，<code>echo1</code>和<code>echo2</code>的输出结果相互交错可以看出这一点</li><li>线程之间可以进行同步控制，使用<code>Thread.join()</code>方法可以强制等待另一个线程结束</li><li>自定义线程行为只需要重新实现<code>Thread.run()</code>方法即可</li><li>线程的启动入口是<code>Thread.start()</code>方法，不要直接运行<code>Thread.run()</code>方法</li><li><code>Thread</code>类是一个<code>class</code>（与<code>interface</code>相对应），意味着自定义线程类不能继承别的父类</li></ul><h1 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h1><h2 id="API-列表"><a href="#API-列表" class="headerlink" title="API 列表"></a>API 列表</h2><ol><li>Thread()</li><li>Thread(Runnable target)</li><li>Thread(Runnable target, AccessControlContext acc)</li><li>Thread(ThreadGroup group, Runnable target)</li><li>Thread(String name)</li><li>Thread(ThreadGroup group, String name)</li><li>Thread(Runnable target, String name)</li><li>Thread(ThreadGroup group, Runnable target, String name)</li><li>Thread(ThreadGroup group, Runnable target, String name, long stackSize)</li><li>void start()</li><li>void interrupt()</li><li>boolean isInterrupted()</li><li>boolean isAlive()</li><li>State getState()</li><li>void run()</li><li>void join(long millis)</li><li>void join(long millis, int nanos)</li><li>void join() throws InterruptedException</li><li>static native void sleep(long millis) throws InterruptedException</li><li>static void sleep(long millis, int nanos)</li><li>void setDaemon(boolean on)</li><li>boolean isDaemon()</li><li>static UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()</li><li>static void setDefaultUncaughtExceptionHandler(UncaughtExceptionHandler eh)</li><li>UncaughtExceptionHandler getUncaughtExceptionHandler()</li><li>void setUncaughtExceptionHandler(UncaughtExceptionHandler eh)</li><li>static native Thread currentThread()</li></ol><h2 id="创建线程类对象"><a href="#创建线程类对象" class="headerlink" title="创建线程类对象"></a>创建线程类对象</h2><p><code>Thread</code>类一共有9个公开的构造函数，咋一看很杂乱无章的，但是其实是有规律的。</p><p>考虑以下事实：</p><ul><li>每个线程应该有一个名字，用来标识自己</li><li>每个线程可以有自己的行为，应该有一个用于自定义行为的类<code>Runnable</code></li><li>线程应该可以分组，属于某个特定的<code>ThreadGroup</code>实例</li><li>线程应该有权限控制，用<code>AccessControlContext</code>来设置</li><li>每个线程有自己的栈，应该可以自定义栈的大小</li></ul><p>这些线程相关的属性相互组合，并添加一些默认值，能够得到的构造函数绝对不止9个，哈！</p><p>实际上，以上所有的构造函数都是调用了内部私有的<code>init()</code>方法。</p><p>注意：<code>Thread</code>类是一个普通的Java类，所以构造器创建的对象引用是分配在当前的线程。该实例对应的线程还没有被创建。</p><h2 id="启动线程"><a href="#启动线程" class="headerlink" title="启动线程"></a>启动线程</h2><p>构造了一个线程对象之后，就可以启动该线程对象代表的线程开始执行任务。</p><p><code>run()</code>方法里面是需要执行的任务。想要在该线程对象代表的线程中运行该任务，需要调用<code>start()</code>方法。</p><p>需要再次澄清一下，<code>Thread</code>对象是存在于创建它的线程中，调用<code>start()</code>方法会启动一个新的线程来运行<code>run()</code>里面的代码。如果直接调用<code>run()</code>方法，只是让当前线程去执行该任务，达不到预期的效果。</p><p>由于线程的运行需要操作系统进行调度，所以执行<code>start()</code>方法之后，什么时候执行线程是不可预期的。如果对线程运行的先后顺序有要求，请主动对线程进行同步控制。</p><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><p>当前线程创建了<code>Thread</code>对象，实际的线程还没有被创建，线程对象处于<code>NEW</code>状态。</p><p>根据<code>Thread</code>的api说明，一个<code>Thread</code>对象会有6种状态，同一时间该对象只可能处于一种状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> State &#123;</div><div class="line">    NEW,			<span class="comment">// 新建状态</span></div><div class="line">    RUNNABLE, 		<span class="comment">// 运行状态</span></div><div class="line">    BLOCKED,		<span class="comment">// 阻塞状态</span></div><div class="line">    WAITING,		<span class="comment">// 无条件的等待状态</span></div><div class="line">    TIMED_WAITING, 	<span class="comment">// 有条件的等待状态</span></div><div class="line">    TERMINATED; 	<span class="comment">// 终止状态</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>新建状态表明线程对象还未运行；运行状态表明线程对象正在运行一个线程；阻塞状态表明本线程对象在等待一个锁或同步器；无条件等待状态表明本线程对象在无限期地等待一个条件，比如调用了无过期时间的<code>Object.wait()</code>、<code>Thread.join()</code>等方法；有条件等待状态表明本线程对象在有条件地等待一个条件，是无条件等待状态的过期时间版本（timeout）；终止状态表明本线程对象代表的线程已经结束运行。</p><h2 id="自定义线程行为"><a href="#自定义线程行为" class="headerlink" title="自定义线程行为"></a>自定义线程行为</h2><p>前面已经说到，线程执行的任务在<code>run()</code>方法里面。所以，自定义线程就需要自定义该方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</div><div class="line">        target.run();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>run()</code>方法的默认实现是去执行构造器里面提供的<code>Runnable</code>对象的<code>run()</code>方法。</p><p>所以，有两种方法可以自定义线程。</p><ul><li>继承<code>Thread</code>类，覆盖<code>run()</code>方法</li><li>创建一个<code>Runnable</code>对象并用之构造一个<code>Thread</code>对象</li></ul><p>这两种方式没有本质上的区别，选择哪一种需要看具体的场合。</p><p>值得一提的是，<code>Thread</code>类实现了<code>Runnable</code>接口。</p><h2 id="线程等待"><a href="#线程等待" class="headerlink" title="线程等待"></a>线程等待</h2><p>线程的操作系统调度是不可预期的，所以在需要显式地控制线程运行的场合，需要使用额外的方法来达到目的。</p><p>比较高级的工具有<code>ReentrantLock</code>、<code>CountDownLatch</code>和<code>Semaphore</code>等，最简单的方法是调用<code>Thread.join()</code>方法。</p><p>假如有一个线程对象A，它创建了一个新的线程对象B，然后调用<code>B.start()</code>启动B线程。这时候A线程可以紧接着调用<code>B.join()</code>进入等待状态，知道B线程执行完毕才开始执行A线程。</p><p><code>join()</code>方法有多个变体，区别在于是否提供超时时间。如果对线程对象的生命周期还有映像的话，提供了超时时间的<code>join()</code>方法会导致当前线程进入有条件等待状态，反之进入无条件等待状态。</p><h2 id="后台线程"><a href="#后台线程" class="headerlink" title="后台线程"></a>后台线程</h2><p>正常情况下，JVM会等待所有的线程都运行结束之后才会退出。通过设置线程为后台线程可以使得JVM不用等待。</p><p>当所有运行的线程都是后台线程时，JVM会结束运行。</p><p><code>setDaemon()</code>方法用来设置线程为后台线程，<code>isDaemon()</code>方法可以用来检测是否为后台线程。</p><p>需要注意的是，<code>setDaemon()</code>方法需要在<code>start()</code>方法被调用之前调用才能生效。</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>线程执行<code>run()</code>方法的过程中，有可能会遇到未捕获的异常。Java规范规定，JVM在执行线程过程中遇到了未捕获的异常，会主动去寻找该线程对象的未捕获异常处理器，如果没找到就去该线程对象的<code>ThreadGroup</code>对象里找，如果还是没有找到就去找<code>Thread</code>类的静态的未捕获异常处理器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UncaughtExceptionHandler</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread t, Throwable e)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> UncaughtExceptionHandler uncaughtExceptionHandler;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> UncaughtExceptionHandler defaultUncaughtExceptionHandler;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDefaultUncaughtExceptionHandler</span><span class="params">(UncaughtExceptionHandler eh)</span> </span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UncaughtExceptionHandler <span class="title">getDefaultUncaughtExceptionHandler</span><span class="params">()</span></span></div><div class="line"></div><div class="line"><span class="keyword">public</span> UncaughtExceptionHandler <span class="title">getUncaughtExceptionHandler</span><span class="params">()</span>;</div></pre></td></tr></table></figure><p>可以通过上面的方法自定义未捕获异常的处理行为。</p><h1 id="ThreadGroup"><a href="#ThreadGroup" class="headerlink" title="ThreadGroup"></a>ThreadGroup</h1><p>顾名思义，<code>ThreadGroup</code>类表征了一个线程组。</p><p>可以在创建线程对象的时候指定所属的线程组。可以通过线程组对象控制组内的线程。</p><p><code>ThreadGroup</code>类比较有用的方法如下：</p><ul><li>void setDaemon(boolean daemon)</li><li>boolean isDaemon()</li><li>void setMaxPriority(int pri)</li><li>int getMaxPriority()</li><li>void interrupt()</li><li>void uncaughtException(Thread t, Throwable e)</li></ul><p>各个方法的含义不言自明，比较有意思的是<code>uncaughtException(Thread, Throwable)</code>方法。如果还记得线程对象的异常处理流程的话，就能明白为什么线程对象本身没有设置未捕获异常处理器时，会到所属的线程组对象里找。</p><p>因为<code>ThreadGroup</code>类实现了<code>Thread.UncaughtExceptionHandler</code>接口。<code>ThreadGroup</code>类的<code>uncaughtException(Thread, Throwable)</code>方法实现中，首先委托父线程组对象处理未捕获异常，如果没有父线程组，则跳到<code>Thread</code>类的静态的默认未捕获异常处理器进行处理。</p><h1 id="Runnable"><a href="#Runnable" class="headerlink" title="Runnable"></a>Runnable</h1><p><code>Runnable</code>接口很简单。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>实际使用中使用<code>Runnable</code>的方式经常是使用匿名内部类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableCase</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] _args)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Thread echo1 =  <span class="keyword">new</span> Thread(</div><div class="line">            <span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</div><div class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">" echos first"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        );</div><div class="line"></div><div class="line">        <span class="keyword">final</span> Thread echo2 =  <span class="keyword">new</span> Thread(</div><div class="line">            <span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</div><div class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">" echos second"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        );</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Main thread started!"</span>);</div><div class="line"></div><div class="line">        echo1.start();</div><div class="line">        echo2.start();</div><div class="line"></div><div class="line">        joinThread(echo1);</div><div class="line">        joinThread(echo2);</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Main thread finished!"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">joinThread</span><span class="params">(<span class="keyword">final</span> Thread th)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            th.join();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            System.out.println(th.getName() + <span class="string">" interrupted!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h1><p><a href="RunnableCase.java">RunnableCase.java</a><br><a href="ThreadCase.java">ThreadCase.java</a></p>]]></content>
      
        <categories>
            
            <category> Learning Java Concurrency </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Concurrency </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring MVC Integration Testing - JsonPath]]></title>
      <url>http://www.wbprime.me/2016/04/09/spring-mvc-testing-integration-testing-jsonpath/</url>
      <content type="html"><![CDATA[<p>本文是<a href="/2016/04/09/spring-mvc-testing-content/">Spring MVC Testing</a>集成测试系列的第1篇，原文链接：<a href="http://www.petrikainulainen.net/programming/spring-framework/integration-testing-of-spring-mvc-applications-write-clean-assertions-with-jsonpath/" target="_blank" rel="external">Integration Testing of Spring MVC Applications: Write Clean Assertions with JsonPath</a>。</p>]]></content>
      
        <categories>
            
            <category> Spring MVC Testing </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring MVC </tag>
            
            <tag> Test </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring MVC Integration Testing - Security]]></title>
      <url>http://www.wbprime.me/2016/04/09/spring-mvc-testing-integration-testing-security/</url>
      <content type="html"><![CDATA[<p>本文是<a href="/2016/04/09/spring-mvc-testing-content/">Spring MVC Testing</a>集成测试系列的第1篇，原文链接：<a href="http://www.petrikainulainen.net/programming/spring-framework/integration-testing-of-spring-mvc-applications-security/" target="_blank" rel="external">Integration Testing of Spring MVC Applications: Security</a>。</p>]]></content>
      
        <categories>
            
            <category> Spring MVC Testing </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring MVC </tag>
            
            <tag> Test </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring MVC Integration Testing - REST API]]></title>
      <url>http://www.wbprime.me/2016/04/09/spring-mvc-testing-integration-testing-rest-api/</url>
      <content type="html"><![CDATA[<p>本文是 <a href="/2016/04/09/spring-mvc-testing-content/">Spring MVC Testing</a> 集成测试系列的第4篇，原文链接：<a href="http://www.petrikainulainen.net/programming/spring-framework/integration-testing-of-spring-mvc-applications-rest-api-part-one/" target="_blank" rel="external">Integration Testing of Spring MVC Applications: REST API, Part One</a> 和 <a href="http://www.petrikainulainen.net/programming/spring-framework/integration-testing-of-spring-mvc-applications-rest-api-part-two/" target="_blank" rel="external">Integration Testing of Spring MVC Applications: REST API, Part Two</a>。</p><p>本文主要介绍如何为基于Spring MVC的REST-full的web应用程序添加集成测试。REST服务通过HTTP标准方法的语义（GET/POST/PUT/DELETE等）来隐喻常见的增删改查（CRUD）操作。</p><p>本文主要演示如何一步一步地为REST-full API服务添加集成测试用例，包括：</p><ul><li>获取Todo项列表接口的集成测试</li><li>获取单个Todo项接口的集成测试</li><li>删除单个Todo项接口的集成测试</li><li>添加新Todo项接口的集成测试</li><li>更新Todo项接口的集成测试</li></ul><h1 id="示例web应用结构"><a href="#示例web应用结构" class="headerlink" title="示例web应用结构"></a>示例web应用结构</h1><h2 id="Domain-层"><a href="#Domain-层" class="headerlink" title="Domain 层"></a>Domain 层</h2><p>Domain层有一个Todo的实体类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.hibernate.annotations.Type;</div><div class="line"><span class="keyword">import</span> org.joda.time.DateTime;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.persistence.*;</div><div class="line"></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name=<span class="string">"todos"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Todo</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.AUTO)</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"creation_time"</span>, nullable = <span class="keyword">false</span>)</div><div class="line">    <span class="meta">@Type</span>(type=<span class="string">"org.jadira.usertype.dateandtime.joda.PersistentDateTime"</span>)</div><div class="line">    <span class="keyword">private</span> DateTime creationTime;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"description"</span>, nullable = <span class="keyword">true</span>, length = <span class="number">500</span>)</div><div class="line">    <span class="keyword">private</span> String description;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"modification_time"</span>, nullable = <span class="keyword">false</span>)</div><div class="line">    <span class="meta">@Type</span>(type=<span class="string">"org.jadira.usertype.dateandtime.joda.PersistentDateTime"</span>)</div><div class="line">    <span class="keyword">private</span> DateTime modificationTime;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"title"</span>, nullable = <span class="keyword">false</span>, length = <span class="number">100</span>)</div><div class="line">    <span class="keyword">private</span> String title;</div><div class="line"></div><div class="line">    <span class="meta">@Version</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> version;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Todo</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//Getters and other methods</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Service-层"><a href="#Service-层" class="headerlink" title="Service 层"></a>Service 层</h2><p>Service层有一个<code>TodoService</code>接口，主要提供了以下个方法：</p><ul><li><code>Todo deleteById(Long id)</code> 在数据库中删除指定的Todo项；如果指定的Todo项不存在，则抛出<code>TodoNotFoundException</code>异常</li><li><code>List&lt;Todo&gt; findAll()</code> 返回所有的Todo项的列表；如果没有Todo项，返回空列表</li><li><code>Todo findById(Long id)</code> 返回指定的Todo项；如果指定的Todo项不存在，则抛出<code>TodoNotFoundException</code>异常</li><li><code>Todo add(TodoDTO added)</code> 在数据库中添加指定的Todo项</li><li><code>Todo update(TodoDTO updated)</code> 在数据库中更新指定的Todo项；如果指定的Todo项不存在，则抛出<code>TodoNotFoundException</code>异常</li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TodoService</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> Todo <span class="title">deleteById</span><span class="params">(Long id)</span> <span class="keyword">throws</span> TodoNotFoundException</span>;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Todo&gt; <span class="title">findAll</span><span class="params">()</span></span>;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> Todo <span class="title">findById</span><span class="params">(Long id)</span> <span class="keyword">throws</span> TodoNotFoundException</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Todo <span class="title">add</span><span class="params">(TodoDTO added)</span></span>;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> Todo <span class="title">update</span><span class="params">(TodoDTO updated)</span> <span class="keyword">throws</span> TodoNotFoundException</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Controller-层"><a href="#Controller-层" class="headerlink" title="Controller 层"></a>Controller 层</h2><p>Controller层有一个<code>TodoController</code>类，主要提供json的REST接口以及异常映射机制。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.context.MessageSource;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.validation.BeanPropertyBindingResult;</div><div class="line"><span class="keyword">import</span> org.springframework.validation.FieldError;</div><div class="line"><span class="keyword">import</span> org.springframework.validation.Validator;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.annotation.Resource;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Locale;</div><div class="line"></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoController</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> TodoService service;</div><div class="line"> </div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> LocaleContextHolderWrapper localeHolderWrapper;</div><div class="line"> </div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> MessageSource messageSource;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/api/todo/&#123;id&#125;"</span>, method = RequestMethod.DELETE)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> TodoDTO <span class="title">deleteById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id) <span class="keyword">throws</span> TodoNotFoundException </span>&#123;</div><div class="line">        Todo deleted = service.deleteById(id);</div><div class="line">        <span class="keyword">return</span> createDTO(deleted);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/api/todo"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;TodoDTO&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;Todo&gt; models = service.findAll();</div><div class="line">        <span class="keyword">return</span> createDTOs(models);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> List&lt;TodoDTO&gt; <span class="title">createDTOs</span><span class="params">(List&lt;Todo&gt; models)</span> </span>&#123;</div><div class="line">        List&lt;TodoDTO&gt; dtos = <span class="keyword">new</span> ArrayList&lt;TodoDTO&gt;();</div><div class="line"> </div><div class="line">        <span class="keyword">for</span> (Todo model: models) &#123;</div><div class="line">            dtos.add(createDTO(model));</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> dtos;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/api/todo/&#123;id&#125;"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> TodoDTO <span class="title">findById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id) <span class="keyword">throws</span> TodoNotFoundException </span>&#123;</div><div class="line">        Todo found = service.findById(id);</div><div class="line">        <span class="keyword">return</span> createDTO(found);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/api/todo"</span>, method = RequestMethod.POST)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> TodoDTO <span class="title">add</span><span class="params">(@Valid @RequestBody TodoDTO dto)</span> <span class="keyword">throws</span> FormValidationError </span>&#123;</div><div class="line">        validate(<span class="string">"todo"</span>, dto);</div><div class="line"> </div><div class="line">        Todo added = service.add(dto);</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> createDTO(added);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/api/todo/&#123;id&#125;"</span>, method = RequestMethod.PUT)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> TodoDTO <span class="title">update</span><span class="params">(</span></span></div><div class="line">        @Valid @RequestBody TodoDTO dto,</div><div class="line">        @PathVariable(<span class="string">"id"</span>) Long todoId</div><div class="line">    ) <span class="keyword">throws</span> TodoNotFoundException, FormValidationError &#123;</div><div class="line"> </div><div class="line">        Todo updated = service.update(dto);</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> createDTO(updated);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> TodoDTO <span class="title">createDTO</span><span class="params">(Todo model)</span> </span>&#123;</div><div class="line">        TodoDTO dto = <span class="keyword">new</span> TodoDTO();</div><div class="line"> </div><div class="line">        dto.setId(model.getId());</div><div class="line">        dto.setDescription(model.getDescription());</div><div class="line">        dto.setTitle(model.getTitle());</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> dto;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@ExceptionHandler</span>(FormValidationError.class)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.BAD_REQUEST)</div><div class="line">    <span class="function"><span class="keyword">public</span> FormValidationErrorDTO <span class="title">handleFormValidationError</span><span class="params">(FormValidationError validationError)</span> </span>&#123;</div><div class="line">        Locale current = localeHolderWrapper.getCurrentLocale();</div><div class="line"> </div><div class="line">        List&lt;FieldError&gt; fieldErrors = validationError.getFieldErrors();</div><div class="line"> </div><div class="line">        FormValidationErrorDTO dto = <span class="keyword">new</span> FormValidationErrorDTO();</div><div class="line"> </div><div class="line">        <span class="keyword">for</span> (FieldError fieldError: fieldErrors) &#123;</div><div class="line">            String[] fieldErrorCodes = fieldError.getCodes();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; fieldErrorCodes.length; index++) &#123;</div><div class="line">                String fieldErrorCode = fieldErrorCodes[index];</div><div class="line"> </div><div class="line">                String localizedError = messageSource.getMessage(fieldErrorCode, fieldError.getArguments(), current);</div><div class="line">                <span class="keyword">if</span> (localizedError != <span class="keyword">null</span> &amp;&amp; !localizedError.equals(fieldErrorCode)) &#123;</div><div class="line">                    dto.addFieldError(fieldError.getField(), localizedError);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">if</span> (isLastFieldErrorCode(index, fieldErrorCodes)) &#123;</div><div class="line">                        dto.addFieldError(fieldError.getField(), localizedError);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> dto;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isLastFieldErrorCode</span><span class="params">(<span class="keyword">int</span> index, String[] fieldErrorCodes)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> index == fieldErrorCodes.length - <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@ExceptionHandler</span>(TodoNotFoundException.class)</div><div class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.NOT_FOUND)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleTodoNotFoundException</span><span class="params">(TodoNotFoundException ex)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="DTO"><a href="#DTO" class="headerlink" title="DTO"></a>DTO</h2><p>一共添加了3个DTO类，用于向api的调用者传递数据。</p><ul><li><code>TodoDTO</code>类 用来传递和接收Todo项数据</li><li><code>FieldValidationErrorDTO</code>类 用来传递单参数错误提示</li><li><code>FormValidationErrorDTO</code>类 用来传递多参数错误提示</li></ul><h3 id="TodoDTO"><a href="#TodoDTO" class="headerlink" title="TodoDTO"></a>TodoDTO</h3><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Length;</div><div class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.NotEmpty;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoDTO</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line"> </div><div class="line">    <span class="meta">@Length</span>(max = <span class="number">500</span>)</div><div class="line">    <span class="keyword">private</span> String description;</div><div class="line"> </div><div class="line">    <span class="meta">@NotEmpty</span></div><div class="line">    <span class="meta">@Length</span>(max = <span class="number">100</span>)</div><div class="line">    <span class="keyword">private</span> String title;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TodoDTO</span><span class="params">()</span> </span>&#123;</div><div class="line"> </div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">//Getters and setters</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="FieldValidationErrorDTO"><a href="#FieldValidationErrorDTO" class="headerlink" title="FieldValidationErrorDTO"></a>FieldValidationErrorDTO</h3><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FieldValidationErrorDTO</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> String path;</div><div class="line">    <span class="keyword">private</span> String message;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FieldValidationErrorDTO</span><span class="params">(String path, String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.path = path;</div><div class="line">        <span class="keyword">this</span>.message = message;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">//Getters</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="FormValidationErrorDTO"><a href="#FormValidationErrorDTO" class="headerlink" title="FormValidationErrorDTO"></a>FormValidationErrorDTO</h3><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormValidationErrorDTO</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> List&lt;FieldValidationErrorDTO&gt; fieldErrors = <span class="keyword">new</span> ArrayList&lt;FieldValidationErrorDTO&gt;();</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FormValidationErrorDTO</span><span class="params">()</span> </span>&#123;</div><div class="line"> </div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFieldError</span><span class="params">(String path, String message)</span> </span>&#123;</div><div class="line">        FieldValidationErrorDTO fieldError = <span class="keyword">new</span> FieldValidationErrorDTO(path, message);</div><div class="line">        fieldErrors.add(fieldError);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">//Getter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h2><p>一共添加了2个异常类：<code>TodoNotFoundException</code>和<code>FormValidationError</code>。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoNotFoundException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TodoNotFoundException</span><span class="params">(<span class="keyword">final</span> String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(message);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormValidationError</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> List&lt;FieldError&gt; fieldErrors;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FormValidationError</span><span class="params">(List&lt;FieldError&gt; fieldErrors)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.fieldErrors = fieldErrors;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">//Getter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="编写测试用例"><a href="#编写测试用例" class="headerlink" title="编写测试用例"></a>编写测试用例</h1><h2 id="GET-获取Todo项列表"><a href="#GET-获取Todo项列表" class="headerlink" title="GET 获取Todo项列表"></a>GET 获取Todo项列表</h2><p>添加测试用例的思路如下：</p><ol><li>使用@ExpectedDatabase注解来验证接口没有对数据库表状态产生变化</li><li>模拟执行”/api/todo”的GET请求，并取得返回的响应结果</li><li>对返回的响应结果作断言：HTTP状态码为200</li><li>对返回的响应结果作断言：Content-type的值是”application/json”，并且字符集是”UTF-8”</li><li>对返回的响应结果作断言：返回的结果符合预期</li></ol><p>最终代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.DbUnitTestExecutionListener;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.DatabaseSetup;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.ExpectedDatabase;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.TestExecutionListeners;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DirtiesContextTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.transaction.TransactionalTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.samples.context.WebContextLoader;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.request.MockMvcRequestBuilders.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.content;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.status;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(loader = WebContextLoader.class, classes = &#123;ExampleApplicationContext.class&#125;)</div><div class="line"><span class="meta">@TestExecutionListeners</span>(&#123; DependencyInjectionTestExecutionListener.class,</div><div class="line">        DirtiesContextTestExecutionListener.class,</div><div class="line">        TransactionalTestExecutionListener.class,</div><div class="line">        DbUnitTestExecutionListener.class &#125;)</div><div class="line"><span class="meta">@DatabaseSetup</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITTodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//Add web application context here</span></div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="comment">//Add setUp() method here</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@ExpectedDatabase</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        mockMvc.perform(get(<span class="string">"/api/todo"</span>))</div><div class="line">                .andExpect(status().isOk())</div><div class="line">                .andExpect(content().contentType(TestUtil.APPLICATION_JSON_UTF8))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$"</span>, hasSize(<span class="number">2</span>)))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$[0].id"</span>, is(<span class="number">1</span>)))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$[0].description"</span>, is(<span class="string">"Lorem ipsum"</span>)))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$[0].title"</span>, is(<span class="string">"Foo"</span>)))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$[1].id"</span>, is(<span class="number">2</span>)))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$[1].description"</span>, is(<span class="string">"Lorem ipsum"</span>)))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$[1].title"</span>, is(<span class="string">"Bar"</span>)));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用的<code>toDoData.xml</code>文件的内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dataset</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">todos</span> <span class="attr">id</span>=<span class="string">"1"</span> <span class="attr">creation_time</span>=<span class="string">"2012-10-21 11:13:28"</span> <span class="attr">description</span>=<span class="string">"Lorem ipsum"</span> <span class="attr">modification_time</span>=<span class="string">"2012-10-21 11:13:28"</span> <span class="attr">title</span>=<span class="string">"Foo"</span> <span class="attr">version</span>=<span class="string">"0"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">todos</span> <span class="attr">id</span>=<span class="string">"2"</span> <span class="attr">creation_time</span>=<span class="string">"2012-10-21 11:13:28"</span> <span class="attr">description</span>=<span class="string">"Lorem ipsum"</span> <span class="attr">modification_time</span>=<span class="string">"2012-10-21 11:13:28"</span> <span class="attr">title</span>=<span class="string">"Bar"</span> <span class="attr">version</span>=<span class="string">"0"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dataset</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="GET-获取单个Todo项"><a href="#GET-获取单个Todo项" class="headerlink" title="GET 获取单个Todo项"></a>GET 获取单个Todo项</h2><p>根据参数的不同，获取单个Todo项详情接口会有不同的返回结果：</p><ul><li>如果指定id的Todo项存在，返回单个Todo项</li><li>如果指定id的Todo项不存在，返回404</li></ul><p>下面来分别编写测试用例。</p><h3 id="指定的Todo项存在"><a href="#指定的Todo项存在" class="headerlink" title="指定的Todo项存在"></a>指定的Todo项存在</h3><p>添加测试用例的思路如下：</p><ol><li>使用@ExpectedDatabase注解来验证接口没有对数据库表状态产生变化</li><li>模拟执行”/api/todo/1”的GET请求，并取得返回的响应结果</li><li>对返回的响应结果作断言：HTTP状态码为200</li><li>对返回的响应结果作断言：Content-type的值是”application/json”，并且字符集是”UTF-8”</li><li>对返回的响应结果作断言：返回的结果符合预期</li></ol><p>最终代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.DbUnitTestExecutionListener;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.DatabaseSetup;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.ExpectedDatabase;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.TestExecutionListeners;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DirtiesContextTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.transaction.TransactionalTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.samples.context.WebContextLoader;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.request.MockMvcRequestBuilders.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.content;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.status;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(loader = WebContextLoader.class, classes = &#123;ExampleApplicationContext.class&#125;)</div><div class="line"><span class="meta">@TestExecutionListeners</span>(&#123; DependencyInjectionTestExecutionListener.class,</div><div class="line">        DirtiesContextTestExecutionListener.class,</div><div class="line">        TransactionalTestExecutionListener.class,</div><div class="line">        DbUnitTestExecutionListener.class &#125;)</div><div class="line"><span class="meta">@DatabaseSetup</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITTodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//Add web application context here</span></div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="comment">//Add setUp() method here</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@ExpectedDatabase</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findById</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        mockMvc.perform(get(<span class="string">"/api/todo/&#123;id&#125;"</span>, <span class="number">1L</span>))</div><div class="line">                .andExpect(status().isOk())</div><div class="line">                .andExpect(content().contentType(TestUtil.APPLICATION_JSON_UTF8))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$.id"</span>, is(<span class="number">1</span>)))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$.description"</span>, is(<span class="string">"Lorem ipsum"</span>)))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$.title"</span>, is(<span class="string">"Foo"</span>)));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="指定的Todo项不存在"><a href="#指定的Todo项不存在" class="headerlink" title="指定的Todo项不存在"></a>指定的Todo项不存在</h3><p>添加测试用例的思路如下：</p><ol><li>使用@ExpectedDatabase注解来验证接口没有对数据库表状态产生变化</li><li>模拟执行”/api/todo/3”的GET请求，并取得返回的响应结果</li><li>对返回的响应结果作断言：HTTP状态码为404</li></ol><p>最终代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.DbUnitTestExecutionListener;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.DatabaseSetup;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.ExpectedDatabase;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.TestExecutionListeners;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DirtiesContextTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.transaction.TransactionalTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.samples.context.WebContextLoader;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.request.MockMvcRequestBuilders.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.status;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(loader = WebContextLoader.class, classes = &#123;ExampleApplicationContext.class&#125;)</div><div class="line"><span class="meta">@TestExecutionListeners</span>(&#123; DependencyInjectionTestExecutionListener.class,</div><div class="line">        DirtiesContextTestExecutionListener.class,</div><div class="line">        TransactionalTestExecutionListener.class,</div><div class="line">        DbUnitTestExecutionListener.class &#125;)</div><div class="line"><span class="meta">@DatabaseSetup</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITTodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//Add web application context here</span></div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="comment">//Add setUp() method here</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@ExpectedDatabase</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByIdWhenTodoIsNotFound</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        mockMvc.perform(get(<span class="string">"/api/todo/&#123;id&#125;"</span>, <span class="number">3L</span>))</div><div class="line">                .andExpect(status().isNotFound());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="DELETE-删除指定的Todo项"><a href="#DELETE-删除指定的Todo项" class="headerlink" title="DELETE 删除指定的Todo项"></a>DELETE 删除指定的Todo项</h2><p>根据参数的不同，删除指定Todo项接口会有不同的返回结果：</p><ul><li>如果指定id的Todo项存在，则删除之并返该结果</li><li>如果指定id的Todo项不存在，返回404</li></ul><p>下面来分别编写测试用例。</p><h3 id="指定的Todo项存在-1"><a href="#指定的Todo项存在-1" class="headerlink" title="指定的Todo项存在"></a>指定的Todo项存在</h3><p>添加测试用例的思路如下：</p><ol><li>使用@ExpectedDatabase注解来验证接口对数据库的操作符合预期</li><li>模拟执行”/api/todo/1”的DELETE请求，并取得返回的响应结果</li><li>对返回的响应结果作断言：HTTP状态码为200</li><li>对返回的响应结果作断言：Content-type的值是”application/json”，并且字符集是”UTF-8”</li><li>对返回的响应结果作断言：返回的结果符合预期</li></ol><p>最终代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.DbUnitTestExecutionListener;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.DatabaseSetup;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.ExpectedDatabase;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.TestExecutionListeners;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DirtiesContextTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.transaction.TransactionalTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.samples.context.WebContextLoader;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.request.MockMvcRequestBuilders.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.content;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.status;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(loader = WebContextLoader.class, classes = &#123;ExampleApplicationContext.class&#125;)</div><div class="line"><span class="meta">@TestExecutionListeners</span>(&#123;DependencyInjectionTestExecutionListener.class,</div><div class="line">        DirtiesContextTestExecutionListener.class,</div><div class="line">        TransactionalTestExecutionListener.class,</div><div class="line">        DbUnitTestExecutionListener.class&#125;)</div><div class="line"><span class="meta">@DatabaseSetup</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITTodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//Add web application context here</span></div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="comment">//Add setUp() method here</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@ExpectedDatabase</span>(<span class="string">"toDoData-delete-expected.xml"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        mockMvc.perform(delete(<span class="string">"/api/todo/&#123;id&#125;"</span>, <span class="number">1L</span>))</div><div class="line">                .andExpect(status().isOk())</div><div class="line">                .andExpect(content().contentType(TestUtil.APPLICATION_JSON_UTF8))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$.id"</span>, is(<span class="number">1</span>)))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$.description"</span>, is(<span class="string">"Lorem ipsum"</span>)))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$.title"</span>, is(<span class="string">"Foo"</span>)));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>作为对照，<code>todoData-delete-expected.xml</code>文件包含了预期的数据库表结果，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dataset</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">todos</span> <span class="attr">id</span>=<span class="string">"2"</span> <span class="attr">creation_time</span>=<span class="string">"2012-10-21 11:13:28"</span> <span class="attr">description</span>=<span class="string">"Lorem ipsum"</span> <span class="attr">modification_time</span>=<span class="string">"2012-10-21 11:13:28"</span> <span class="attr">title</span>=<span class="string">"Bar"</span> <span class="attr">version</span>=<span class="string">"0"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dataset</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="指定的Todo项不存在-1"><a href="#指定的Todo项不存在-1" class="headerlink" title="指定的Todo项不存在"></a>指定的Todo项不存在</h3><p>添加测试用例的思路如下：</p><ol><li>使用@ExpectedDatabase注解来验证接口没有对数据库表状态产生变化</li><li>模拟执行”/api/todo/3”的DELETE请求，并取得返回的响应结果</li><li>对返回的响应结果作断言：HTTP状态码为404</li></ol><p>最终代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.DbUnitTestExecutionListener;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.DatabaseSetup;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.ExpectedDatabase;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.TestExecutionListeners;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DirtiesContextTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.transaction.TransactionalTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.samples.context.WebContextLoader;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.request.MockMvcRequestBuilders.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.status;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(loader = WebContextLoader.class, classes = &#123;ExampleApplicationContext.class&#125;)</div><div class="line"><span class="meta">@TestExecutionListeners</span>(&#123;DependencyInjectionTestExecutionListener.class,</div><div class="line">        DirtiesContextTestExecutionListener.class,</div><div class="line">        TransactionalTestExecutionListener.class,</div><div class="line">        DbUnitTestExecutionListener.class&#125;)</div><div class="line"><span class="meta">@DatabaseSetup</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITTodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//Add web application context here</span></div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="comment">//Add setUp() method here</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@ExpectedDatabase</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByIdWhenTodoIsNotFound</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        mockMvc.perform(delete(<span class="string">"/api/todo/&#123;id&#125;"</span>, <span class="number">3L</span>))</div><div class="line">                .andExpect(status().isNotFound());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="POST-添加Todo项"><a href="#POST-添加Todo项" class="headerlink" title="POST 添加Todo项"></a>POST 添加Todo项</h2><p>根据参数的不同，添加指定Todo项接口会有不同的返回结果：</p><ul><li>Todo项为空，添加失败，返回错误提示</li><li>Todo项的title/description字段值长度不合法，添加失败，返回错误提示</li><li>Todo项各个字段都合法，添加成功，返回该项</li></ul><p>下面来分别编写测试用例。</p><h3 id="指定的Todo项字段为空"><a href="#指定的Todo项字段为空" class="headerlink" title="指定的Todo项字段为空"></a>指定的Todo项字段为空</h3><p>添加测试用例的思路如下：</p><ol><li>使用@ExpectedDatabase注解来验证接口没有对数据库表状态产生变化</li><li>模拟执行”/api/todo”的POST请求，并取得返回的响应结果</li><li>对返回的响应结果作断言：HTTP状态码为400</li><li>对返回的响应结果作断言：Content-type的值是”application/json”，并且字符集是”UTF-8”</li><li>对返回的响应结果作断言：返回了预期的错误说明</li></ol><p>最终代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.DbUnitTestExecutionListener;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.DatabaseSetup;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.ExpectedDatabase;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.TestExecutionListeners;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DirtiesContextTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.transaction.TransactionalTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.samples.context.WebContextLoader;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.request.MockMvcRequestBuilders.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.content;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.status;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(loader = WebContextLoader.class, classes = &#123;ExampleApplicationContext.class&#125;)</div><div class="line"><span class="meta">@TestExecutionListeners</span>(&#123;DependencyInjectionTestExecutionListener.class,</div><div class="line">        DirtiesContextTestExecutionListener.class,</div><div class="line">        TransactionalTestExecutionListener.class,</div><div class="line">        DbUnitTestExecutionListener.class&#125;)</div><div class="line"><span class="meta">@DatabaseSetup</span>(toDoData.xml)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITTodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//Add web application context here</span></div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="comment">//Add setUp() method here</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@ExpectedDatabase</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEmptyTodo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        TodoDTO added = TodoTestUtil.createDTO(<span class="keyword">null</span>, <span class="string">""</span>, <span class="string">""</span>);</div><div class="line">        mockMvc.perform(post(/api/todo)</div><div class="line">                .contentType(IntegrationTestUtil.APPLICATION_JSON_UTF8)</div><div class="line">                .body(IntegrationTestUtil.convertObjectToJsonBytes(added))</div><div class="line">        )</div><div class="line">                .andExpect(status().isBadRequest())</div><div class="line">                .andExpect(content().contentType(TestUtil.APPLICATION_JSON_UTF8))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$.fieldErrors[0]"</span>, is(<span class="string">"title"</span>)));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="指定的Todo项包含不合法字段"><a href="#指定的Todo项包含不合法字段" class="headerlink" title="指定的Todo项包含不合法字段"></a>指定的Todo项包含不合法字段</h3><p>添加测试用例的思路如下：</p><ol><li>使用@ExpectedDatabase注解来验证接口没有对数据库表状态产生变化</li><li>模拟执行”/api/todo”的POST请求，并取得返回的响应结果</li><li>对返回的响应结果作断言：HTTP状态码为400</li><li>对返回的响应结果作断言：Content-type的值是”application/json”，并且字符集是”UTF-8”</li><li>对返回的响应结果作断言：返回了预期的错误说明</li></ol><p>最终代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.DbUnitTestExecutionListener;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.DatabaseSetup;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.ExpectedDatabase;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.TestExecutionListeners;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DirtiesContextTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.transaction.TransactionalTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.samples.context.WebContextLoader;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.request.MockMvcRequestBuilders.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.content;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.status;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(loader = WebContextLoader.class, classes = &#123;ExampleApplicationContext.class&#125;)</div><div class="line"><span class="meta">@TestExecutionListeners</span>(&#123;DependencyInjectionTestExecutionListener.class,</div><div class="line">        DirtiesContextTestExecutionListener.class,</div><div class="line">        TransactionalTestExecutionListener.class,</div><div class="line">        DbUnitTestExecutionListener.class&#125;)</div><div class="line"><span class="meta">@DatabaseSetup</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITTodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//Add web application context here</span></div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="comment">//Add setUp() method here</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@ExpectedDatabase</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTodoWhenTitleAndDescriptionAreTooLong</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        String title = TodoTestUtil.createStringWithLength(<span class="number">101</span>);</div><div class="line">        String description = TodoTestUtil.createStringWithLength(<span class="number">501</span>);</div><div class="line">        TodoDTO added = TodoTestUtil.createDTO(<span class="keyword">null</span>, description, title);</div><div class="line"> </div><div class="line">        mockMvc.perform(post(<span class="string">"/api/todo"</span>)</div><div class="line">                .contentType(IntegrationTestUtil.APPLICATION_JSON_UTF8)</div><div class="line">                .body(IntegrationTestUtil.convertObjectToJsonBytes(added))</div><div class="line">        )</div><div class="line">                .andExpect(status().isBadRequest())</div><div class="line">                .andExpect(content().contentType(TestUtil.APPLICATION_JSON_UTF8))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$.fieldErrors"</span>, hasSize(<span class="number">2</span>)))</div><div class="line">                .andExpect(</div><div class="line">                    jsonPath(</div><div class="line">                        <span class="string">"$.fieldErrors[*].path"</span>, containsInAnyOrder(<span class="string">"title"</span>, <span class="string">"description"</span>)</div><div class="line">                    )</div><div class="line">                )</div><div class="line">                .andExpect(jsonPath(<span class="string">"$.fieldErrors[*].message"</span>, containsInAnyOrder(</div><div class="line">                        <span class="string">"The maximum length of the description is 500 characters."</span>,</div><div class="line">                        <span class="string">"The maximum length of the title is 100 characters."</span></div><div class="line">                )));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="添加Todo项成功"><a href="#添加Todo项成功" class="headerlink" title="添加Todo项成功"></a>添加Todo项成功</h3><p>添加测试用例的思路如下：</p><ol><li>使用@ExpectedDatabase注解来验证接口往数据库中写入了一条记录</li><li>模拟执行”/api/todo”的POST请求，并取得返回的响应结果</li><li>对返回的响应结果作断言：HTTP状态码为200</li><li>对返回的响应结果作断言：Content-type的值是”application/json”，并且字符集是”UTF-8”</li><li>对返回的响应结果作断言：返回的结果符合预期</li></ol><p>最终代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.DbUnitTestExecutionListener;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.DatabaseSetup;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.ExpectedDatabase;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.assertion.DatabaseAssertionMode;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.TestExecutionListeners;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DirtiesContextTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.transaction.TransactionalTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.samples.context.WebContextLoader;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.request.MockMvcRequestBuilders.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.content;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.status;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(loader = WebContextLoader.class, classes = &#123;ExampleApplicationContext.class&#125;)</div><div class="line"><span class="meta">@TestExecutionListeners</span>(&#123;DependencyInjectionTestExecutionListener.class,</div><div class="line">        DirtiesContextTestExecutionListener.class,</div><div class="line">        TransactionalTestExecutionListener.class,</div><div class="line">        DbUnitTestExecutionListener.class&#125;)</div><div class="line"><span class="meta">@DatabaseSetup</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITTodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//Add web application context here</span></div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="comment">//Add setUp() method here</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@ExpectedDatabase</span>(value=<span class="string">"toDoData-add-expected.xml"</span>, assertionMode = DatabaseAssertionMode.NON_STRICT)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        TodoDTO added = TodoTestUtil.createDTO(<span class="keyword">null</span>, <span class="string">"description"</span>, <span class="string">"title"</span>);</div><div class="line">        mockMvc.perform(post(<span class="string">"/api/todo"</span>)</div><div class="line">                .contentType(IntegrationTestUtil.APPLICATION_JSON_UTF8)</div><div class="line">                .body(IntegrationTestUtil.convertObjectToJsonBytes(added))</div><div class="line">        )</div><div class="line">                .andExpect(status().isOk())</div><div class="line">                .andExpect(content().contentType(TestUtil.APPLICATION_JSON_UTF8))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$.id"</span>, is(<span class="number">3</span>)))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$.description"</span>, is(<span class="string">"description"</span>)))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$.title"</span>, is(<span class="string">"title"</span>)));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用到的<code>toDoData-add-expected.xml</code>文件的内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dataset</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">todos</span> <span class="attr">id</span>=<span class="string">"1"</span> <span class="attr">description</span>=<span class="string">"Lorem ipsum"</span> <span class="attr">title</span>=<span class="string">"Foo"</span> <span class="attr">version</span>=<span class="string">"0"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">todos</span> <span class="attr">id</span>=<span class="string">"2"</span> <span class="attr">description</span>=<span class="string">"Lorem ipsum"</span> <span class="attr">title</span>=<span class="string">"Bar"</span> <span class="attr">version</span>=<span class="string">"0"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">todos</span> <span class="attr">id</span>=<span class="string">"3"</span> <span class="attr">description</span>=<span class="string">"description"</span> <span class="attr">title</span>=<span class="string">"title"</span> <span class="attr">version</span>=<span class="string">"0"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dataset</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="PUT-修改Todo项"><a href="#PUT-修改Todo项" class="headerlink" title="PUT 修改Todo项"></a>PUT 修改Todo项</h2><p>根据参数的不同，添加指定Todo项接口会有不同的返回结果：</p><ul><li>指定的Todo项为空，修改失败，返回错误信息</li><li>指定的Todo项参数不合法，修改失败，返回错误信息</li><li>指定的Todo项被正确修改，返回修改后的结果</li><li>指定的Todo项不存在，修改失败</li></ul><p>下面来分别编写测试用例。</p><h3 id="指定的Todo项字段为空-1"><a href="#指定的Todo项字段为空-1" class="headerlink" title="指定的Todo项字段为空"></a>指定的Todo项字段为空</h3><p>添加测试用例的思路如下：</p><ol><li>使用@ExpectedDatabase注解来验证接口没有对数据库表状态产生变化</li><li>模拟执行”/api/todo/1”的PUT请求，并取得返回的响应结果</li><li>对返回的响应结果作断言：HTTP状态码为400</li><li>对返回的响应结果作断言：Content-type的值是”application/json”，并且字符集是”UTF-8”</li><li>对返回的响应结果作断言：返回了预期的错误说明</li></ol><p>最终代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.DbUnitTestExecutionListener;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.DatabaseSetup;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.ExpectedDatabase;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.assertion.DatabaseAssertionMode;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.TestExecutionListeners;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DirtiesContextTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.transaction.TransactionalTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.samples.context.WebContextLoader;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.request.MockMvcRequestBuilders.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.content;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.status;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(loader = WebContextLoader.class, classes = &#123;ExampleApplicationContext.class&#125;)</div><div class="line"><span class="meta">@TestExecutionListeners</span>(&#123;DependencyInjectionTestExecutionListener.class,</div><div class="line">        DirtiesContextTestExecutionListener.class,</div><div class="line">        TransactionalTestExecutionListener.class,</div><div class="line">        DbUnitTestExecutionListener.class&#125;)</div><div class="line"><span class="meta">@DatabaseSetup</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITTodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//Add web application context here</span></div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="comment">//Add setUp() method here</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@ExpectedDatabase</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateEmptyTodo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        TodoDTO updated = TodoTestUtil.createDTO(<span class="number">1L</span>, <span class="string">""</span>, <span class="string">""</span>);</div><div class="line"> </div><div class="line">        mockMvc.perform(put(<span class="string">"/api/todo/&#123;id&#125;"</span>, <span class="number">1L</span>)</div><div class="line">                .contentType(IntegrationTestUtil.APPLICATION_JSON_UTF8)</div><div class="line">                .body(IntegrationTestUtil.convertObjectToJsonBytes(updated))</div><div class="line">        )</div><div class="line">                .andExpect(status().isBadRequest())</div><div class="line">                .andExpect(content().mimeType(IntegrationTestUtil.APPLICATION_JSON_UTF8))</div><div class="line">                .andExpect(content().string(<span class="string">"&#123;\"fieldErrors\":[&#123;\"path\":\"title\",\"message\":\"The title cannot be empty.\"&#125;]&#125;"</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="指定的Todo项包含不合法字段-1"><a href="#指定的Todo项包含不合法字段-1" class="headerlink" title="指定的Todo项包含不合法字段"></a>指定的Todo项包含不合法字段</h3><p>添加测试用例的思路如下：</p><ol><li>使用@ExpectedDatabase注解来验证接口没有对数据库表状态产生变化</li><li>模拟执行”/api/todo/1”的PUT请求，并取得返回的响应结果</li><li>对返回的响应结果作断言：HTTP状态码为400</li><li>对返回的响应结果作断言：Content-type的值是”application/json”，并且字符集是”UTF-8”</li><li>对返回的响应结果作断言：返回了预期的错误说明</li></ol><p>最终代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.DbUnitTestExecutionListener;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.DatabaseSetup;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.ExpectedDatabase;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.assertion.DatabaseAssertionMode;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.TestExecutionListeners;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DirtiesContextTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.transaction.TransactionalTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.samples.context.WebContextLoader;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.request.MockMvcRequestBuilders.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.content;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.status;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(loader = WebContextLoader.class, classes = &#123;ExampleApplicationContext.class&#125;)</div><div class="line"><span class="meta">@TestExecutionListeners</span>(&#123;DependencyInjectionTestExecutionListener.class,</div><div class="line">        DirtiesContextTestExecutionListener.class,</div><div class="line">        TransactionalTestExecutionListener.class,</div><div class="line">        DbUnitTestExecutionListener.class&#125;)</div><div class="line"><span class="meta">@DatabaseSetup</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITTodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//Add web application context here</span></div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="comment">//Add setUp() method here</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@ExpectedDatabase</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateTodoWhenTitleAndDescriptionAreTooLong</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        String title = TodoTestUtil.createStringWithLength(<span class="number">101</span>);</div><div class="line">        String description = TodoTestUtil.createStringWithLength(<span class="number">501</span>);</div><div class="line"> </div><div class="line">        TodoDTO updated = TodoTestUtil.createDTO(<span class="number">1L</span>, description, title);</div><div class="line"> </div><div class="line">        mockMvc.perform(put(<span class="string">"/api/todo/&#123;id&#125;"</span>, <span class="number">1L</span>)</div><div class="line">                .contentType(IntegrationTestUtil.APPLICATION_JSON_UTF8)</div><div class="line">                .body(IntegrationTestUtil.convertObjectToJsonBytes(updated))</div><div class="line">        )</div><div class="line">                .andExpect(status().isBadRequest())</div><div class="line">                .andExpect(content().mimeType(IntegrationTestUtil.APPLICATION_JSON_UTF8))</div><div class="line">                .andExpect(content().string(startsWith(<span class="string">"&#123;\"fieldErrors\":["</span>)))</div><div class="line">                .andExpect(content().string(allOf(</div><div class="line">                        containsString(<span class="string">"&#123;\"path\":\"description\",\"message\":\"The maximum length of the description is 500 characters.\"&#125;"</span>),</div><div class="line">                        containsString(<span class="string">"&#123;\"path\":\"title\",\"message\":\"The maximum length of the title is 100 characters.\"&#125;"</span>)</div><div class="line">                )))</div><div class="line">                .andExpect(content().string(endsWith(<span class="string">"]&#125;"</span>)));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="指定的Todo项不存在-2"><a href="#指定的Todo项不存在-2" class="headerlink" title="指定的Todo项不存在"></a>指定的Todo项不存在</h3><p>添加测试用例的思路如下：</p><ol><li>使用@ExpectedDatabase注解来验证接口没有对数据库表状态产生变化</li><li>模拟执行”/api/todo/3”的PUT请求，并取得返回的响应结果</li><li>对返回的响应结果作断言：HTTP状态码为404</li></ol><p>最终代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.DbUnitTestExecutionListener;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.DatabaseSetup;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.ExpectedDatabase;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.TestExecutionListeners;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DirtiesContextTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.transaction.TransactionalTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.samples.context.WebContextLoader;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.request.MockMvcRequestBuilders.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.status;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(loader = WebContextLoader.class, classes = &#123;ExampleApplicationContext.class&#125;)</div><div class="line"><span class="meta">@TestExecutionListeners</span>(&#123;DependencyInjectionTestExecutionListener.class,</div><div class="line">        DirtiesContextTestExecutionListener.class,</div><div class="line">        TransactionalTestExecutionListener.class,</div><div class="line">        DbUnitTestExecutionListener.class&#125;)</div><div class="line"><span class="meta">@DatabaseSetup</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITTodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//Add web application context here</span></div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="comment">//Add setUp() method here</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@ExpectedDatabase</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateTodoWhenTodoIsNotFound</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        TodoDTO updated = TodoTestUtil.createDTO(<span class="number">3L</span>, <span class="string">"description"</span>, <span class="string">"title"</span>);</div><div class="line"> </div><div class="line">        mockMvc.perform(put(<span class="string">"/api/todo/&#123;id&#125;"</span>, <span class="number">3L</span>)</div><div class="line">                .contentType(IntegrationTestUtil.APPLICATION_JSON_UTF8)</div><div class="line">                .body(IntegrationTestUtil.convertObjectToJsonBytes(updated))</div><div class="line">        )</div><div class="line">                .andExpect(status().isNotFound());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="指定的Todo项存在-2"><a href="#指定的Todo项存在-2" class="headerlink" title="指定的Todo项存在"></a>指定的Todo项存在</h3><p>添加测试用例的思路如下：</p><ol><li>使用@ExpectedDatabase注解来验证接口对数据库的修改符合预期</li><li>模拟执行”/api/todo/1”的PUT请求，并取得返回的响应结果</li><li>对返回的响应结果作断言：HTTP状态码为200</li><li>对返回的响应结果作断言：Content-type的值是”application/json”，并且字符集是”UTF-8”</li><li>对返回的响应结果作断言：返回的结果符合预期</li></ol><p>最终代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.DbUnitTestExecutionListener;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.DatabaseSetup;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.ExpectedDatabase;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.assertion.DatabaseAssertionMode;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.TestExecutionListeners;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DirtiesContextTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.transaction.TransactionalTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.samples.context.WebContextLoader;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.request.MockMvcRequestBuilders.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.content;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.status;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(loader = WebContextLoader.class, classes = &#123;ExampleApplicationContext.class&#125;)</div><div class="line"><span class="meta">@TestExecutionListeners</span>(&#123;DependencyInjectionTestExecutionListener.class,</div><div class="line">        DirtiesContextTestExecutionListener.class,</div><div class="line">        TransactionalTestExecutionListener.class,</div><div class="line">        DbUnitTestExecutionListener.class&#125;)</div><div class="line"><span class="meta">@DatabaseSetup</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITTodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//Add web application context here</span></div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="comment">//Add setUp() method here</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@ExpectedDatabase</span>(value=<span class="string">"toDoData-update-expected.xml"</span>, assertionMode = DatabaseAssertionMode.NON_STRICT)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        TodoDTO updated = TodoTestUtil.createDTO(<span class="number">1L</span>, <span class="string">"description"</span>, <span class="string">"title"</span>);</div><div class="line"> </div><div class="line">        mockMvc.perform(put(<span class="string">"/api/todo/&#123;id&#125;"</span>, <span class="number">1L</span>)</div><div class="line">                .contentType(IntegrationTestUtil.APPLICATION_JSON_UTF8)</div><div class="line">                .body(IntegrationTestUtil.convertObjectToJsonBytes(updated))</div><div class="line">        )</div><div class="line">                .andExpect(status().isOk())</div><div class="line">                .andExpect(content().mimeType(IntegrationTestUtil.APPLICATION_JSON_UTF8))</div><div class="line">                .andExpect(content().string(<span class="string">"&#123;\"id\":1,\"description\":\"description\",\"title\":\"title\"&#125;"</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>代码中使用到的<code>toDoData-update-expected.xml</code>文件内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dataset</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">todos</span> <span class="attr">id</span>=<span class="string">"1"</span> <span class="attr">description</span>=<span class="string">"description"</span> <span class="attr">title</span>=<span class="string">"title"</span> <span class="attr">version</span>=<span class="string">"1"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">todos</span> <span class="attr">id</span>=<span class="string">"2"</span> <span class="attr">description</span>=<span class="string">"Lorem ipsum"</span> <span class="attr">title</span>=<span class="string">"Bar"</span> <span class="attr">version</span>=<span class="string">"0"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dataset</span>&gt;</span></div></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文的要点如下：</p><ul><li>如何对GET接口进行集成测试</li><li>如何对POST接口进行集成测试</li><li>如何对PUT接口进行集成测试</li><li>如何对DELETE接口进行集成测试</li></ul><p>下一篇是 <a href="/2016/04/09/spring-mvc-testing-integration-testing-security/">Spring MVC Integration Testing - Security</a>。</p>]]></content>
      
        <categories>
            
            <category> Spring MVC Testing </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring MVC </tag>
            
            <tag> Test </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring MVC Integration Testing - Forms]]></title>
      <url>http://www.wbprime.me/2016/04/09/spring-mvc-testing-integration-testing-forms/</url>
      <content type="html"><![CDATA[<p>本文是 <a href="/2016/04/09/spring-mvc-testing-content/">Spring MVC Testing</a> 集成测试系列的第3篇，原文链接：<a href="http://www.petrikainulainen.net/programming/spring-framework/integration-testing-of-spring-mvc-applications-forms/" target="_blank" rel="external">Integration Testing of Spring MVC Applications: Forms</a>。</p><p>本文主要介绍为处理Form表单请求的接口编写集成测试用例。</p><p>本文紧接着上一篇 <a href="/2016/04/09/spring-mvc-testing-integration-testing-controllers/">Spring MVC Integration Testing - Controllers</a> 的内容，主要涉及到两个接口：创建新的Todo项和更新指定的Todo项。</p><h1 id="通过Maven获取依赖"><a href="#通过Maven获取依赖" class="headerlink" title="通过Maven获取依赖"></a>通过Maven获取依赖</h1><p>除了上一篇中介绍的依赖之外，本文添加了新的依赖：</p><ul><li>jackson-core-asl 1.9.9</li><li>jackson-mapper-asl 1.9.9</li></ul><p>对应的pom.xml文件片段如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.jackson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core-asl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.jackson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-mapper-asl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><h1 id="示例web应用结构"><a href="#示例web应用结构" class="headerlink" title="示例web应用结构"></a>示例web应用结构</h1><h2 id="DTO"><a href="#DTO" class="headerlink" title="DTO"></a>DTO</h2><p>本文主要处理Form表单，对应的类为<code>TodoDTO</code>。<code>TodoDTO</code>类是一个简单的Java Bean类，除了setter和getter方法外，还是用到了validator规则：</p><ul><li>title项不能为空</li><li>title项的最大长度为100</li><li>description项的最大长度为500</li></ul><p>对应的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Length;</div><div class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.NotEmpty;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoDTO</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line"> </div><div class="line">    <span class="meta">@Length</span>(max = <span class="number">500</span>)</div><div class="line">    <span class="keyword">private</span> String description;</div><div class="line"> </div><div class="line">    <span class="meta">@NotEmpty</span></div><div class="line">    <span class="meta">@Length</span>(max = <span class="number">100</span>)</div><div class="line">    <span class="keyword">private</span> String title;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TodoDTO</span><span class="params">()</span> </span>&#123;</div><div class="line"> </div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">//Getters and setters</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Service-层"><a href="#Service-层" class="headerlink" title="Service 层"></a>Service 层</h2><p>对应地，<code>TodoService</code>接口也添加了两个方法：</p><ul><li><code>Todo add(TodoDTO added)</code> 创建并返回Todo项</li><li><code>Todo update(TodoDTO updated)</code> 更新指定的Todo项；如果指定的Todo项不存在，则抛出<code>TodoNotFoundException</code>异常</li></ul><p>新增代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TodoService</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> Todo <span class="title">add</span><span class="params">(TodoDTO added)</span></span>;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> Todo <span class="title">update</span><span class="params">(TodoDTO updated)</span> <span class="keyword">throws</span> TodoNotFoundException</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Controller-层"><a href="#Controller-层" class="headerlink" title="Controller 层"></a>Controller 层</h2><p>对应地，<code>TodoController</code>类也增加了4个接口方法：</p><ul><li><code>showAddTodoForm()</code> GET 返回添加Todo项的表单页面</li><li><code>add()</code> POST 处理添加Todo项的表单请求</li><li><code>showUpdateTodoForm()</code> GET 返回修改Todo项的表单页面</li><li><code>update()</code> POST 处理修改Todo项的表单请求</li></ul><p>对应的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.context.MessageSource;</div><div class="line"><span class="keyword">import</span> org.springframework.context.i18n.LocaleContextHolder;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.ui.Model;</div><div class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.support.RedirectAttributes;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.annotation.Resource;</div><div class="line"><span class="keyword">import</span> javax.validation.Valid;</div><div class="line"> </div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@SessionAttributes</span>(<span class="string">"todo"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoController</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> TodoService service;</div><div class="line"> </div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> MessageSource messageSource;</div><div class="line"> </div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/todo/add"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showAddTodoForm</span><span class="params">(Model model)</span> </span>&#123;</div><div class="line">        TodoDTO formObject = <span class="keyword">new</span> TodoDTO();</div><div class="line">        model.addAttribute(<span class="string">"todo"</span>, formObject);</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> <span class="string">"todo/add"</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/todo/add"</span>, method = RequestMethod.POST)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(@Valid @ModelAttribute(<span class="string">"todo"</span>)</span> TodoDTO dto, BindingResult result, RedirectAttributes attributes) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (result.hasErrors()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"todo/add"</span>;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        Todo added = service.add(dto);</div><div class="line"> </div><div class="line">        addFeedbackMessage(attributes, <span class="string">"feedback.message.todo.added"</span>, added.getTitle());</div><div class="line">        attributes.addAttribute(<span class="string">"id"</span>, added.getId());</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> createRedirectViewPath(<span class="string">"/todo/&#123;id&#125;"</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/todo/update/&#123;id&#125;"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showUpdateTodoForm</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id, Model model) <span class="keyword">throws</span> TodoNotFoundException </span>&#123;</div><div class="line">        Todo updated = service.findById(id);</div><div class="line"> </div><div class="line">        TodoDTO formObject = constructFormObjectForUpdateForm(updated);</div><div class="line">        model.addAttribute(<span class="string">"todo"</span>, formObject);</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> <span class="string">"todo/update"</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/todo/update"</span>, method = RequestMethod.POST)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(@Valid @ModelAttribute(<span class="string">"todo"</span>)</span> TodoDTO dto, BindingResult result, RedirectAttributes attributes) <span class="keyword">throws</span> TodoNotFoundException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (result.hasErrors()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"todo/update"</span>;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        Todo updated = service.update(dto);</div><div class="line"> </div><div class="line">        addFeedbackMessage(attributes, <span class="string">"feedback.message.todo.updated"</span>, updated.getTitle());</div><div class="line">        attributes.addAttribute(<span class="string">"id"</span>, updated.getId());</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> createRedirectViewPath(<span class="string">"/todo/&#123;id&#125;"</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> TodoDTO <span class="title">constructFormObjectForUpdateForm</span><span class="params">(Todo updated)</span> </span>&#123;</div><div class="line">        TodoDTO dto = <span class="keyword">new</span> TodoDTO();</div><div class="line"> </div><div class="line">        dto.setId(updated.getId());</div><div class="line">        dto.setDescription(updated.getDescription());</div><div class="line">        dto.setTitle(updated.getTitle());</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> dto;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addFeedbackMessage</span><span class="params">(RedirectAttributes attributes, String messageCode, Object... messageParameters)</span> </span>&#123;</div><div class="line">        String localizedFeedbackMessage = getMessage(messageCode, messageParameters);</div><div class="line">        attributes.addFlashAttribute(<span class="string">"feedbackMessage"</span>, localizedFeedbackMessage);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getMessage</span><span class="params">(String messageCode, Object... messageParameters)</span> </span>&#123;</div><div class="line">        Locale current = LocaleContextHolder.getLocale();</div><div class="line">        <span class="keyword">return</span> messageSource.getMessage(messageCode, messageParameters, current);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">createRedirectViewPath</span><span class="params">(String requestMapping)</span> </span>&#123;</div><div class="line">        StringBuilder redirectViewPath = <span class="keyword">new</span> StringBuilder();</div><div class="line">        redirectViewPath.append(<span class="string">"redirect:"</span>);</div><div class="line">        redirectViewPath.append(requestMapping);</div><div class="line">        <span class="keyword">return</span> redirectViewPath.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="添加测试用例"><a href="#添加测试用例" class="headerlink" title="添加测试用例"></a>添加测试用例</h1><h2 id="GET-添加Todo项表单页面接口"><a href="#GET-添加Todo项表单页面接口" class="headerlink" title="GET 添加Todo项表单页面接口"></a>GET 添加Todo项表单页面接口</h2><p>添加测试用例的思路如下：</p><ol><li>使用@ExpectedDatabase注解来验证接口没有对数据库表状态产生变化</li><li>模拟执行”/todo/add”的GET请求，并取得返回的响应结果</li><li>对返回的响应结果作断言：HTTP状态码为200</li><li>对返回的响应结果作断言：view的名字是’todo/add’</li><li>对返回的响应结果作断言：view的路径为”/WEB-INF/jsp/todo/add.jsp”</li><li>对返回的响应结果作断言：model中Todo项各个字段均为空</li></ol><p>最终代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.DbUnitTestExecutionListener;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.DatabaseSetup;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.ExpectedDatabase;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.TestExecutionListeners;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DirtiesContextTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.transaction.TransactionalTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.samples.context.WebContextLoader;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.request.MockMvcRequestBuilders.get;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.*;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(loader = WebContextLoader.class, classes = &#123;ExampleApplicationContext.class&#125;)</div><div class="line"><span class="meta">@TestExecutionListeners</span>(&#123; DependencyInjectionTestExecutionListener.class,</div><div class="line">        DirtiesContextTestExecutionListener.class,</div><div class="line">        TransactionalTestExecutionListener.class,</div><div class="line">        DbUnitTestExecutionListener.class &#125;)</div><div class="line"><span class="meta">@DatabaseSetup</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITTodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//Add web application context here</span></div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="comment">//Add setUp() method here</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@ExpectedDatabase</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showAddTodoForm</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        mockMvc.perform(get(<span class="string">"/todo/add"</span>))</div><div class="line">                .andExpect(status().isOk())</div><div class="line">                .andExpect(view().name(<span class="string">"todo/add"</span>))</div><div class="line">                .andExpect(forwardedUrl(<span class="string">"/WEB-INF/jsp/todo/add.jsp"</span>))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todo"</span>, hasProperty(<span class="string">"id"</span>, nullValue())))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todo"</span>, hasProperty(<span class="string">"description"</span>, isEmptyOrNullString())))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todo"</span>, hasProperty(<span class="string">"title"</span>, isEmptyOrNullString())));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>代码中使用到的<code>todoData.xml</code>文件内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dataset</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">todos</span> <span class="attr">id</span>=<span class="string">"1"</span> <span class="attr">creation_time</span>=<span class="string">"2012-10-21 11:13:28"</span> <span class="attr">description</span>=<span class="string">"Lorem ipsum"</span> <span class="attr">modification_time</span>=<span class="string">"2012-10-21 11:13:28"</span> <span class="attr">title</span>=<span class="string">"Foo"</span> <span class="attr">version</span>=<span class="string">"0"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">todos</span> <span class="attr">id</span>=<span class="string">"2"</span> <span class="attr">creation_time</span>=<span class="string">"2012-10-21 11:13:28"</span> <span class="attr">description</span>=<span class="string">"Lorem ipsum"</span> <span class="attr">modification_time</span>=<span class="string">"2012-10-21 11:13:28"</span> <span class="attr">title</span>=<span class="string">"Bar"</span> <span class="attr">version</span>=<span class="string">"0"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dataset</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="POST-添加Todo项表单处理接口"><a href="#POST-添加Todo项表单处理接口" class="headerlink" title="POST 添加Todo项表单处理接口"></a>POST 添加Todo项表单处理接口</h2><p>处理一个添加Todo项的表单请求，可能会有3种处理结果：</p><ul><li>表单提交的Todo项为空，添加失败，返回错误提示</li><li>表单提交的Todo项的title/description字段值长度不合法，添加失败，返回错误提示</li><li>表单提交的Todo项各个字段合法，添加成功</li></ul><p>下面来分别编写测试用例。</p><h3 id="提交空表单"><a href="#提交空表单" class="headerlink" title="提交空表单"></a>提交空表单</h3><p>添加测试用例的思路如下：</p><ol><li>使用@ExpectedDatabase注解来验证接口没有对数据库表状态产生变化</li><li>模拟执行”/todo/add”的POST请求，并取得返回的响应结果：Content-type 设置为”application/x-www-form-urlencoded”</li><li>对返回的响应结果作断言：HTTP状态码为200</li><li>对返回的响应结果作断言：view的名字是’todo/add’</li><li>对返回的响应结果作断言：view的路径为”/WEB-INF/jsp/todo/add.jsp”</li><li>对返回的响应结果作断言：model中存在预期的错误提示信息</li></ol><p>最终代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.DbUnitTestExecutionListener;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.DatabaseSetup;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.ExpectedDatabase;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.TestExecutionListeners;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DirtiesContextTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.transaction.TransactionalTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.samples.context.WebContextLoader;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.request.MockMvcRequestBuilders.post;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.*;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(loader = WebContextLoader.class, classes = &#123;ExampleApplicationContext.class&#125;)</div><div class="line"><span class="meta">@TestExecutionListeners</span>(&#123; DependencyInjectionTestExecutionListener.class,</div><div class="line">        DirtiesContextTestExecutionListener.class,</div><div class="line">        TransactionalTestExecutionListener.class,</div><div class="line">        DbUnitTestExecutionListener.class &#125;)</div><div class="line"><span class="meta">@DatabaseSetup</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITTodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//Add web application context here</span></div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="comment">//Add setUp() method here</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@ExpectedDatabase</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEmptyTodo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        mockMvc.perform(post(<span class="string">"/todo/add"</span>)</div><div class="line">                .contentType(MediaType.APPLICATION_FORM_URLENCODED)</div><div class="line">                .sessionAttr(<span class="string">"todo"</span>, <span class="keyword">new</span> TodoDTO())</div><div class="line">        )</div><div class="line">                .andExpect(status().isOk())</div><div class="line">                .andExpect(view().name(<span class="string">"todo/add"</span>))</div><div class="line">                .andExpect(forwardedUrl(<span class="string">"/WEB-INF/jsp/todo/add.jsp"</span>))</div><div class="line">                .andExpect(model().attributeHasFieldErrors(<span class="string">"todo"</span>, <span class="string">"title"</span>))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todo"</span>, hasProperty(<span class="string">"id"</span>, nullValue())))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todo"</span>, hasProperty(<span class="string">"description"</span>, isEmptyOrNullString())))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todo"</span>, hasProperty(<span class="string">"title"</span>, isEmptyOrNullString())));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="表单验证失败"><a href="#表单验证失败" class="headerlink" title="表单验证失败"></a>表单验证失败</h3><p>添加测试用例的思路如下：</p><ol><li>使用@ExpectedDatabase注解来验证接口没有对数据库表状态产生变化</li><li>模拟执行”/todo/add”的POST请求，并取得返回的响应结果：Content-type 设置为”application/x-www-form-urlencoded”</li><li>对返回的响应结果作断言：HTTP状态码为200</li><li>对返回的响应结果作断言：view的名字是’todo/add’</li><li>对返回的响应结果作断言：view的路径为”/WEB-INF/jsp/todo/add.jsp”</li><li>对返回的响应结果作断言：model中存在预期的错误提示信息</li></ol><p>最终代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.DbUnitTestExecutionListener;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.DatabaseSetup;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.ExpectedDatabase;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.TestExecutionListeners;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DirtiesContextTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.transaction.TransactionalTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.samples.context.WebContextLoader;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.request.MockMvcRequestBuilders.post;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.*;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(loader = WebContextLoader.class, classes = &#123;ExampleApplicationContext.class&#125;)</div><div class="line"><span class="meta">@TestExecutionListeners</span>(&#123; DependencyInjectionTestExecutionListener.class,</div><div class="line">        DirtiesContextTestExecutionListener.class,</div><div class="line">        TransactionalTestExecutionListener.class,</div><div class="line">        DbUnitTestExecutionListener.class &#125;)</div><div class="line"><span class="meta">@DatabaseSetup</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITTodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//Add web application context here</span></div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="comment">//Add setUp() method here</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@ExpectedDatabase</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTodoWhenTitleAndDescriptionAreTooLong</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        String title = TodoTestUtil.createStringWithLength(<span class="number">101</span>);</div><div class="line">        String description = TodoTestUtil.createStringWithLength(<span class="number">501</span>);</div><div class="line"> </div><div class="line">        mockMvc.perform(post(<span class="string">"/todo/add"</span>)</div><div class="line">                .contentType(MediaType.APPLICATION_FORM_URLENCODED)</div><div class="line">                .param(<span class="string">"description"</span>, description)</div><div class="line">                .param(<span class="string">"title"</span>, title)</div><div class="line">                .sessionAttr(<span class="string">"todo"</span>, <span class="keyword">new</span> TodoDTO())</div><div class="line">        )</div><div class="line">                .andExpect(status().isOk())</div><div class="line">                .andExpect(view().name(<span class="string">"todo/add"</span>))</div><div class="line">                .andExpect(forwardedUrl(<span class="string">"/WEB-INF/jsp/todo/add.jsp"</span>))</div><div class="line">                .andExpect(model().attributeHasFieldErrors(<span class="string">"todo"</span>, <span class="string">"title"</span>))</div><div class="line">                .andExpect(model().attributeHasFieldErrors(<span class="string">"todo"</span>, <span class="string">"description"</span>))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todo"</span>, hasProperty(<span class="string">"id"</span>, nullValue())))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todo"</span>, hasProperty(<span class="string">"description"</span>, is(description))))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todo"</span>, hasProperty(<span class="string">"title"</span>, is(title))));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="表单被正确处理"><a href="#表单被正确处理" class="headerlink" title="表单被正确处理"></a>表单被正确处理</h3><p>添加测试用例的思路如下：</p><ol><li>使用@ExpectedDatabase注解来验证接口往数据库中写入了一条记录</li><li>模拟执行”/todo/add”的POST请求，并取得返回的响应结果：Content-type 设置为”application/x-www-form-urlencoded”</li><li>对返回的响应结果作断言：HTTP状态码为200</li><li>对返回的响应结果作断言：view的名字是’redirect:/todo/view/{id}’</li><li>对返回的响应结果作断言：model中返回的Todo项的id值为3</li></ol><p>最终代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.DbUnitTestExecutionListener;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.DatabaseSetup;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.ExpectedDatabase;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.assertion.DatabaseAssertionMode;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.TestExecutionListeners;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DirtiesContextTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.transaction.TransactionalTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.samples.context.WebContextLoader;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.is;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.request.MockMvcRequestBuilders.post;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.*;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(loader = WebContextLoader.class, classes = &#123;ExampleApplicationContext.class&#125;)</div><div class="line"><span class="meta">@TestExecutionListeners</span>(&#123; DependencyInjectionTestExecutionListener.class,</div><div class="line">        DirtiesContextTestExecutionListener.class,</div><div class="line">        TransactionalTestExecutionListener.class,</div><div class="line">        DbUnitTestExecutionListener.class &#125;)</div><div class="line"><span class="meta">@DatabaseSetup</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITTodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//Add web application context here</span></div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="comment">//Add setUp() method here</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@ExpectedDatabase</span>(value=<span class="string">"toDoData-add-expected.xml"</span>, assertionMode = DatabaseAssertionMode.NON_STRICT)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTodo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        mockMvc.perform(post(<span class="string">"/todo/add"</span>)</div><div class="line">                .contentType(MediaType.APPLICATION_FORM_URLENCODED)</div><div class="line">                .param(<span class="string">"description"</span>, <span class="string">"description"</span>)</div><div class="line">                .param(<span class="string">"title"</span>, <span class="string">"title"</span>)</div><div class="line">                .sessionAttr(<span class="string">"todo"</span>, <span class="keyword">new</span> TodoDTO())</div><div class="line">        )</div><div class="line">                .andExpect(status().isOk())</div><div class="line">                .andExpect(view().name(<span class="string">"redirect:/todo/view/&#123;id&#125;"</span>))</div><div class="line">                .andExpect(model().attribute(<span class="string">"id"</span>, is(<span class="string">"3"</span>)))</div><div class="line">                .andExpect(flash().attribute(<span class="string">"feedbackMessage"</span>, is(<span class="string">"Todo entry: title was added."</span>)));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="GET-修改Todo项表单页面接口"><a href="#GET-修改Todo项表单页面接口" class="headerlink" title="GET 修改Todo项表单页面接口"></a>GET 修改Todo项表单页面接口</h2><p>根据参数的不同，该请求会返回不同的结果：</p><ul><li>如果指定的Todo项被找到，返回修改页面</li><li>如果指定的Todo项未找到，返回404页面</li></ul><p>下面来分别编写测试用例。</p><h3 id="指定Todo项被找到"><a href="#指定Todo项被找到" class="headerlink" title="指定Todo项被找到"></a>指定Todo项被找到</h3><p>添加测试用例的思路如下：</p><ol><li>使用@ExpectedDatabase注解来验证接口没有对数据库表状态产生变化</li><li>模拟执行”/todo/update/1”的GET请求，并取得返回的响应结果</li><li>对返回的响应结果作断言：HTTP状态码为200</li><li>对返回的响应结果作断言：view的名字是’todo/update’</li><li>对返回的响应结果作断言：view的路径为”/WEB-INF/jsp/todo/update.jsp”</li><li>对返回的响应结果作断言：model中存在预期的错误提示信息</li></ol><p>最终代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.DbUnitTestExecutionListener;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.DatabaseSetup;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.ExpectedDatabase;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.TestExecutionListeners;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DirtiesContextTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.transaction.TransactionalTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.samples.context.WebContextLoader;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.request.MockMvcRequestBuilders.get;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.*;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(loader = WebContextLoader.class, classes = &#123;ExampleApplicationContext.class&#125;)</div><div class="line"><span class="meta">@TestExecutionListeners</span>(&#123; DependencyInjectionTestExecutionListener.class,</div><div class="line">        DirtiesContextTestExecutionListener.class,</div><div class="line">        TransactionalTestExecutionListener.class,</div><div class="line">        DbUnitTestExecutionListener.class &#125;)</div><div class="line"><span class="meta">@DatabaseSetup</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITTodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//Add web application context here</span></div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="comment">//Add setUp() method here</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@ExpectedDatabase</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showUpdateTodoForm</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        mockMvc.perform(get(<span class="string">"/todo/update/&#123;id&#125;"</span>, <span class="number">1L</span>))</div><div class="line">                .andExpect(status().isOk())</div><div class="line">                .andExpect(view().name(<span class="string">"todo/update"</span>))</div><div class="line">                .andExpect(forwardedUrl(<span class="string">"/WEB-INF/jsp/todo/update.jsp"</span>))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todo"</span>, hasProperty(<span class="string">"id"</span>, is(<span class="number">1L</span>))))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todo"</span>, hasProperty(<span class="string">"description"</span>, is(<span class="string">"Lorem ipsum"</span>))))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todo"</span>, hasProperty(<span class="string">"title"</span>, is(<span class="string">"Foo"</span>))));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="指定Todo项未找到"><a href="#指定Todo项未找到" class="headerlink" title="指定Todo项未找到"></a>指定Todo项未找到</h3><p>添加测试用例的思路如下：</p><ol><li>使用@ExpectedDatabase注解来验证接口没有对数据库表状态产生变化</li><li>模拟执行”/todo/update/3”的GET请求，并取得返回的响应结果</li><li>对返回的响应结果作断言：HTTP状态码为404</li><li>对返回的响应结果作断言：view的名字是’error/404’</li><li>对返回的响应结果作断言：view的路径为”/WEB-INF/jsp/error/404.jsp”</li></ol><p>最终代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.DbUnitTestExecutionListener;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.DatabaseSetup;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.ExpectedDatabase;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.TestExecutionListeners;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DirtiesContextTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.transaction.TransactionalTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.samples.context.WebContextLoader;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.request.MockMvcRequestBuilders.get;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.*;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(loader = WebContextLoader.class, classes = &#123;ExampleApplicationContext.class&#125;)</div><div class="line"><span class="meta">@TestExecutionListeners</span>(&#123; DependencyInjectionTestExecutionListener.class,</div><div class="line">        DirtiesContextTestExecutionListener.class,</div><div class="line">        TransactionalTestExecutionListener.class,</div><div class="line">        DbUnitTestExecutionListener.class &#125;)</div><div class="line"><span class="meta">@DatabaseSetup</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITTodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//Add web application context here</span></div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="comment">//Add setUp() method here</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@ExpectedDatabase</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showUpdateTodoFormWhenTodoIsNotFound</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        mockMvc.perform(get(<span class="string">"/todo/update/&#123;id&#125;"</span>, <span class="number">3L</span>))</div><div class="line">                .andExpect(status().isNotFound())</div><div class="line">                .andExpect(view().name(<span class="string">"error/404"</span>))</div><div class="line">                .andExpect(forwardedUrl(<span class="string">"/WEB-INF/jsp/error/404.jsp"</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="POST-修改Todo项表单处理接口"><a href="#POST-修改Todo项表单处理接口" class="headerlink" title="POST 修改Todo项表单处理接口"></a>POST 修改Todo项表单处理接口</h2><p>处理一个修改Todo项的表单请求，可能会有以下4个结果：</p><ul><li>表单里的Todo项为空，修改失败，返回错误信息</li><li>表单里的Todo项参数不合法，修改失败，返回错误信息</li><li>表单里指定的Todo项被正确修改</li><li>表单里指定的Todo项不存在，修改失败</li></ul><p>下面来分别编写测试用例。</p><h3 id="提交空表单-1"><a href="#提交空表单-1" class="headerlink" title="提交空表单"></a>提交空表单</h3><p>添加测试用例的思路如下：</p><ol><li>使用@ExpectedDatabase注解来验证接口没有对数据库表状态产生变化</li><li>模拟执行”/todo/update”的POST请求，并取得返回的响应结果：Content-type 设置为”application/x-www-form-urlencoded”</li><li>对返回的响应结果作断言：HTTP状态码为200</li><li>对返回的响应结果作断言：view的名字是’todo/update’</li><li>对返回的响应结果作断言：view的路径为”/WEB-INF/jsp/todo/update.jsp”</li><li>对返回的响应结果作断言：model中存在预期的错误提示信息</li></ol><p>最终代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.DbUnitTestExecutionListener;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.DatabaseSetup;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.ExpectedDatabase;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.TestExecutionListeners;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DirtiesContextTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.transaction.TransactionalTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.samples.context.WebContextLoader;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.request.MockMvcRequestBuilders.post;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.*;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(loader = WebContextLoader.class, classes = &#123;ExampleApplicationContext.class&#125;)</div><div class="line"><span class="meta">@TestExecutionListeners</span>(&#123; DependencyInjectionTestExecutionListener.class,</div><div class="line">        DirtiesContextTestExecutionListener.class,</div><div class="line">        TransactionalTestExecutionListener.class,</div><div class="line">        DbUnitTestExecutionListener.class &#125;)</div><div class="line"><span class="meta">@DatabaseSetup</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITTodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//Add web application context here</span></div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="comment">//Add setUp() method here</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@ExpectedDatabase</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateEmptyTodo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        mockMvc.perform(post(<span class="string">"/todo/update"</span>)</div><div class="line">                .contentType(MediaType.APPLICATION_FORM_URLENCODED)</div><div class="line">                .param(<span class="string">"id"</span>, <span class="string">"1"</span>)</div><div class="line">                .sessionAttr(<span class="string">"todo"</span>, <span class="keyword">new</span> TodoDTO())</div><div class="line">        )</div><div class="line">                .andExpect(status().isOk())</div><div class="line">                .andExpect(view().name(<span class="string">"todo/update"</span>))</div><div class="line">                .andExpect(forwardedUrl(<span class="string">"/WEB-INF/jsp/todo/update.jsp"</span>))</div><div class="line">                .andExpect(model().attributeHasFieldErrors(<span class="string">"todo"</span>, <span class="string">"title"</span>))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todo"</span>, hasProperty(<span class="string">"id"</span>, is(<span class="number">1L</span>))))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todo"</span>, hasProperty(<span class="string">"description"</span>, isEmptyOrNullString())))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todo"</span>, hasProperty(<span class="string">"title"</span>, isEmptyOrNullString())));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="表单验证失败-1"><a href="#表单验证失败-1" class="headerlink" title="表单验证失败"></a>表单验证失败</h3><p>添加测试用例的思路如下：</p><ol><li>使用@ExpectedDatabase注解来验证接口没有对数据库表状态产生变化</li><li>模拟执行”/todo/update”的POST请求，并取得返回的响应结果：Content-type 设置为”application/x-www-form-urlencoded”</li><li>对返回的响应结果作断言：HTTP状态码为200</li><li>对返回的响应结果作断言：view的名字是’todo/update’</li><li>对返回的响应结果作断言：view的路径为”/WEB-INF/jsp/todo/update.jsp”</li><li>对返回的响应结果作断言：model中存在预期的错误提示信息</li></ol><p>最终代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.DbUnitTestExecutionListener;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.DatabaseSetup;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.ExpectedDatabase;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.TestExecutionListeners;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DirtiesContextTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.transaction.TransactionalTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.samples.context.WebContextLoader;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.request.MockMvcRequestBuilders.post;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.*;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(loader = WebContextLoader.class, classes = &#123;ExampleApplicationContext.class&#125;)</div><div class="line"><span class="meta">@TestExecutionListeners</span>(&#123; DependencyInjectionTestExecutionListener.class,</div><div class="line">        DirtiesContextTestExecutionListener.class,</div><div class="line">        TransactionalTestExecutionListener.class,</div><div class="line">        DbUnitTestExecutionListener.class &#125;)</div><div class="line"><span class="meta">@DatabaseSetup</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITTodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//Add web application context here</span></div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="comment">//Add setUp() method here</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@ExpectedDatabase</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateTodoWhenTitleAndDescriptionAreTooLong</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        String title = TodoTestUtil.createStringWithLength(<span class="number">101</span>);</div><div class="line">        String description = TodoTestUtil.createStringWithLength(<span class="number">501</span>);</div><div class="line"> </div><div class="line">        mockMvc.perform(post(<span class="string">"/todo/update"</span>)</div><div class="line">                .contentType(MediaType.APPLICATION_FORM_URLENCODED)</div><div class="line">                .param(<span class="string">"description"</span>, description)</div><div class="line">                .param(<span class="string">"id"</span>, <span class="string">"1"</span>)</div><div class="line">                .param(<span class="string">"title"</span>, title)</div><div class="line">                .sessionAttr(<span class="string">"todo"</span>, <span class="keyword">new</span> TodoDTO())</div><div class="line">        )</div><div class="line">                .andExpect(status().isOk())</div><div class="line">                .andExpect(view().name(<span class="string">"todo/update"</span>))</div><div class="line">                .andExpect(forwardedUrl(<span class="string">"/WEB-INF/jsp/todo/update.jsp"</span>))</div><div class="line">                .andExpect(model().attributeHasFieldErrors(<span class="string">"todo"</span>, <span class="string">"title"</span>))</div><div class="line">                .andExpect(model().attributeHasFieldErrors(<span class="string">"todo"</span>, <span class="string">"description"</span>))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todo"</span>, hasProperty(<span class="string">"id"</span>, is(<span class="number">1L</span>))))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todo"</span>, hasProperty(<span class="string">"description"</span>, is(description))))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todo"</span>, hasProperty(<span class="string">"title"</span>, is(title))));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="表单被正确处理-1"><a href="#表单被正确处理-1" class="headerlink" title="表单被正确处理"></a>表单被正确处理</h3><p>添加测试用例的思路如下：</p><ol><li>使用@ExpectedDatabase注解来验证接口修改了数据库的一条数据</li><li>模拟执行”/todo/update”的POST请求，并取得返回的响应结果：Content-type 设置为”application/x-www-form-urlencoded”</li><li>对返回的响应结果作断言：HTTP状态码为200</li><li>对返回的响应结果作断言：view的名字是’redirect:/todo/view/{id}’</li><li>对返回的响应结果作断言：model中返回的Todo项的id值为1</li></ol><p>最终代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.DbUnitTestExecutionListener;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.DatabaseSetup;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.ExpectedDatabase;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.assertion.DatabaseAssertionMode;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.TestExecutionListeners;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DirtiesContextTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.transaction.TransactionalTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.samples.context.WebContextLoader;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.is;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.request.MockMvcRequestBuilders.post;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.*;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(loader = WebContextLoader.class, classes = &#123;ExampleApplicationContext.class&#125;)</div><div class="line"><span class="meta">@TestExecutionListeners</span>(&#123; DependencyInjectionTestExecutionListener.class,</div><div class="line">        DirtiesContextTestExecutionListener.class,</div><div class="line">        TransactionalTestExecutionListener.class,</div><div class="line">        DbUnitTestExecutionListener.class &#125;)</div><div class="line"><span class="meta">@DatabaseSetup</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITTodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//Add web application context here</span></div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="comment">//Add setUp() method here</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@ExpectedDatabase</span>(value=<span class="string">"toDoData-update-expected.xml"</span>, assertionMode = DatabaseAssertionMode.NON_STRICT)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateTodo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        mockMvc.perform(post(<span class="string">"/todo/update"</span>)</div><div class="line">                .contentType(MediaType.APPLICATION_FORM_URLENCODED)</div><div class="line">                .param(<span class="string">"description"</span>, <span class="string">"description"</span>)</div><div class="line">                .param(<span class="string">"id"</span>, <span class="string">"1"</span>)</div><div class="line">                .param(<span class="string">"title"</span>, <span class="string">"title"</span>)</div><div class="line">                .sessionAttr(<span class="string">"todo"</span>, <span class="keyword">new</span> TodoDTO())</div><div class="line">        )</div><div class="line">                .andExpect(status().isOk())</div><div class="line">                .andExpect(view().name(<span class="string">"redirect:/todo/view/&#123;id&#125;"</span>))</div><div class="line">                .andExpect(model().attribute(<span class="string">"id"</span>, is(<span class="string">"1"</span>)))</div><div class="line">                .andExpect(flash().attribute(<span class="string">"feedbackMessage"</span>, is(<span class="string">"Todo entry: title was updated."</span>)));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>进行数据库验证的<code>toDoData-update-expected.xml</code>文件的内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dataset</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">todos</span> <span class="attr">id</span>=<span class="string">"1"</span> <span class="attr">description</span>=<span class="string">"description"</span> <span class="attr">title</span>=<span class="string">"title"</span> <span class="attr">version</span>=<span class="string">"1"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">todos</span> <span class="attr">id</span>=<span class="string">"2"</span> <span class="attr">description</span>=<span class="string">"Lorem ipsum"</span> <span class="attr">title</span>=<span class="string">"Bar"</span> <span class="attr">version</span>=<span class="string">"0"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dataset</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="指定Todo项未找到-1"><a href="#指定Todo项未找到-1" class="headerlink" title="指定Todo项未找到"></a>指定Todo项未找到</h3><p>添加测试用例的思路如下：</p><ol><li>使用@ExpectedDatabase注解来验证接口没有对数据库表状态产生变化</li><li>模拟执行”/todo/update”的POST请求，并取得返回的响应结果：Content-type 设置为”application/x-www-form-urlencoded”</li><li>对返回的响应结果作断言：HTTP状态码为404</li><li>对返回的响应结果作断言：view的名字是’error/404’</li><li>对返回的响应结果作断言：view的路径为”/WEB-INF/jsp/error/404.jsp”</li></ol><p>最终代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.DbUnitTestExecutionListener;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.DatabaseSetup;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.ExpectedDatabase;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.TestExecutionListeners;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DirtiesContextTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.transaction.TransactionalTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.samples.context.WebContextLoader;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.request.MockMvcRequestBuilders.post;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.*;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(loader = WebContextLoader.class, classes = &#123;ExampleApplicationContext.class&#125;)</div><div class="line"><span class="meta">@TestExecutionListeners</span>(&#123; DependencyInjectionTestExecutionListener.class,</div><div class="line">        DirtiesContextTestExecutionListener.class,</div><div class="line">        TransactionalTestExecutionListener.class,</div><div class="line">        DbUnitTestExecutionListener.class &#125;)</div><div class="line"><span class="meta">@DatabaseSetup</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITTodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//Add web application context here</span></div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="comment">//Add setUp() method here</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@ExpectedDatabase</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateTodoWhenTodoIsNotFound</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        mockMvc.perform(post(<span class="string">"/todo/update"</span>)</div><div class="line">                .contentType(MediaType.APPLICATION_FORM_URLENCODED)</div><div class="line">                .param(<span class="string">"description"</span>, <span class="string">"description"</span>)</div><div class="line">                .param(<span class="string">"id"</span>, <span class="string">"3"</span>)</div><div class="line">                .param(<span class="string">"title"</span>, <span class="string">"title"</span>)</div><div class="line">                .sessionAttr(<span class="string">"todo"</span>, <span class="keyword">new</span> TodoDTO())</div><div class="line">        )</div><div class="line">                .andExpect(status().isNotFound())</div><div class="line">                .andExpect(view().name(<span class="string">"error/404"</span>))</div><div class="line">                .andExpect(forwardedUrl(<span class="string">"/WEB-INF/jsp/error/404.jsp"</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文主要介绍了如何编写集成测试用例测试表单处理接口，要点如下：</p><ul><li>如何指定请求的content type</li><li>如何模拟表单请求</li><li>如何在Session中添加数据</li><li>如何检测响应数据中包含了错误提示信息</li></ul><p>下一篇是 <a href="/2016/04/09/spring-mvc-testing-integration-testing-rest-api/">Spring MVC Integration Testing - REST API</a>。</p>]]></content>
      
        <categories>
            
            <category> Spring MVC Testing </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring MVC </tag>
            
            <tag> Test </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring MVC Integration Testing - Controllers]]></title>
      <url>http://www.wbprime.me/2016/04/09/spring-mvc-testing-integration-testing-controllers/</url>
      <content type="html"><![CDATA[<p>本文是<a href="/2016/04/09/spring-mvc-testing-content/">Spring MVC Testing</a> 集成测试系列的第2篇，原文链接：<a href="http://www.petrikainulainen.net/programming/spring-framework/integration-testing-of-spring-mvc-applications-controllers/" target="_blank" rel="external">Integration Testing of Spring MVC Applications: Controllers</a>。</p><p>本文主要介绍如何为“标准”Controller编写集成测试。在这里“标准”的含义延续前一个序列 <a href="/2016/04/09/spring-mvc-testing-content/">Spring MVC Testing</a> 中的含义，表示不使用Ajax的请求或者处理Form结果的请求。</p><p>同样地，本文还是一步一步地为我们的TodoApplication编写集成测试。该程序提供Todo项的增删改查（CRUD）接口，本文主要关注其中的3个接口：获取Todo项列表；查看单个Todo项的详情；以及删除某个Todo项。</p><h1 id="通过Maven获取依赖"><a href="#通过Maven获取依赖" class="headerlink" title="通过Maven获取依赖"></a>通过Maven获取依赖</h1><p>本文用到的依赖如下：</p><ul><li>Hamcrest 1.3</li><li>JUnit 4.10</li><li>Spring Test 3.2.3.RELEASE</li><li>Spring Test DBUnit 1.0.0</li><li>DBUnit 2.4.8</li></ul><p>生成的pom.xml文件的片段如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hamcrest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hamcrest-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hamcrest-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hamcrest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.springtestdbunit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test-dbunit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.dbunit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dbunit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>            </div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><h1 id="Spring-Test-DBUnit-快速入门"><a href="#Spring-Test-DBUnit-快速入门" class="headerlink" title="Spring Test DBUnit 快速入门"></a>Spring Test DBUnit 快速入门</h1><p>我们在集成测试中使用了 <a href="http://springtestdbunit.github.com/spring-test-dbunit/" target="_blank" rel="external">Spring Test DBUnit</a> 库和 <a href="http://www.dbunit.org/" target="_blank" rel="external">DBUnit</a> 库。我们快速地熟悉一下如何使用它们。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="创建Spring上下文配置"><a href="#创建Spring上下文配置" class="headerlink" title="创建Spring上下文配置"></a>创建Spring上下文配置</h3><p>首先需要创建Spring上下文配置，让Spring来管理依赖。</p><ol><li>创建一个Java类，并用<code>@Configuration</code>注解</li><li>新建<code>application.properties</code>属性文件，并使用<code>@PropertySource</code>注解导入类配置上下文中</li><li>添加一个<code>Environment</code>类型的成员用于获取属性文件中的配置信息</li><li>使用<code>@Bean</code>注解创建一个<code>DataSource</code>类型的Bean</li></ol><p>最终的结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.jolbox.bonecp.BoneCPDataSource;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</div><div class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.annotation.Resource;</div><div class="line"><span class="keyword">import</span> javax.sql.DataSource;</div><div class="line"> </div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:application.properties"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleApplicationContext</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> Environment environment;</div><div class="line"> </div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        BoneCPDataSource dataSource = <span class="keyword">new</span> BoneCPDataSource();</div><div class="line"> </div><div class="line">        dataSource.setDriverClass(environment.getRequiredProperty(<span class="string">"db.driver"</span>));</div><div class="line">        dataSource.setJdbcUrl(environment.getRequiredProperty(<span class="string">"db.url"</span>));</div><div class="line">        dataSource.setUsername(environment.getRequiredProperty(<span class="string">"db.username"</span>));</div><div class="line">        dataSource.setPassword(environment.getRequiredProperty(<span class="string">"db.password"</span>));</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> dataSource;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="配置测试用例类"><a href="#配置测试用例类" class="headerlink" title="配置测试用例类"></a>配置测试用例类</h3><p>我们可以通过如下步骤在测试用例类中使用DBUnit：</p><ol><li>对测试用例类使用<code>@RunWith(SpringJUnit4ClassRunner.class)</code>注解</li><li>对测试用例类使用<code>@ContextConfiguratiON</code>注解并引入上一步创建的<code>ExampleApplicationContext</code>类作为Spring配置上下文</li><li>对测试用例类使用<code>@TestExecutionListeners</code>注解并使用<code>DbUnitTestExecutionListener</code>来处理DBUnit的相关注解</li></ol><p>最终代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.DbUnitTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.TestExecutionListeners;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DirtiesContextTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.transaction.TransactionalTestExecutionListener;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.annotation.Resource;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(classes = &#123;ExampleApplicationContext.class&#125;)</div><div class="line"><span class="meta">@TestExecutionListeners</span>(&#123; DependencyInjectionTestExecutionListener.class,</div><div class="line">        DirtiesContextTestExecutionListener.class,</div><div class="line">        TransactionalTestExecutionListener.class,</div><div class="line">        DbUnitTestExecutionListener.class &#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="comment">//Add test methods here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用DBUnit，我们可以用注解来初始化数据库、初始化数据表以及在测试结束后验证数据库的状态。详细使用请参见 <a href="http://springtestdbunit.github.com/spring-test-dbunit/" target="_blank" rel="external">Spring Test DBUnit</a>。本文将会使用如下两个注解：</p><ul><li>@DatabaseSetup 用于在测试开始之前将数据库初始化到指定状态</li><li>@ExpectedDatabase 用于在测试结束之后验证数据库状态</li></ul><h1 id="Spring-MVC-Test-快速入门"><a href="#Spring-MVC-Test-快速入门" class="headerlink" title="Spring MVC Test 快速入门"></a>Spring MVC Test 快速入门</h1><h2 id="创建并执行请求"><a href="#创建并执行请求" class="headerlink" title="创建并执行请求"></a>创建并执行请求</h2><p><code>MockMvc</code>类的<code>perform(RequestBuilder requestBuilder)</code>方法可以用来模拟执行HTTP请求。<code>MockMvcRequestBuilders</code>类提供了几个静态方法用来模拟HTTP请求实体，具体是：</p><ul><li><code>get()</code> 用于创建一个模拟的HTTP GET请求实体</li><li><code>delete()</code> 用于创建一个模拟的HTTP DELETE请求实体</li><li><code>fileUpload()</code> 用于创建一个模拟的HTTP文件上传请求实体（multipart request）</li><li><code>post()</code> 用于创建一个模拟的HTTP POST请求实体</li><li><code>put()</code> 用于创建一个模拟的HTTP PUT请求实体</li></ul><p>详情可以查看<code>MockHttpServletRequestBuilder</code>类的说明文档。</p><h2 id="验证请求返回结果"><a href="#验证请求返回结果" class="headerlink" title="验证请求返回结果"></a>验证请求返回结果</h2><p><code>ResultActions</code>类提供了3个方法来提供对模拟的HTTP请求返回结果的处理：</p><ul><li><code>void andExpect(ResultMatcher matcher)</code> 用于对返回结果作断言验证</li><li><code>void andDo(ResultHandler handler)</code> 用于对返回结果进行二次操作</li><li><code>MvcResult andReturn()</code> 用于直接返回结果</li></ul><p>为了提高代码效率，<code>MockMvcResultMatchers</code>类和<code>MockMvcResultHandlers</code>类提供了许多静态方法：</p><ul><li><code>MockMvcResultMatchers</code>类提供了很多包装好的<code>Matcher</code>实例</li><li><code>MockMvcResultHandlers</code>类目前只提供了<code>print()</code>方法返回一个<code>Handler</code>实例可以输出返回结果到控制台</li></ul><h1 id="示例web应用结构"><a href="#示例web应用结构" class="headerlink" title="示例web应用结构"></a>示例web应用结构</h1><h2 id="Domain-层"><a href="#Domain-层" class="headerlink" title="Domain 层"></a>Domain 层</h2><p>Domain层提供了<code>Todo</code>实体类，表示一个一个的Todo项。</p><p><code>Todo</code>类代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.hibernate.annotations.Type;</div><div class="line"><span class="keyword">import</span> org.joda.time.DateTime;</div><div class="line"><span class="keyword">import</span> javax.persistence.*;</div><div class="line"> </div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name=<span class="string">"todos"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Todo</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.AUTO)</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line"> </div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"creation_time"</span>, nullable = <span class="keyword">false</span>)</div><div class="line">    <span class="meta">@Type</span>(type=<span class="string">"org.jadira.usertype.dateandtime.joda.PersistentDateTime"</span>)</div><div class="line">    <span class="keyword">private</span> DateTime creationTime;</div><div class="line"> </div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"description"</span>, nullable = <span class="keyword">true</span>, length = <span class="number">500</span>)</div><div class="line">    <span class="keyword">private</span> String description;</div><div class="line"> </div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"modification_time"</span>, nullable = <span class="keyword">false</span>)</div><div class="line">    <span class="meta">@Type</span>(type=<span class="string">"org.jadira.usertype.dateandtime.joda.PersistentDateTime"</span>)</div><div class="line">    <span class="keyword">private</span> DateTime modificationTime;</div><div class="line"> </div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"title"</span>, nullable = <span class="keyword">false</span>, length = <span class="number">100</span>)</div><div class="line">    <span class="keyword">private</span> String title;</div><div class="line"> </div><div class="line">    <span class="meta">@Version</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> version;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Todo</span><span class="params">()</span> </span>&#123;</div><div class="line"> </div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">//Getters and other methods</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Service-层"><a href="#Service-层" class="headerlink" title="Service 层"></a>Service 层</h2><p>Service层提供了<code>TodoService</code>接口，用来连接Controller层和Domain层的通信。该接口提供了3个方法：</p><ul><li><code>Todo deleteById(Long id)</code> 删除指定id的Todo项；如果不存在该Todo项，则抛出<code>TodoNotFoundException</code>异常</li><li><code>List&lt;Todo&gt; findAll()</code> 返回所有Todo项的列表；如果没有Todo项，则返回空列表</li><li><code>Todo findById(Long id)</code> 返回指定id的Todo项；如果不存在该Todo项，则抛出<code>TodoNotFoundException</code>异常</li></ul><p><code>TodoService</code>接口代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TodoService</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> Todo <span class="title">deleteById</span><span class="params">(Long id)</span> <span class="keyword">throws</span> TodoNotFoundException</span>;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Todo&gt; <span class="title">findAll</span><span class="params">()</span></span>;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> Todo <span class="title">findById</span><span class="params">(Long id)</span> <span class="keyword">throws</span> TodoNotFoundException</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Controller-层"><a href="#Controller-层" class="headerlink" title="Controller 层"></a>Controller 层</h2><p>Controller层提供了<code>TodoController</code>类，用于创建视图、处理请求。</p><p><code>TodoController</code>类代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.context.MessageSource;</div><div class="line"><span class="keyword">import</span> org.springframework.context.i18n.LocaleContextHolder;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.ui.Model;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.support.RedirectAttributes;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.annotation.Resource;</div><div class="line"><span class="keyword">import</span> javax.validation.Valid;</div><div class="line"> </div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoController</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> TodoService service;</div><div class="line"> </div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> MessageSource messageSource;</div><div class="line"> </div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/todo/delete/&#123;id&#125;"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id, RedirectAttributes attributes) <span class="keyword">throws</span> TodoNotFoundException </span>&#123;</div><div class="line">        Todo deleted = service.deleteById(id);</div><div class="line"> </div><div class="line">        addFeedbackMessage(attributes, <span class="string">"feedback.message.todo.deleted"</span>, deleted.getTitle());</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> createRedirectViewPath(<span class="string">"/"</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">(Model model)</span> </span>&#123;</div><div class="line">        List&lt;Todo&gt; models = service.findAll();</div><div class="line"> </div><div class="line">        model.addAttribute(<span class="string">"todos"</span>, models);</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> <span class="string">"todo/list"</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/todo/&#123;id&#125;"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id, Model model) <span class="keyword">throws</span> TodoNotFoundException </span>&#123;</div><div class="line">        Todo found = service.findById(id);</div><div class="line"> </div><div class="line">        model.addAttribute(<span class="string">"todo"</span>, found);</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> <span class="string">"todo/view"</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addFeedbackMessage</span><span class="params">(RedirectAttributes attributes, String messageCode, Object... messageParameters)</span> </span>&#123;</div><div class="line">        String localizedFeedbackMessage = getMessage(messageCode, messageParameters);</div><div class="line">        attributes.addFlashAttribute(<span class="string">"feedbackMessage"</span>, localizedFeedbackMessage);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getMessage</span><span class="params">(String messageCode, Object... messageParameters)</span> </span>&#123;</div><div class="line">        Locale current = LocaleContextHolder.getLocale();</div><div class="line">        <span class="keyword">return</span> messageSource.getMessage(messageCode, messageParameters, current);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">createRedirectViewPath</span><span class="params">(String requestMapping)</span> </span>&#123;</div><div class="line">        StringBuilder redirectViewPath = <span class="keyword">new</span> StringBuilder();</div><div class="line">        redirectViewPath.append(<span class="string">"redirect:"</span>);</div><div class="line">        redirectViewPath.append(requestMapping);</div><div class="line">        <span class="keyword">return</span> redirectViewPath.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h1><h2 id="创建测试用例类框架"><a href="#创建测试用例类框架" class="headerlink" title="创建测试用例类框架"></a>创建测试用例类框架</h2><p>要搭建起测试框架，需要以下步骤：</p><ol><li>搭建Spring MVC Test环境</li><li>搭建DbUnit环境</li><li>配置DBUnit，设定测试开始和结束时的状态</li></ol><p>没有添加任何测试方法前的框架代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.DbUnitTestExecutionListener;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.DatabaseSetup;</div><div class="line"><span class="keyword">import</span> org.junit.Before;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.TestExecutionListeners;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DirtiesContextTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.transaction.TransactionalTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.samples.context.WebContextLoader;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.setup.MockMvcBuilders;</div><div class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.annotation.Resource;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(loader = WebContextLoader.class, classes = &#123;ExampleApplicationContext.class&#125;)</div><div class="line"><span class="meta">@TestExecutionListeners</span>(&#123; DependencyInjectionTestExecutionListener.class,</div><div class="line">        DirtiesContextTestExecutionListener.class,</div><div class="line">        TransactionalTestExecutionListener.class,</div><div class="line">        DbUnitTestExecutionListener.class &#125;)</div><div class="line"><span class="meta">@DatabaseSetup</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITTodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> WebApplicationContext webApplicationContext;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</div><div class="line">        mockMvc = MockMvcBuilders.webApplicationContextSetup(webApplicationContext)</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="comment">//Add tests here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注意代码中的<code>@DatabaseSetup(&quot;toDoData.xml&quot;)</code>注解，该注解的作用在于使用<code>todoData.xml</code>文件中的数据去初始化数据库表，该注解由<code>DbUnitTestExecutionListener</code>进行解析。</p><p><code>todoData.xml</code>文件内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dataset</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">todos</span> <span class="attr">id</span>=<span class="string">"1"</span> <span class="attr">creation_time</span>=<span class="string">"2012-10-21 11:13:28"</span> <span class="attr">description</span>=<span class="string">"Lorem ipsum"</span> <span class="attr">modification_time</span>=<span class="string">"2012-10-21 11:13:28"</span> <span class="attr">title</span>=<span class="string">"Foo"</span> <span class="attr">version</span>=<span class="string">"0"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">todos</span> <span class="attr">id</span>=<span class="string">"2"</span> <span class="attr">creation_time</span>=<span class="string">"2012-10-21 11:13:28"</span> <span class="attr">description</span>=<span class="string">"Lorem ipsum"</span> <span class="attr">modification_time</span>=<span class="string">"2012-10-21 11:13:28"</span> <span class="attr">title</span>=<span class="string">"Bar"</span> <span class="attr">version</span>=<span class="string">"0"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dataset</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="编写集成测试用例"><a href="#编写集成测试用例" class="headerlink" title="编写集成测试用例"></a>编写集成测试用例</h2><h3 id="获取Todo项列表接口的测试用例"><a href="#获取Todo项列表接口的测试用例" class="headerlink" title="获取Todo项列表接口的测试用例"></a>获取Todo项列表接口的测试用例</h3><p>编写该测试用例的思路如下：</p><ol><li>使用<code>@ExpectedDatabase</code>注解来验证接口没有对数据库表状态产生变化</li><li>模拟执行”/“的GET请求，并取得返回的响应结果</li><li>对返回的响应结果作断言：HTTP状态码为200</li><li>对返回的响应结果作断言：view的名字是’todo/list’</li><li>对返回的响应结果作断言：view的路径为”/WEB-INF/jsp/todo/list.jsp”</li><li>对返回的响应结果作断言：model中Todo项的个数是2</li><li>对返回的响应结果作断言：model中的Todo项符合预期</li></ol><p>最终的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.DbUnitTestExecutionListener;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.DatabaseSetup;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.ExpectedDatabase;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.TestExecutionListeners;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DirtiesContextTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.transaction.TransactionalTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.samples.context.WebContextLoader;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.request.MockMvcRequestBuilders.get;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.*;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(loader = WebContextLoader.class, classes = &#123;ExampleApplicationContext.class&#125;)</div><div class="line"><span class="meta">@TestExecutionListeners</span>(&#123; DependencyInjectionTestExecutionListener.class,</div><div class="line">        DirtiesContextTestExecutionListener.class,</div><div class="line">        TransactionalTestExecutionListener.class,</div><div class="line">        DbUnitTestExecutionListener.class &#125;)</div><div class="line"><span class="meta">@DatabaseSetup</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITTodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//Add web application context here</span></div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="comment">//Add setUp() method here</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@ExpectedDatabase</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        mockMvc.perform(get(<span class="string">"/"</span>))</div><div class="line">                .andExpect(status().isOk())</div><div class="line">                .andExpect(view().name(<span class="string">"todo/list"</span>))</div><div class="line">                .andExpect(forwardedUrl(<span class="string">"/WEB-INF/jsp/todo/list.jsp"</span>))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todos"</span>, hasSize(<span class="number">2</span>)))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todos"</span>, hasItem(</div><div class="line">                        allOf(</div><div class="line">                                hasProperty(<span class="string">"id"</span>, is(<span class="number">1L</span>)),</div><div class="line">                                hasProperty(<span class="string">"description"</span>, is(<span class="string">"Lorem ipsum"</span>)),</div><div class="line">                                hasProperty(<span class="string">"title"</span>, is(<span class="string">"Foo"</span>))</div><div class="line">                        )</div><div class="line">                )))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todos"</span>, hasItem(</div><div class="line">                        allOf(</div><div class="line">                                hasProperty(<span class="string">"id"</span>, is(<span class="number">2L</span>)),</div><div class="line">                                hasProperty(<span class="string">"description"</span>, is(<span class="string">"Lorem ipsum"</span>)),</div><div class="line">                                hasProperty(<span class="string">"title"</span>, is(<span class="string">"Bar"</span>))</div><div class="line">                        )</div><div class="line">                )));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="获取单个Todo项详情接口的测试用例"><a href="#获取单个Todo项详情接口的测试用例" class="headerlink" title="获取单个Todo项详情接口的测试用例"></a>获取单个Todo项详情接口的测试用例</h3><p>根据参数的不同，获取单个Todo项详情接口会有两种不同的返回结果：</p><ul><li>如果指定id的Todo项存在，返回单个Todo项的详情页</li><li>如果指定id的Todo项不存在，返回404页</li></ul><p>对于指定Todo项存在的情况，我们可以按照以下步骤来编写测试用例：</p><ol><li>使用<code>@ExpectedDatabase</code>注解来验证接口没有对数据库表状态产生变化</li><li>模拟执行”/todo/1”的GET请求，并取得返回的响应结果</li><li>对返回的响应结果作断言：HTTP状态码为200</li><li>对返回的响应结果作断言：view的名字是’todo/view’</li><li>对返回的响应结果作断言：view的路径为”/WEB-INF/jsp/todo/view.jsp”</li><li>对返回的响应结果作断言：model中的Todo项符合预期</li></ol><p>最终的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.DbUnitTestExecutionListener;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.DatabaseSetup;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.ExpectedDatabase;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.TestExecutionListeners;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DirtiesContextTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.transaction.TransactionalTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.samples.context.WebContextLoader;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.request.MockMvcRequestBuilders.get;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.*;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(loader = WebContextLoader.class, classes = &#123;ExampleApplicationContext.class&#125;)</div><div class="line"><span class="meta">@TestExecutionListeners</span>(&#123; DependencyInjectionTestExecutionListener.class,</div><div class="line">        DirtiesContextTestExecutionListener.class,</div><div class="line">        TransactionalTestExecutionListener.class,</div><div class="line">        DbUnitTestExecutionListener.class &#125;)</div><div class="line"><span class="meta">@DatabaseSetup</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITTodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//Add web application context here</span></div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="comment">//Add setUp() method here</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@ExpectedDatabase</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findById</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        mockMvc.perform(get(<span class="string">"/todo/&#123;id&#125;"</span>, <span class="number">1L</span>))</div><div class="line">                .andExpect(status().isOk())</div><div class="line">                .andExpect(view().name(<span class="string">"todo/view"</span>))</div><div class="line">                .andExpect(forwardedUrl(<span class="string">"/WEB-INF/jsp/todo/view.jsp"</span>))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todo"</span>, hasProperty(<span class="string">"id"</span>, is(<span class="number">1L</span>))))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todo"</span>, hasProperty(<span class="string">"description"</span>, is(<span class="string">"Lorem ipsum"</span>))))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todo"</span>, hasProperty(<span class="string">"title"</span>, is(<span class="string">"Foo"</span>))));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对于指定Todo项不存在的情况，我们可以按照以下步骤来编写测试用例：</p><ol><li>使用<code>@ExpectedDatabase</code>注解来验证接口没有对数据库表状态产生变化</li><li>模拟执行”/todo/3”的GET请求，并取得返回的响应结果</li><li>对返回的响应结果作断言：HTTP状态码为404</li><li>对返回的响应结果作断言：view的名字是’error/404’</li><li>对返回的响应结果作断言：view的路径为”/WEB-INF/jsp/error/404.jsp”</li></ol><p>最终的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.DbUnitTestExecutionListener;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.DatabaseSetup;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.ExpectedDatabase;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.TestExecutionListeners;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DirtiesContextTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.transaction.TransactionalTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.samples.context.WebContextLoader;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.request.MockMvcRequestBuilders.get;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.*;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(loader = WebContextLoader.class, classes = &#123;ExampleApplicationContext.class&#125;)</div><div class="line"><span class="meta">@TestExecutionListeners</span>(&#123; DependencyInjectionTestExecutionListener.class,</div><div class="line">        DirtiesContextTestExecutionListener.class,</div><div class="line">        TransactionalTestExecutionListener.class,</div><div class="line">        DbUnitTestExecutionListener.class &#125;)</div><div class="line"><span class="meta">@DatabaseSetup</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITTodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//Add web application context here</span></div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="comment">//Add setUp() method here</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@ExpectedDatabase</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByIdWhenTodoIsNotFound</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        mockMvc.perform(get(<span class="string">"/todo/&#123;id&#125;"</span>, <span class="number">3L</span>))</div><div class="line">                .andExpect(status().isNotFound())</div><div class="line">                .andExpect(view().name(<span class="string">"error/404"</span>))</div><div class="line">                .andExpect(forwardedUrl(<span class="string">"/WEB-INF/jsp/error/404.jsp"</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="删除指定Todo项接口的测试用例"><a href="#删除指定Todo项接口的测试用例" class="headerlink" title="删除指定Todo项接口的测试用例"></a>删除指定Todo项接口的测试用例</h3><p>根据参数的不同，删除指定Todo项接口会有两种不同的返回结果：</p><ul><li>如果指定id的Todo项存在，数据库中的Todo会被删除</li><li>如果指定id的Todo项不存在，返回404页</li></ul><p>对于指定Todo项存在的情况，我们可以按照以下步骤来编写测试用例：</p><ol><li>使用<code>@ExpectedDatabase</code>注解来验证接口对数据库的操作符合预期</li><li>模拟执行”/todo/delete/1”的GET请求，并取得返回的响应结果</li><li>对返回的响应结果作断言：HTTP状态码为200</li><li>对返回的响应结果作断言：view的名字是’redirect:/‘</li><li>对返回的响应结果作断言：view的路径为”/WEB-INF/jsp/todo/view.jsp”</li><li>对返回的响应结果作断言：flash中返回了预期的提示信息</li></ol><p>最终的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.DbUnitTestExecutionListener;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.DatabaseSetup;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.ExpectedDatabase;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.TestExecutionListeners;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DirtiesContextTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.transaction.TransactionalTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.samples.context.WebContextLoader;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.is;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.request.MockMvcRequestBuilders.get;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.*;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(loader = WebContextLoader.class, classes = &#123;ExampleApplicationContext.class&#125;)</div><div class="line"><span class="meta">@TestExecutionListeners</span>(&#123; DependencyInjectionTestExecutionListener.class,</div><div class="line">        DirtiesContextTestExecutionListener.class,</div><div class="line">        TransactionalTestExecutionListener.class,</div><div class="line">        DbUnitTestExecutionListener.class &#125;)</div><div class="line"><span class="meta">@DatabaseSetup</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITTodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//Add web application context here</span></div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="comment">//Add setUp() method here</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@ExpectedDatabase</span>(<span class="string">"todoData-delete-expected.xml"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        mockMvc.perform(get(<span class="string">"/todo/delete/&#123;id&#125;"</span>, <span class="number">1L</span>))</div><div class="line">                .andExpect(status().isOk())</div><div class="line">                .andExpect(view().name(<span class="string">"redirect:/"</span>))</div><div class="line">                .andExpect(flash().attribute(<span class="string">"feedbackMessage"</span>, is(<span class="string">"Todo entry: Foo was deleted."</span>)));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>作为对照，<code>todoData-delete-expected.xml</code>文件包含了预期的数据库表结果，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dataset</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">todos</span> <span class="attr">id</span>=<span class="string">"2"</span> <span class="attr">creation_time</span>=<span class="string">"2012-10-21 11:13:28"</span> <span class="attr">description</span>=<span class="string">"Lorem ipsum"</span> <span class="attr">modification_time</span>=<span class="string">"2012-10-21 11:13:28"</span> <span class="attr">title</span>=<span class="string">"Bar"</span> <span class="attr">version</span>=<span class="string">"0"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dataset</span>&gt;</span></div></pre></td></tr></table></figure><p>对于指定Todo项不存在的情况，我们可以按照以下步骤来编写测试用例：</p><ol><li>使用<code>@ExpectedDatabase</code>注解来验证接口没有对数据库表状态产生变化</li><li>模拟执行”/todo/delete/3”的GET请求，并取得返回的响应结果</li><li>对返回的响应结果作断言：HTTP状态码为404</li><li>对返回的响应结果作断言：view的名字是’error/404’</li><li>对返回的响应结果作断言：view的路径为”/WEB-INF/jsp/error/404.jsp”</li></ol><p>最终的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.DbUnitTestExecutionListener;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.DatabaseSetup;</div><div class="line"><span class="keyword">import</span> com.github.springtestdbunit.annotation.ExpectedDatabase;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.TestExecutionListeners;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.support.DirtiesContextTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.transaction.TransactionalTestExecutionListener;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.server.samples.context.WebContextLoader;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.request.MockMvcRequestBuilders.get;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.server.result.MockMvcResultMatchers.*;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(loader = WebContextLoader.class, classes = &#123;ExampleApplicationContext.class&#125;)</div><div class="line"><span class="meta">@TestExecutionListeners</span>(&#123; DependencyInjectionTestExecutionListener.class,</div><div class="line">        DirtiesContextTestExecutionListener.class,</div><div class="line">        TransactionalTestExecutionListener.class,</div><div class="line">        DbUnitTestExecutionListener.class &#125;)</div><div class="line"><span class="meta">@DatabaseSetup</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITTodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//Add web application context here</span></div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="comment">//Add setUp() method here</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@ExpectedDatabase</span>(<span class="string">"toDoData.xml"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByIdWhenTodoIsNotFound</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        mockMvc.perform(get(<span class="string">"/todo/delete/&#123;id&#125;"</span>, <span class="number">3L</span>))</div><div class="line">                .andExpect(status().isNotFound())</div><div class="line">                .andExpect(view().name(<span class="string">"error/404"</span>))</div><div class="line">                .andExpect(forwardedUrl(<span class="string">"/WEB-INF/jsp/error/404.jsp"</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>到此为止，我们就写完了所有的测试用例代码。总结一下，本文主要内容如下：</p><ul><li>如何生成并执行模拟的HTTP请求，以及如何对响应结果作断言</li><li>使用Spring MVC Test编写的集成测试用例可读性非常好，可以作为接口文档的补充</li><li>Spring MVC Test没法验证view是否正确绘制，但可以验证是否使用了预期的view模板</li></ul><p>下一篇是 <a href="/2016/04/09/spring-mvc-testing-integration-testing-forms/">Spring MVC Integration Testing - Forms</a>。</p>]]></content>
      
        <categories>
            
            <category> Spring MVC Testing </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring MVC </tag>
            
            <tag> Test </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring MVC Integration Testing - Configuration]]></title>
      <url>http://www.wbprime.me/2016/04/09/spring-mvc-testing-integration-testing-configuration/</url>
      <content type="html"><![CDATA[<p>本文是 <a href="/2016/04/09/spring-mvc-testing-content/">Spring MVC Testing</a> 集成测试系列的第1篇，原文链接：<a href="http://www.petrikainulainen.net/programming/spring-framework/integration-testing-of-spring-mvc-applications-configuration/" target="_blank" rel="external">Integration Testing of Spring MVC Applications: Configuration</a>。</p><p>没有人会否认集成测试的重要性，它是验证我们开发的组件能够正常协同工作的重要手段。不幸的是，对使用Spring MVC开发的web应用程序作集成测试有一点麻烦。</p><p>过去我们一直用 <a href="http://docs.seleniumhq.org" target="_blank" rel="external">Selenium</a> 和 <a href="https://jwebunit.github.io/jwebunit/" target="_blank" rel="external">JWebUnit</a> 来对web应用接口作集成测试，然后效果不是很好。这种方法有以下三个缺点：</p><ul><li>对于开发中的web接口，编写和维护测试的工作量比较大</li><li>对于使用Javascript，尤其是Ajax的web应用，可用性不高</li><li>必须在web容器中启动运行，导致速度慢而且很没有效率</li></ul><p>经常就是开发者在后续开发过程中觉得维护之前的集成测试用例太过耗时而且效果不大，所以废弃了这种形式的集成测试。幸运的是，我们找到了一种新型的集成测试框架Spring MVC Test可以用来简化测试工作。</p><p>本文主要介绍如何配置Spring MVC Test框架来进行web应用的测试。本系列使用的工具包括：</p><ul><li>Spring Framework 3.2</li><li>JUnit 4.10</li><li>Maven 3.0.3</li></ul><p>我们一起来开始进入Spring MVC Test的世界吧！</p><h1 id="通过Maven获取依赖"><a href="#通过Maven获取依赖" class="headerlink" title="通过Maven获取依赖"></a>通过Maven获取依赖</h1><p>译者注：原文写作的时候是基于Spring Framework 3.1.2，当时Spring-test-mvc还是作为一个独立的项目进行开发和发布。在Spring Framework 3.2以后，该项目被合并到Spring Framework中去了。现在Spring Framework已经发布了4.X系列，很少有人在使用3.2以下的版本，为了减少混淆，直接将原文的pom文件加以修改。特此说明。</p><p>生成的pom.xml文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><h1 id="MockMvc-配置"><a href="#MockMvc-配置" class="headerlink" title="MockMvc 配置"></a>MockMvc 配置</h1><p>Spring MVC Test框架提供了<code>MockMvc</code>类体系来辅助编写基于Spring MVC开发的web应用的测试代码。我们需要做的就是使用<code>MockMvcBuilder</code>接口的实际实现来生成<code>MockMvc</code>实例。<code>MockMvcBuilders</code>工厂类提供了两个工厂方法创建<code>MockMvcBuilder</code>实例：</p><ul><li><code>StandaloneMockMvcBuilder standaloneSetup(Object… controllers)</code> 主要用来对单个Controller进行测试，需要手动地配置各种Bean</li><li><code>DefaultMockMvcBuilder webAppContextSetup(WebApplicationContext context)</code> 主要使用配置好的Spring上下文来配置Bean</li></ul><p>下面来详细看一下这两种方式分别如何使用。</p><h2 id="standaloneSetup"><a href="#standaloneSetup" class="headerlink" title="standaloneSetup"></a>standaloneSetup</h2><p>如果要测试的类是<code>HomeController</code>，我们可以用如下的方式创建一个<code>MockMvc</code>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MockMvc mockMvc = MockMvcBuilders.standaloneSetup(<span class="keyword">new</span> HomeController()).build();</div></pre></td></tr></table></figure><h2 id="webAppContextSetup"><a href="#webAppContextSetup" class="headerlink" title="webAppContextSetup"></a>webAppContextSetup</h2><p>这种方式我们要先初始化一个配置好的<code>WebApplicationContext</code>实例，然后通过如下代码创建一个<code>MockMvc</code>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">WebApplicationContext wac ;</div><div class="line">MockMvc mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();</div></pre></td></tr></table></figure><h1 id="测试用例类的配置"><a href="#测试用例类的配置" class="headerlink" title="测试用例类的配置"></a>测试用例类的配置</h1><p>在集成测试中我们应该使用webAppContextSetup方式的<code>MockMvc</code>配置方式，这样可以最大化地共用Spring配置代码。</p><p>我们可以按照如下的步骤来配置集成测试用例类：</p><ol><li>对测试用例类加上<code>@RunWith(SpringJUnit4ClassRunner.class)</code>注解</li><li>对测试用例类加上<code>@ContextConfiguration</code>注解，并指定Spring配置文件（XML）或者配置类（Java）</li><li>对测试用例类加上<code>@WebAppConfiguration</code>注解，表明这是一个web应用的测试用例</li><li>测试用例类中添加一个<code>MockMvc</code>类型的成员</li><li>测试用例类中添加一个<code>setUp()</code>方法并用<code>@Before</code>注解，调用<code>MockMvcBuilders</code>的静态方法<code>webAppContextSetup()</code>创建并配置好<code>MockMvc</code>类型的成员</li></ol><p>完成后的测试用例类大概长成这个样子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(locations = &#123;<span class="string">"classpath:testContext.xml"</span>, <span class="string">"classpath:webMvcContext.xml"</span>&#125;)</div><div class="line"><span class="comment">//@ContextConfiguration(classes = &#123;TestContext.class, WebMvcContext.class&#125;)</span></div><div class="line"><span class="meta">@WebAppConfiguration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoControllerTest_WebAppContext</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> WebApplicationContext webApplicationContext;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Mockito.reset(mockedTodoService);</div><div class="line"></div><div class="line">        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Add tests here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>本文使用的代码被放在了 <a href="https://github.com/pkainulainen/spring-mvc-test-examples/tree/master/configuration" target="_blank" rel="external">Github</a> 上。使用Maven进行集成测试的方法可以参见我的另外一篇文章 <a href="http://www.petrikainulainen.net/programming/maven/integration-testing-with-maven/" target="_blank" rel="external">Integration Testing with Maven</a>。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文主要介绍了如何来配置基于Spring MVC Test的集成测试，主要内容有：</p><ul><li>如何使用不同的Spring配置方式（XML/Java）来配置测试用例</li><li>应该使用<code>webAppContextSetup</code>的方式而不是<code>standaloneSetup</code>方式</li><li>如何使用<code>WebApplicationContext</code>注入来完成Spring配置的加载</li></ul><p>下一篇是 <a href="/2016/04/09/spring-mvc-testing-integration-testing-controllers/">Spring MVC Integration Testing - Controllers</a>。</p>]]></content>
      
        <categories>
            
            <category> Spring MVC Testing </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring MVC </tag>
            
            <tag> Test </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring MVC Unit Testing - REST API]]></title>
      <url>http://www.wbprime.me/2016/04/09/spring-mvc-testing-unit-testing-rest-api/</url>
      <content type="html"><![CDATA[<p>本文是 <a href="/2016/04/09/spring-mvc-testing-content/">Spring MVC Testing</a> 单元测试系列的第3篇，原文链接：<a href="http://www.petrikainulainen.net/programming/spring-framework/unit-testing-of-spring-mvc-controllers-rest-api/" target="_blank" rel="external">Unit Testing of Spring MVC Controllers: REST API</a>。</p><p>使用Spring MVC可以很方便第创建REST风格的接口，但是编写REST风格接口的单元测试并不是那么方便。幸运的是，Spring MVC Test极大地简化了我们为REST风格controller编写单元测试的工作。</p><p>本文将通过为<code>Todo</code>项的增删改查（CRUD）的REST风格接口操作编写单元测试的方式，一步一步地讲解如何使用Spring MVC Test来进行单元测试。OK，我们快点进入正文吧！</p><h1 id="通过Maven获取依赖"><a href="#通过Maven获取依赖" class="headerlink" title="通过Maven获取依赖"></a>通过Maven获取依赖</h1><p>本系列用到的依赖如下：</p><ul><li>Hamcrest 1.3 (hamcrest-all)</li><li>Junit 4.11</li><li>Mockito 1.9.5 (mockito-core)</li><li>Spring Test 3.2.3.RELEASE</li><li>JsonPath 0.8.1 (json-path and json-path-assert)</li></ul><p>生成的pom.xml文件的片段如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hamcrest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hamcrest-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hamcrest-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hamcrest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mockito<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mockito-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jayway.jsonpath<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>json-path<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jayway.jsonpath<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>json-path-assert<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><h1 id="测试用例配置"><a href="#测试用例配置" class="headerlink" title="测试用例配置"></a>测试用例配置</h1><p>同前一篇一样，我们使用<code>WebApplicationContext</code>方式来进行单元测试，这意味着我们需要按照之前介绍的配置方法配置上下文。由于之前对这部分内容已经有了详细的介绍，这里恕不赘述。</p><p>唯一需要注意的一点是，前面我们演示了使用<code>SimpleMappingExceptionResolver</code> bean来映射异常的处理方法，这在标准的controller里面很有用；但对于REST controller而言，异常需要使用<code>ResponseStatusExceptionResolver</code> bean来处理。更进一步，我们在工程中使用了<code>@ControllerAdvice</code>来创建自定义的异常映射处理类。下文我们会详细讲解该类，在此之前，我们先看看如何实现REST controller。</p><h1 id="测试用例类"><a href="#测试用例类" class="headerlink" title="测试用例类"></a>测试用例类</h1><p>要针对REST接口编写单元测试，首先要准备一些基础知识：</p><ul><li>Spring MVC Test如何来进行单元测试，相关内容详见 <a href="/2016/04/09/spring-mvc-testing-unit-testing-normal-controllers/">Spring MVC Unit Testing - Normal Controllers</a></li><li>如何对json结果作断言，我们选择的是 <a href="https://github.com/jayway/JsonPath" target="_blank" rel="external">JsonPath</a></li></ul><p>然后我们可以开始编写代码了。作为演示，我们将编写一下3种类型的REST接口的单元测试：</p><ul><li>返回<code>Todo</code>项列表GET结果的接口</li><li>返回<code>TOdo</code>项GET结果的接口</li><li>返回<code>Todo</code>项POST结果的接口</li></ul><h2 id="GET-Todo项列表的接口"><a href="#GET-Todo项列表的接口" class="headerlink" title="GET Todo项列表的接口"></a>GET <code>Todo</code>项列表的接口</h2><p>首先看一下该接口的实现代码。</p><h3 id="预期的实现"><a href="#预期的实现" class="headerlink" title="预期的实现"></a>预期的实现</h3><p>预期的接口应该做以下几件事：</p><ol><li>接收到”/api/todo”上的GET请求，开始处理流程</li><li>调用<code>TodoService</code>的<code>findAll()</code>方法获取到所有的<code>Todo</code>对象的列表</li><li>将<code>Todo</code>列表转换为<code>TodoDTO</code>列表</li><li>返回<code>TodoDTO</code>列表的json表示</li></ol><p><code>TodoController</code>类内的相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"> </div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoController</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> TodoService service;</div><div class="line"> </div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/api/todo"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;TodoDTO&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;Todo&gt; models = service.findAll();</div><div class="line">        <span class="keyword">return</span> createDTOs(models);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> List&lt;TodoDTO&gt; <span class="title">createDTOs</span><span class="params">(List&lt;Todo&gt; models)</span> </span>&#123;</div><div class="line">        List&lt;TodoDTO&gt; dtos = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"> </div><div class="line">        <span class="keyword">for</span> (Todo model: models) &#123;</div><div class="line">            dtos.add(createDTO(model));</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> dtos;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> TodoDTO <span class="title">createDTO</span><span class="params">(Todo model)</span> </span>&#123;</div><div class="line">        TodoDTO dto = <span class="keyword">new</span> TodoDTO();</div><div class="line"> </div><div class="line">        dto.setId(model.getId());</div><div class="line">        dto.setDescription(model.getDescription());</div><div class="line">        dto.setTitle(model.getTitle());</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> dto;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>返回的json结果有可能是：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"id"</span>:<span class="number">1</span>,</div><div class="line">        <span class="attr">"description"</span>:<span class="string">"Lorem ipsum"</span>,</div><div class="line">        <span class="attr">"title"</span>:<span class="string">"Foo"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"id"</span>:<span class="number">2</span>,</div><div class="line">        <span class="attr">"description"</span>:<span class="string">"Lorem ipsum"</span>,</div><div class="line">        <span class="attr">"title"</span>:<span class="string">"Bar"</span></div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure><p>接下来我们可以编写对应的测试用例了。</p><h3 id="测试用例：Todo项列表GET请求"><a href="#测试用例：Todo项列表GET请求" class="headerlink" title="测试用例：Todo项列表GET请求"></a>测试用例：<code>Todo</code>项列表GET请求</h3><p>该测试用例主要工作如下：</p><ol><li>准备测试数据</li><li>配置mock的<code>TodoService</code>实例在<code>findAll()</code>方法被调用的时候返回准备的数据</li><li>执行一个’/api/todo’的GET请求</li><li>对响应作断言：HTTP返回码是200</li><li>对响应作断言：Content-type的值是”application/json”，并且字符集是”UTF-8”</li><li>对响应作断言：使用jsonpath对结果作验证</li><li>检查请求执行过程中mock的<code>TodoService</code>实例执行了<code>findAll()</code>方法有且仅1次</li><li>检查请求执行过程中mock的<code>TodoService</code>实例未执行其他方法</li></ol><p>相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.web.WebAppConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(classes = &#123;TestContext.class, WebAppContext.class&#125;)</div><div class="line"><span class="meta">@WebAppConfiguration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> TodoService todoServiceMock;</div><div class="line"> </div><div class="line">    <span class="comment">//Add WebApplicationContext field here.</span></div><div class="line"> </div><div class="line">    <span class="comment">//The setUp() method is omitted.</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll_TodosFound_ShouldReturnFoundTodoEntries</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Todo first = <span class="keyword">new</span> TodoBuilder()</div><div class="line">                .id(<span class="number">1L</span>)</div><div class="line">                .description(<span class="string">"Lorem ipsum"</span>)</div><div class="line">                .title(<span class="string">"Foo"</span>)</div><div class="line">                .build();</div><div class="line">        Todo second = <span class="keyword">new</span> TodoBuilder()</div><div class="line">                .id(<span class="number">2L</span>)</div><div class="line">                .description(<span class="string">"Lorem ipsum"</span>)</div><div class="line">                .title(<span class="string">"Bar"</span>)</div><div class="line">                .build();</div><div class="line"> </div><div class="line">        when(todoServiceMock.findAll()).thenReturn(Arrays.asList(first, second));</div><div class="line"> </div><div class="line">        mockMvc.perform(get(<span class="string">"/api/todo"</span>))</div><div class="line">                .andExpect(status().isOk())</div><div class="line">                .andExpect(content().contentType(TestUtil.APPLICATION_JSON_UTF8))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$"</span>, hasSize(<span class="number">2</span>)))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$[0].id"</span>, is(<span class="number">1</span>)))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$[0].description"</span>, is(<span class="string">"Lorem ipsum"</span>)))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$[0].title"</span>, is(<span class="string">"Foo"</span>)))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$[1].id"</span>, is(<span class="number">2</span>)))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$[1].description"</span>, is(<span class="string">"Lorem ipsum"</span>)))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$[1].title"</span>, is(<span class="string">"Bar"</span>)));</div><div class="line"> </div><div class="line">        verify(todoServiceMock, times(<span class="number">1</span>)).findAll();</div><div class="line">        verifyNoMoreInteractions(todoServiceMock);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>代码中使用的<code>TestUtil.APPLICATION_JSON_UTF8</code>的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUtil</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MediaType APPLICATION_JSON_UTF8 = </div><div class="line">truetruetrue<span class="keyword">new</span> MediaType(</div><div class="line">truetruetruetrueMediaType.APPLICATION_JSON.getType(),</div><div class="line">truetruetruetrueMediaType.APPLICATION_JSON.getSubtype, </div><div class="line">truetruetruetrueCharset.forName(<span class="string">"utf8"</span>)</div><div class="line">truetruetrue);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="GET-Todo项的接口"><a href="#GET-Todo项的接口" class="headerlink" title="GET Todo项的接口"></a>GET <code>Todo</code>项的接口</h2><p>首先看一下该接口的实现代码。</p><h3 id="预期的实现-1"><a href="#预期的实现-1" class="headerlink" title="预期的实现"></a>预期的实现</h3><p>预期的接口应该做以下几件事：</p><ol><li>接收到”/api/todo/{id}”上的GET请求，开始处理流程</li><li>调用<code>TodoService</code>的<code>findById()</code>方法获取到目标Todo对象</li><li>将<code>Todo</code>项转换为<code>TodoDTO</code>项</li><li>返回<code>TodoDTO</code>项的json表示</li></ol><p><code>TodoController</code>类内的相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</div><div class="line"> </div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoController</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> TodoService service;</div><div class="line"> </div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/api/todo/&#123;id&#125;"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> TodoDTO <span class="title">findById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id) <span class="keyword">throws</span> TodoNotFoundException </span>&#123;</div><div class="line">        Todo found = service.findById(id);</div><div class="line">        <span class="keyword">return</span> createDTO(found);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> TodoDTO <span class="title">createDTO</span><span class="params">(Todo model)</span> </span>&#123;</div><div class="line">        TodoDTO dto = <span class="keyword">new</span> TodoDTO();</div><div class="line"> </div><div class="line">        dto.setId(model.getId());</div><div class="line">        dto.setDescription(model.getDescription());</div><div class="line">        dto.setTitle(model.getTitle());</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> dto;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>如果抛出<code>TodoNotFoundException</code>，程序会怎么处理？</p></blockquote><p>如前所述，我们编写了一个异常处理类来处理异常与HTTP返回码的映射。当程序抛出<code>TodoNotFoundException</code>异常时，异常处理类会将该异常转换为404的状态码，并写一条日志。</p><p><code>RestErrorHandler</code>类的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseStatus;</div><div class="line"> </div><div class="line"><span class="meta">@ControllerAdvice</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestErrorHandler</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(RestErrorHandler.class);</div><div class="line"> </div><div class="line">    <span class="meta">@ExceptionHandler</span>(TodoNotFoundException.class)</div><div class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.NOT_FOUND)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleTodoNotFoundException</span><span class="params">(TodoNotFoundException ex)</span> </span>&#123;</div><div class="line">        LOGGER.debug(<span class="string">"handling 404 error on a todo entry"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>所以，我们的单元测试需要同时测试<code>Todo</code>项未找到和已找到的情况。</p><h3 id="测试用例：Todo项GET请求返回404"><a href="#测试用例：Todo项GET请求返回404" class="headerlink" title="测试用例：Todo项GET请求返回404"></a>测试用例：<code>Todo</code>项GET请求返回404</h3><p>该测试用例主要工作如下：</p><ol><li>配置mock的<code>TodoService</code>实例在<code>findById()</code>方法被调用的时候抛出<code>TodoNotFoundException</code></li><li>执行一个’/api/todo/1’的GET请求</li><li>对响应作断言：HTTP返回码是404</li><li>检查请求执行过程中mock的<code>TodoService</code>实例执行了<code>findById()</code>方法有且仅1次</li><li>检查请求执行过程中mock的<code>TodoService</code>实例未执行其他方法</li></ol><p>相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.web.WebAppConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(classes = &#123;TestContext.class, WebAppContext.class&#125;)</div><div class="line"><span class="meta">@WebAppConfiguration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> TodoService todoServiceMock;</div><div class="line"> </div><div class="line">    <span class="comment">//Add WebApplicationContext field here.</span></div><div class="line"> </div><div class="line">    <span class="comment">//The setUp() method is omitted.</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findById_TodoEntryNotFound_ShouldReturnHttpStatusCode404</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        when(todoServiceMock.findById(<span class="number">1L</span>)).thenThrow(<span class="keyword">new</span> TodoNotFoundException(<span class="string">""</span>));</div><div class="line"> </div><div class="line">        mockMvc.perform(get(<span class="string">"/api/todo/&#123;id&#125;"</span>, <span class="number">1L</span>))</div><div class="line">                .andExpect(status().isNotFound());</div><div class="line"> </div><div class="line">        verify(todoServiceMock, times(<span class="number">1</span>)).findById(<span class="number">1L</span>);</div><div class="line">        verifyNoMoreInteractions(todoServiceMock);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="测试用例：Todo项GET请求返回成功"><a href="#测试用例：Todo项GET请求返回成功" class="headerlink" title="测试用例：Todo项GET请求返回成功"></a>测试用例：<code>Todo</code>项GET请求返回成功</h3><p>该测试用例主要工作如下：</p><ol><li>准备测试数据</li><li>配置mock的<code>TodoService</code>实例在<code>findById()</code>方法被调用的时候返回准备的数据</li><li>执行一个’/api/todo/1’的GET请求</li><li>对响应作断言：HTTP返回码是200</li><li>对响应作断言：Content-type的值是”application/json”，并且字符集是”UTF-8”</li><li>对响应作断言：使用jsonpath对结果作验证</li><li>检查请求执行过程中mock的<code>TodoService</code>实例执行了<code>findById()</code>方法有且仅1次</li><li>检查请求执行过程中mock的<code>TodoService</code>实例未执行其他方法</li></ol><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.web.WebAppConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.is;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(classes = &#123;TestContext.class, WebAppContext.class&#125;)</div><div class="line"><span class="meta">@WebAppConfiguration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> TodoService todoServiceMock;</div><div class="line"> </div><div class="line">    <span class="comment">//Add WebApplicationContext field here.</span></div><div class="line"> </div><div class="line">    <span class="comment">//The setUp() method is omitted.</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findById_TodoEntryFound_ShouldReturnFoundTodoEntry</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Todo found = <span class="keyword">new</span> TodoBuilder()</div><div class="line">                .id(<span class="number">1L</span>)</div><div class="line">                .description(<span class="string">"Lorem ipsum"</span>)</div><div class="line">                .title(<span class="string">"Foo"</span>)</div><div class="line">                .build();</div><div class="line"> </div><div class="line">        when(todoServiceMock.findById(<span class="number">1L</span>)).thenReturn(found);</div><div class="line"> </div><div class="line">        mockMvc.perform(get(<span class="string">"/api/todo/&#123;id&#125;"</span>, <span class="number">1L</span>))</div><div class="line">                .andExpect(status().isOk())</div><div class="line">                .andExpect(content().contentType(TestUtil.APPLICATION_JSON_UTF8))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$.id"</span>, is(<span class="number">1</span>)))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$.description"</span>, is(<span class="string">"Lorem ipsum"</span>)))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$.title"</span>, is(<span class="string">"Foo"</span>)));</div><div class="line"> </div><div class="line">        verify(todoServiceMock, times(<span class="number">1</span>)).findById(<span class="number">1L</span>);</div><div class="line">        verifyNoMoreInteractions(todoServiceMock);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="POST-Todo项的接口"><a href="#POST-Todo项的接口" class="headerlink" title="POST Todo项的接口"></a>POST <code>Todo</code>项的接口</h2><p>首先看一下该接口的实现代码。</p><h3 id="预期的实现-2"><a href="#预期的实现-2" class="headerlink" title="预期的实现"></a>预期的实现</h3><p>预期的接口应该做以下几件事：</p><ol><li>接收到”/api/todo”上的POST请求，开始处理流程</li><li>校验参数向<code>TodoDTO</code>的转换</li><li>调用<code>TodoService</code>的<code>add()</code>方法添加指定的<code>Todo</code>项</li><li>将<code>Todo</code>项转换为<code>TodoDTO</code>项</li><li>返回<code>TodoDTO</code>项的json表示</li></ol><p><code>TodoController</code>类内的相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.validation.Valid;</div><div class="line"> </div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoController</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> TodoService service;</div><div class="line"> </div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/api/todo"</span>, method = RequestMethod.POST)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> TodoDTO <span class="title">add</span><span class="params">(@Valid @RequestBody TodoDTO dto)</span> </span>&#123;</div><div class="line">        Todo added = service.add(dto);</div><div class="line">        <span class="keyword">return</span> createDTO(added);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> TodoDTO <span class="title">createDTO</span><span class="params">(Todo model)</span> </span>&#123;</div><div class="line">        TodoDTO dto = <span class="keyword">new</span> TodoDTO();</div><div class="line"> </div><div class="line">        dto.setId(model.getId());</div><div class="line">        dto.setDescription(model.getDescription());</div><div class="line">        dto.setTitle(model.getTitle());</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> dto;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们使用了<code>TodoDTO</code>类来封装<code>Todo</code>项的创建信息，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Length;</div><div class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.NotEmpty;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoDTO</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line"> </div><div class="line">    <span class="meta">@Length</span>(max = <span class="number">500</span>)</div><div class="line">    <span class="keyword">private</span> String description;</div><div class="line"> </div><div class="line">    <span class="meta">@NotEmpty</span></div><div class="line">    <span class="meta">@Length</span>(max = <span class="number">100</span>)</div><div class="line">    <span class="keyword">private</span> String title;</div><div class="line"> </div><div class="line">    <span class="comment">//Constructor and other methods are omitted.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>TodoDTO</code>类里面有一些校验规则，如果不满足规则，Spring在接口的<code>BindingResult</code>参数里面会显示错误。</p><p>所以，我们的测试用例需要考虑两种情况：</p><ul><li>参数校验通过，接口返回json</li><li>参数校验没有通过，异常被映射为状态码400</li></ul><p>也就是说，如果参数正确，返回结果的状态码为200，返回json形如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"fieldErrors"</span>:[</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"path"</span>:<span class="string">"description"</span>,</div><div class="line">            <span class="attr">"message"</span>:<span class="string">"The maximum length of the description is 500 characters."</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"path"</span>:<span class="string">"title"</span>,</div><div class="line">            <span class="attr">"message"</span>:<span class="string">"The maximum length of the title is 100 characters."</span></div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果参数不正确，返回结果的状态码为400，返回json形如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"id"</span>:<span class="number">1</span>,</div><div class="line">    <span class="attr">"description"</span>:<span class="string">"description"</span>,</div><div class="line">    <span class="attr">"title"</span>:<span class="string">"todo"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>接下来可以开始编写测试用例了。</p><h3 id="测试用例：Todo项POST请求失败"><a href="#测试用例：Todo项POST请求失败" class="headerlink" title="测试用例：Todo项POST请求失败"></a>测试用例：<code>Todo</code>项POST请求失败</h3><p>该测试用例主要工作如下：</p><ol><li>创建一个不符合验证规则的title</li><li>创建一个不符合验证规则的description</li><li>执行一个’/api/todo’的POST请求</li><li>对响应作断言：HTTP返回码是400</li><li>对响应作断言：Content-type的值是”application/json”，并且字符集是”UTF-8”</li><li>检查请求执行过程中mock的<code>TodoService</code>实例未执行任何方法</li></ol><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.web.WebAppConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.containsInAnyOrder;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.hasSize;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(classes = &#123;TestContext.class, WebAppContext.class&#125;)</div><div class="line"><span class="meta">@WebAppConfiguration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> TodoService todoServiceMock;</div><div class="line"> </div><div class="line">    <span class="comment">//Add WebApplicationContext field here.</span></div><div class="line"> </div><div class="line">    <span class="comment">//The setUp() method is omitted.</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> </span></div><div class="line">    <span class="title">add_TitleAndDescriptionAreTooLong_ShouldReturnValidationErrorsForTitleAndDescription</span><span class="params">()</span></div><div class="line">    <span class="keyword">throws</span> Exception &#123;</div><div class="line">        String title = TestUtil.createStringWithLength(<span class="number">101</span>);</div><div class="line">        String description = TestUtil.createStringWithLength(<span class="number">501</span>);</div><div class="line"> </div><div class="line">        TodoDTO dto = <span class="keyword">new</span> TodoDTOBuilder()</div><div class="line">                .description(description)</div><div class="line">                .title(title)</div><div class="line">                .build();</div><div class="line"> </div><div class="line">        mockMvc.perform(post(<span class="string">"/api/todo"</span>)</div><div class="line">                .contentType(TestUtil.APPLICATION_JSON_UTF8)</div><div class="line">                .content(TestUtil.convertObjectToJsonBytes(dto))</div><div class="line">        )</div><div class="line">                .andExpect(status().isBadRequest())</div><div class="line">                .andExpect(content().contentType(TestUtil.APPLICATION_JSON_UTF8))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$.fieldErrors"</span>, hasSize(<span class="number">2</span>)))</div><div class="line">                .andExpect(</div><div class="line">                    jsonPath(</div><div class="line">                        <span class="string">"$.fieldErrors[*].path"</span>, containsInAnyOrder(<span class="string">"title"</span>, <span class="string">"description"</span>)</div><div class="line">                    )</div><div class="line">                )</div><div class="line">                .andExpect(jsonPath(<span class="string">"$.fieldErrors[*].message"</span>, containsInAnyOrder(</div><div class="line">                        <span class="string">"The maximum length of the description is 500 characters."</span>,</div><div class="line">                        <span class="string">"The maximum length of the title is 100 characters."</span></div><div class="line">                )));</div><div class="line"> </div><div class="line">        verifyZeroInteractions(todoServiceMock);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们使用到了<code>TestUtil</code>类，再一次地将该类的代码贴出来以供参考。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonInclude;</div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</div><div class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.nio.charset.Charset;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUtil</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MediaType APPLICATION_JSON_UTF8 = </div><div class="line">        <span class="keyword">new</span> MediaType(</div><div class="line">            MediaType.APPLICATION_JSON.getType(), </div><div class="line">            MediaType.APPLICATION_JSON.getSubtype(),</div><div class="line">            Charset.forName(<span class="string">"utf8"</span>)</div><div class="line">        );</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] convertObjectToJsonBytes(Object object) <span class="keyword">throws</span> IOException &#123;</div><div class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</div><div class="line">        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);</div><div class="line">        <span class="keyword">return</span> mapper.writeValueAsBytes(object);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createStringWithLength</span><span class="params">(<span class="keyword">int</span> length)</span> </span>&#123;</div><div class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</div><div class="line"> </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; length; index++) &#123;</div><div class="line">            builder.append(<span class="string">"a"</span>);</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> builder.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="测试用例：Todo项POST请求成功"><a href="#测试用例：Todo项POST请求成功" class="headerlink" title="测试用例：Todo项POST请求成功"></a>测试用例：<code>Todo</code>项POST请求成功</h3><p>该测试用例主要工作如下：</p><ol><li>准备测试数据</li><li>配置mock的<code>TodoService</code>实例在<code>add()</code>方法被调用的时候返回一个<code>Todo</code>项</li><li>执行一个’/todo/add’的POST请求</li><li>对响应作断言：HTTP返回码是200</li><li>对响应作断言：Content-type的值是”application/json”，并且字符集是”UTF-8”</li><li>对响应作断言：使用jsonpath对结果作验证</li></ol><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.mockito.ArgumentCaptor;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.web.WebAppConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> junit.framework.Assert.assertNull;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.is;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertThat;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(classes = &#123;TestContext.class, WebAppContext.class&#125;)</div><div class="line"><span class="meta">@WebAppConfiguration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> TodoService todoServiceMock;</div><div class="line"> </div><div class="line">    <span class="comment">//Add WebApplicationContext field here.</span></div><div class="line"> </div><div class="line">    <span class="comment">//The setUp() method is omitted.</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> </span></div><div class="line">    <span class="title">add_NewTodoEntry_ShouldAddTodoEntryAndReturnAddedEntry</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</div><div class="line">        TodoDTO dto = <span class="keyword">new</span> TodoDTOBuilder()</div><div class="line">                .description(<span class="string">"description"</span>)</div><div class="line">                .title(<span class="string">"title"</span>)</div><div class="line">                .build();</div><div class="line"> </div><div class="line">        Todo added = <span class="keyword">new</span> TodoBuilder()</div><div class="line">                .id(<span class="number">1L</span>)</div><div class="line">                .description(<span class="string">"description"</span>)</div><div class="line">                .title(<span class="string">"title"</span>)</div><div class="line">                .build();</div><div class="line"> </div><div class="line">        when(todoServiceMock.add(any(TodoDTO.class))).thenReturn(added);</div><div class="line"> </div><div class="line">        mockMvc.perform(post(<span class="string">"/api/todo"</span>)</div><div class="line">                .contentType(TestUtil.APPLICATION_JSON_UTF8)</div><div class="line">                .content(TestUtil.convertObjectToJsonBytes(dto))</div><div class="line">        )</div><div class="line">                .andExpect(status().isOk())</div><div class="line">                .andExpect(content().contentType(TestUtil.APPLICATION_JSON_UTF8))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$.id"</span>, is(<span class="number">1</span>)))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$.description"</span>, is(<span class="string">"description"</span>)))</div><div class="line">                .andExpect(jsonPath(<span class="string">"$.title"</span>, is(<span class="string">"title"</span>)));</div><div class="line"> </div><div class="line">        ArgumentCaptor&lt;TodoDTO&gt; dtoCaptor = ArgumentCaptor.forClass(TodoDTO.class);</div><div class="line">        verify(todoServiceMock, times(<span class="number">1</span>)).add(dtoCaptor.capture());</div><div class="line">        verifyNoMoreInteractions(todoServiceMock);</div><div class="line"> </div><div class="line">        TodoDTO dtoArgument = dtoCaptor.getValue();</div><div class="line">        assertNull(dtoArgument.getId());</div><div class="line">        assertThat(dtoArgument.getDescription(), is(<span class="string">"description"</span>));</div><div class="line">        assertThat(dtoArgument.getTitle(), is(<span class="string">"title"</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文主要介绍了：</p><ul><li>如何为REST接口的GET请求编写单元测试</li><li>如何为REST接口的POST请求编写单元测试</li><li>如何将对象序列化为json并用POST请求发送出去</li><li>如何使用JsonPath对返回的结果作断言</li></ul><p>到此，整个使用Spring MVC Test来进行单元测试的系列就结束了，希望所有人能有所收获。</p><p>本文使用的代码已经放在了 <a href="https://github.com/pkainulainen/spring-mvc-test-examples/tree/master/controllers-unittest" target="_blank" rel="external">Github</a> 上，请自行查阅。</p><p>翻译完了单元测试的三篇文章，感觉心好累。不得不佩服国外的同行，研究一个东西就研究得很透，分析的很细。本系列不仅仅是一个测试的教程，而且可以作为Spring MVC的开发入门系列。</p><p>对作者致以崇高的敬意，和感谢！</p>]]></content>
      
        <categories>
            
            <category> Spring MVC Testing </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring MVC </tag>
            
            <tag> Test </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring MVC Unit Testing - Normal Controllers]]></title>
      <url>http://www.wbprime.me/2016/04/09/spring-mvc-testing-unit-testing-normal-controllers/</url>
      <content type="html"><![CDATA[<p>本文是 <a href="/2016/04/09/spring-mvc-testing-content/">Spring MVC Testing</a> 单元测试系列的第2篇，原文链接：<a href="http://www.petrikainulainen.net/programming/spring-framework/unit-testing-of-spring-mvc-controllers-normal-controllers/" target="_blank" rel="external">Unit Testing of Spring MVC Controllers: “Normal” Controllers</a>。</p><p>本系列的第1部分讲述了使用Spring MVC Test应如何进行单元测试的<a href="/2016/04/09/spring-mvc-testing-unit-testing-configuration/">配置</a>，现在可以开始实战一下如何对标准controller编写单元测试。</p><p>首先需要明确一下。</p><blockquote><p>何为标准controller？</p></blockquote><p>注意：原文标准是加了双引号的（”normal”）</p><p>我们称之为标准controller的Controller，是渲染view或者处理form提交请求的Controller。（与之相对的是Rest Controller）。</p><p>OK，现在我们进入正文。</p><h1 id="通过Maven获取依赖"><a href="#通过Maven获取依赖" class="headerlink" title="通过Maven获取依赖"></a>通过Maven获取依赖</h1><p>本系列用到的依赖如下：</p><ul><li>Jackson 2.2.1 (core and databind modules)</li><li>Hamcrest 1.3</li><li>JUnit 4.11</li><li>Mockito 1.9.5</li><li>Spring Test 3.2.3.RELEASE</li></ul><p>生成的pom.xml文件的片段如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hamcrest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hamcrest-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hamcrest-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hamcrest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mockito<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mockito-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p>然后可以开始编写测试用例了。</p><h1 id="测试用例类"><a href="#测试用例类" class="headerlink" title="测试用例类"></a>测试用例类</h1><p>对controller方法进行单元测试，原则上有以下两个步骤：</p><ol><li>首先向目标controller发送一个请求</li><li>然后检验收到的响应是否符合预期</li></ol><p>Spring MVC Test模块提供了一些工具简化我们的工作，这些类主要是：</p><ul><li><a href="http://docs.spring.io/spring/docs/3.2.x/javadoc-api/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.html" target="_blank" rel="external"><code>MockMvcRequestBuilders</code></a> 类可以用来简化创建请求的工作</li><li><a href="http://docs.spring.io/spring/docs/3.2.x/javadoc-api/org/springframework/test/web/servlet/MockMvc.html" target="_blank" rel="external"><code>MockMvc</code></a> 类可以用来执行请求并获取响应</li><li><a href="http://docs.spring.io/spring/docs/3.2.x/javadoc-api/org/springframework/test/web/servlet/result/MockMvcResultMatchers.html" target="_blank" rel="external"><code>MockMvcResultMatchers</code></a> 类可以用来辅助对响应作校验</li></ul><p>为了演示完整的流程，我们将编写单元测试测试3个controller方法：</p><ol><li>第一个主要是渲染显示<code>Todo</code>项列表页面的接口</li><li>第二个主要是渲染显示单个<code>Todo</code>项详情的接口</li><li>第三个主要是处理添加<code>Todo</code>项的表单请求的接口</li></ol><h2 id="Todo项列表页接口"><a href="#Todo项列表页接口" class="headerlink" title="Todo项列表页接口"></a><code>Todo</code>项列表页接口</h2><p>首先看一下该接口的实现代码。</p><h3 id="预期的实现"><a href="#预期的实现" class="headerlink" title="预期的实现"></a>预期的实现</h3><p>预期的接口应该做以下几件事：</p><ol><li>接收到”/“上的GET请求，开始处理流程</li><li>调用<code>TodoService</code>的<code>findAll()</code>方法获取到所有的<code>Todo</code>对象的列表</li><li>将获取到的列表加入到model中</li><li>返回对应的view名称</li></ol><p><code>TodoController</code>类内的相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.ui.Model;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"> </div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoController</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TodoService service;</div><div class="line">     </div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">(Model model)</span> </span>&#123;</div><div class="line">        List&lt;Todo&gt; models = service.findAll();</div><div class="line">        model.addAttribute(<span class="string">"todos"</span>, models);</div><div class="line">        <span class="keyword">return</span> <span class="string">"todo/list"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>接下来可以开始编写测试用例了。</p><h3 id="测试用例：Todo列表页接口"><a href="#测试用例：Todo列表页接口" class="headerlink" title="测试用例：Todo列表页接口"></a>测试用例：<code>Todo</code>列表页接口</h3><p>该测试用例主要工作如下：</p><ol><li>准备测试数据</li><li>配置mock的<code>TodoService</code>实例在<code>findAll()</code>方法被调用的时候返回准备的数据</li><li>执行一个’/‘的GET请求</li><li>对响应作断言：HTTP返回码是200</li><li>对响应作断言：view的名称是”todo/list”</li><li>对响应作断言：请求拿到的是’/WEB-INF/jsp/todo/list.jsp’页面</li><li>对响应作断言：model里面的元素个数是2</li><li>对响应作断言：model里面的元素是正确的</li><li>检查请求执行过程中mock的<code>TodoService</code>实例执行了<code>findAll()</code>方法有且仅1次</li><li>检查请求执行过程中mock的<code>TodoService</code>实例未执行其他方法</li></ol><p>相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.junit.Before;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.mockito.Mockito;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.web.WebAppConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;</div><div class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.is;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(classes = &#123;TestContext.class, WebAppContext.class&#125;)</div><div class="line"><span class="meta">@WebAppConfiguration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> TodoService todoServiceMock;</div><div class="line"> </div><div class="line">    <span class="comment">//Add WebApplicationContext field here</span></div><div class="line"> </div><div class="line">    <span class="comment">//The setUp() method is omitted.</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> </span></div><div class="line">    <span class="title">findAll_ShouldAddTodoEntriesToModelAndRenderTodoListView</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</div><div class="line">        Todo first = <span class="keyword">new</span> TodoBuilder()</div><div class="line">                .id(<span class="number">1L</span>)</div><div class="line">                .description(<span class="string">"Lorem ipsum"</span>)</div><div class="line">                .title(<span class="string">"Foo"</span>)</div><div class="line">                .build();</div><div class="line"> </div><div class="line">        Todo second = <span class="keyword">new</span> TodoBuilder()</div><div class="line">                .id(<span class="number">2L</span>)</div><div class="line">                .description(<span class="string">"Lorem ipsum"</span>)</div><div class="line">                .title(<span class="string">"Bar"</span>)</div><div class="line">                .build();</div><div class="line"> </div><div class="line">        when(todoServiceMock.findAll()).thenReturn(Arrays.asList(first, second));</div><div class="line"> </div><div class="line">        mockMvc.perform(get(<span class="string">"/"</span>))</div><div class="line">                .andExpect(status().isOk())</div><div class="line">                .andExpect(view().name(<span class="string">"todo/list"</span>))</div><div class="line">                .andExpect(forwardedUrl(<span class="string">"/WEB-INF/jsp/todo/list.jsp"</span>))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todos"</span>, hasSize(<span class="number">2</span>)))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todos"</span>, hasItem(</div><div class="line">                        allOf(</div><div class="line">                                hasProperty(<span class="string">"id"</span>, is(<span class="number">1L</span>)),</div><div class="line">                                hasProperty(<span class="string">"description"</span>, is(<span class="string">"Lorem ipsum"</span>)),</div><div class="line">                                hasProperty(<span class="string">"title"</span>, is(<span class="string">"Foo"</span>))</div><div class="line">                        )</div><div class="line">                )))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todos"</span>, hasItem(</div><div class="line">                        allOf(</div><div class="line">                                hasProperty(<span class="string">"id"</span>, is(<span class="number">2L</span>)),</div><div class="line">                                hasProperty(<span class="string">"description"</span>, is(<span class="string">"Lorem ipsum"</span>)),</div><div class="line">                                hasProperty(<span class="string">"title"</span>, is(<span class="string">"Bar"</span>))</div><div class="line">                        )</div><div class="line">                )));</div><div class="line"> </div><div class="line">        verify(todoServiceMock, times(<span class="number">1</span>)).findAll();</div><div class="line">        verifyNoMoreInteractions(todoServiceMock);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Todo项详情页接口"><a href="#Todo项详情页接口" class="headerlink" title="Todo项详情页接口"></a><code>Todo</code>项详情页接口</h2><p>首先看一下该接口的实现代码。</p><h3 id="预期的实现-1"><a href="#预期的实现-1" class="headerlink" title="预期的实现"></a>预期的实现</h3><p>预期的接口应该做以下几件事：</p><ol><li>接收到”/todo/{id}”上的GET请求，{id}是<code>Todo</code>的id值，开始处理流程</li><li>调用<code>TodoService</code>的<code>findById()</code>方法获取到目标<code>Todo</code>对象</li><li>将获取到的<code>Todo</code>项加入到model中</li><li>返回对应的view名称</li></ol><p><code>TodoController</code>类内的相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/todo/&#123;id&#125;"</span>, method = RequestMethod.GET)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id, Model model) <span class="keyword">throws</span> TodoNotFoundException </span>&#123;</div><div class="line">    Todo found = service.findById(id);</div><div class="line">    model.addAttribute(<span class="string">"todo"</span>, found);</div><div class="line">    <span class="keyword">return</span> <span class="string">"todo/view"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>如果抛出了<code>TodoNotFoundException</code>，Spring Mvc是怎么处理的呢？</p></blockquote><p>在本系列的前一篇中，我们在webapp的配置中注册了一个<code>exceptionResolver()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> SimpleMappingExceptionResolver <span class="title">exceptionResolver</span><span class="params">()</span> </span>&#123;</div><div class="line">    SimpleMappingExceptionResolver exceptionResolver = <span class="keyword">new</span> SimpleMappingExceptionResolver();</div><div class="line"> </div><div class="line">    Properties exceptionMappings = <span class="keyword">new</span> Properties();</div><div class="line"> </div><div class="line">    exceptionMappings.put(</div><div class="line">        <span class="string">"net.petrikainulainen.spring.testmvc.todo.exception.TodoNotFoundException"</span>,</div><div class="line">        <span class="string">"error/404"</span></div><div class="line">    );</div><div class="line">    exceptionMappings.put(<span class="string">"java.lang.Exception"</span>, <span class="string">"error/error"</span>);</div><div class="line">    exceptionMappings.put(<span class="string">"java.lang.RuntimeException"</span>, <span class="string">"error/error"</span>);</div><div class="line"> </div><div class="line">    exceptionResolver.setExceptionMappings(exceptionMappings);</div><div class="line"> </div><div class="line">    Properties statusCodes = <span class="keyword">new</span> Properties();</div><div class="line"> </div><div class="line">    statusCodes.put(<span class="string">"error/404"</span>, <span class="string">"404"</span>);</div><div class="line">    statusCodes.put(<span class="string">"error/error"</span>, <span class="string">"500"</span>);</div><div class="line"> </div><div class="line">    exceptionResolver.setStatusCodes(statusCodes);</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> exceptionResolver;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>所以，当抛出<code>TodoNotFoundException</code>异常时，会返回’error/404’的页面。</p><p>所以我们的测试用例要测试两种情况：</p><ul><li>接口找到了指定的<code>Todo</code>项</li><li>接口没有找到指定的<code>Todo</code>项</li></ul><p>接下来可以开始编写测试用例了。</p><h3 id="测试用例：Todo项未找到"><a href="#测试用例：Todo项未找到" class="headerlink" title="测试用例：Todo项未找到"></a>测试用例：<code>Todo</code>项未找到</h3><p>该测试用例主要工作如下：</p><ol><li>配置mock的<code>TodoService</code>实例在<code>findById()</code>方法被调用的时候抛出<code>TodoNotFoundException</code></li><li>执行一个’/todo/1’的GET请求</li><li>对响应作断言：HTTP返回码是404</li><li>对响应作断言：view的名称是”error/404”</li><li>对响应作断言：请求拿到的是’/WEB-INF/jsp/error/404.jsp’页面</li><li>检查请求执行过程中mock的<code>TodoService</code>实例执行了<code>findById()</code>方法有且仅1次</li><li>检查请求执行过程中mock的<code>TodoService</code>实例未执行其他方法</li></ol><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.junit.Before;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.mockito.Mockito;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.web.WebAppConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;</div><div class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(classes = &#123;TestContext.class, WebAppContext.class&#125;)</div><div class="line"><span class="meta">@WebAppConfiguration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> TodoService todoServiceMock;</div><div class="line"> </div><div class="line">    <span class="comment">//Add WebApplicationContext field here</span></div><div class="line"> </div><div class="line">    <span class="comment">//The setUp() method is omitted.</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findById_TodoEntryNotFound_ShouldRender404View</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        when(todoServiceMock.findById(<span class="number">1L</span>)).thenThrow(<span class="keyword">new</span> TodoNotFoundException(<span class="string">""</span>));</div><div class="line"> </div><div class="line">        mockMvc.perform(get(<span class="string">"/todo/&#123;id&#125;"</span>, <span class="number">1L</span>))</div><div class="line">                .andExpect(status().isNotFound())</div><div class="line">                .andExpect(view().name(<span class="string">"error/404"</span>))</div><div class="line">                .andExpect(forwardedUrl(<span class="string">"/WEB-INF/jsp/error/404.jsp"</span>));</div><div class="line"> </div><div class="line">        verify(todoServiceMock, times(<span class="number">1</span>)).findById(<span class="number">1L</span>);</div><div class="line">        verifyZeroInteractions(todoServiceMock);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="测试用例：Todo项被找到"><a href="#测试用例：Todo项被找到" class="headerlink" title="测试用例：Todo项被找到"></a>测试用例：<code>Todo</code>项被找到</h3><p>该测试用例主要工作如下：</p><ol><li>准备测试数据</li><li>配置mock的<code>TodoService</code>实例在<code>findById()</code>方法被调用的时候返回准备的数据</li><li>执行一个’/todo/1’的GET请求</li><li>对响应作断言：HTTP返回码是200</li><li>对响应作断言：view的名称是”todo/view”</li><li>对响应作断言：请求拿到的是’/WEB-INF/jsp/todo/view.jsp’页面</li><li>对响应作断言：model里面的元素是正确的</li><li>检查请求执行过程中mock的<code>TodoService</code>实例执行了<code>findById()</code>方法有且仅1次</li><li>检查请求执行过程中mock的<code>TodoService</code>实例未执行其他方法</li></ol><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.junit.Before;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.mockito.Mockito;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.web.WebAppConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;</div><div class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.hasProperty;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.is;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(classes = &#123;TestContext.class, WebAppContext.class&#125;)</div><div class="line"><span class="meta">@WebAppConfiguration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> TodoService todoServiceMock;</div><div class="line"> </div><div class="line">    <span class="comment">//Add WebApplicationContext field here</span></div><div class="line"> </div><div class="line">    <span class="comment">//The setUp() method is omitted.</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> </span></div><div class="line">    <span class="title">findById_TodoEntryFound_ShouldAddTodoEntryToModelAndRenderViewTodoEntryView</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</div><div class="line">        Todo found = <span class="keyword">new</span> TodoBuilder()</div><div class="line">                .id(<span class="number">1L</span>)</div><div class="line">                .description(<span class="string">"Lorem ipsum"</span>)</div><div class="line">                .title(<span class="string">"Foo"</span>)</div><div class="line">                .build();</div><div class="line"> </div><div class="line">        when(todoServiceMock.findById(<span class="number">1L</span>)).thenReturn(found);</div><div class="line"> </div><div class="line">        mockMvc.perform(get(<span class="string">"/todo/&#123;id&#125;"</span>, <span class="number">1L</span>))</div><div class="line">                .andExpect(status().isOk())</div><div class="line">                .andExpect(view().name(<span class="string">"todo/view"</span>))</div><div class="line">                .andExpect(forwardedUrl(<span class="string">"/WEB-INF/jsp/todo/view.jsp"</span>))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todo"</span>, hasProperty(<span class="string">"id"</span>, is(<span class="number">1L</span>))))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todo"</span>, hasProperty(<span class="string">"description"</span>, is(<span class="string">"Lorem ipsum"</span>))))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todo"</span>, hasProperty(<span class="string">"title"</span>, is(<span class="string">"Foo"</span>))));</div><div class="line"> </div><div class="line">        verify(todoServiceMock, times(<span class="number">1</span>)).findById(<span class="number">1L</span>);</div><div class="line">        verifyNoMoreInteractions(todoServiceMock);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Todo项创建表单请求接口"><a href="#Todo项创建表单请求接口" class="headerlink" title="Todo项创建表单请求接口"></a><code>Todo</code>项创建表单请求接口</h2><p>首先看一下该接口的实现代码。</p><h3 id="预期的实现-2"><a href="#预期的实现-2" class="headerlink" title="预期的实现"></a>预期的实现</h3><p>预期的接口应该做以下几件事：</p><ol><li>接收到”/todo/add”上的POST请求，开始处理流程</li><li>检测表单是否有错误</li><li>调用<code>TodoService</code>的<code>add()</code>方法添加指定的<code>Todo</code>项</li><li>将需要的信息加入到model中</li><li>返回重定向的view名称</li></ol><p><code>TodoController</code>类内的相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.context.MessageSource;</div><div class="line"><span class="keyword">import</span> org.springframework.context.i18n.LocaleContextHolder;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.support.RedirectAttributes;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.validation.Valid;</div><div class="line"><span class="keyword">import</span> java.util.Locale;</div><div class="line"> </div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@SessionAttributes</span>(<span class="string">"todo"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoController</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TodoService service;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MessageSource messageSource;</div><div class="line"> </div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/todo/add"</span>, method = RequestMethod.POST)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(</span></span></div><div class="line">        @Valid @ModelAttribute(<span class="string">"todo"</span>) TodoDTO dto,</div><div class="line">        BindingResult result,</div><div class="line">        RedirectAttributes attributes</div><div class="line">    ) &#123;</div><div class="line">        <span class="keyword">if</span> (result.hasErrors()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"todo/add"</span>;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        Todo added = service.add(dto);</div><div class="line"> </div><div class="line">        addFeedbackMessage(attributes, <span class="string">"feedback.message.todo.added"</span>, added.getTitle());</div><div class="line">        attributes.addAttribute(<span class="string">"id"</span>, added.getId());</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> createRedirectViewPath(<span class="string">"todo/view"</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addFeedbackMessage</span><span class="params">(</span></span></div><div class="line">        RedirectAttributes attributes,</div><div class="line">        String messageCode,</div><div class="line">        Object... messageParameters</div><div class="line">    ) &#123;</div><div class="line">        String localizedFeedbackMessage = getMessage(messageCode, messageParameters);</div><div class="line">        attributes.addFlashAttribute(<span class="string">"feedbackMessage"</span>, localizedFeedbackMessage);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getMessage</span><span class="params">(String messageCode, Object... messageParameters)</span> </span>&#123;</div><div class="line">        Locale current = LocaleContextHolder.getLocale();</div><div class="line">        <span class="keyword">return</span> messageSource.getMessage(messageCode, messageParameters, current);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">createRedirectViewPath</span><span class="params">(String requestMapping)</span> </span>&#123;</div><div class="line">        StringBuilder redirectViewPath = <span class="keyword">new</span> StringBuilder();</div><div class="line">        redirectViewPath.append(<span class="string">"redirect:"</span>);</div><div class="line">        redirectViewPath.append(requestMapping);</div><div class="line">        <span class="keyword">return</span> redirectViewPath.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们使用了<code>TodoDTO</code>类来封装<code>Todo</code>项的创建信息，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Length;</div><div class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.NotEmpty;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoDTO</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line"> </div><div class="line">    <span class="meta">@Length</span>(max = <span class="number">500</span>)</div><div class="line">    <span class="keyword">private</span> String description;</div><div class="line"> </div><div class="line">    <span class="meta">@NotEmpty</span></div><div class="line">    <span class="meta">@Length</span>(max = <span class="number">100</span>)</div><div class="line">    <span class="keyword">private</span> String title;</div><div class="line"> </div><div class="line">    <span class="comment">//Constructor and other methods are omitted.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>TodoDTO</code>类里面有一些校验规则，如果不满足规则，Spring在接口的<code>BindingResult</code>参数里面会显示错误。</p><p>所以，我们的测试用例需要考虑两种情况：</p><ul><li>参数校验通过</li><li>参数校验没有通过</li></ul><p>接下来可以开始编写测试用例了。</p><h3 id="测试用例：TodoDTO参数校验未通过"><a href="#测试用例：TodoDTO参数校验未通过" class="headerlink" title="测试用例：TodoDTO参数校验未通过"></a>测试用例：<code>TodoDTO</code>参数校验未通过</h3><p>该测试用例主要工作如下：</p><ol><li>创建一个不符合验证规则的title</li><li>创建一个不符合验证规则的description</li><li>执行一个’/todo/add’的POST请求</li><li>对响应作断言：HTTP返回码是200</li><li>对响应作断言：view的名称是”todo/add”</li><li>对响应作断言：请求拿到的是’/WEB-INF/jsp/todo/add.jsp’页面</li></ol><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.junit.Before;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.mockito.Mockito;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.web.WebAppConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;</div><div class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.hasProperty;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.is;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.nullValue;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(classes = &#123;TestContext.class, WebAppContext.class&#125;)</div><div class="line"><span class="meta">@WebAppConfiguration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> TodoService todoServiceMock;</div><div class="line"> </div><div class="line">    <span class="comment">//Add WebApplicationContext field here</span></div><div class="line"> </div><div class="line">    <span class="comment">//The setUp() method is omitted.</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> </span></div><div class="line">    <span class="title">add_DescriptionAndTitleAreTooLong_ShouldRenderFormViewAndReturnValidationErrorsForTitleAndDescription</span><span class="params">()</span></div><div class="line">    <span class="keyword">throws</span> Exception &#123;</div><div class="line">        String title = TestUtil.createStringWithLength(<span class="number">101</span>);</div><div class="line">        String description = TestUtil.createStringWithLength(<span class="number">501</span>);</div><div class="line"> </div><div class="line">        mockMvc.perform(post(<span class="string">"/todo/add"</span>)</div><div class="line">                .contentType(MediaType.APPLICATION_FORM_URLENCODED)</div><div class="line">                .param(<span class="string">"description"</span>, description)</div><div class="line">                .param(<span class="string">"title"</span>, title)</div><div class="line">                .sessionAttr(<span class="string">"todo"</span>, <span class="keyword">new</span> TodoDTO())</div><div class="line">        )</div><div class="line">                .andExpect(status().isOk())</div><div class="line">                .andExpect(view().name(<span class="string">"todo/add"</span>))</div><div class="line">                .andExpect(forwardedUrl(<span class="string">"/WEB-INF/jsp/todo/add.jsp"</span>))</div><div class="line">                .andExpect(model().attributeHasFieldErrors(<span class="string">"todo"</span>, <span class="string">"title"</span>))</div><div class="line">                .andExpect(model().attributeHasFieldErrors(<span class="string">"todo"</span>, <span class="string">"description"</span>))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todo"</span>, hasProperty(<span class="string">"id"</span>, nullValue())))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todo"</span>, hasProperty(<span class="string">"description"</span>, is(description))))</div><div class="line">                .andExpect(model().attribute(<span class="string">"todo"</span>, hasProperty(<span class="string">"title"</span>, is(title))));</div><div class="line"> </div><div class="line">        verifyZeroInteractions(todoServiceMock);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>为了简化代码，我们新建了一个新的类<code>TestUtil</code>，用来生成固定长度的字符串。<code>TestUtil</code>类代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonInclude;</div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUtil</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createStringWithLength</span><span class="params">(<span class="keyword">int</span> length)</span> </span>&#123;</div><div class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</div><div class="line"> </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; length; index++) &#123;</div><div class="line">            builder.append(<span class="string">"a"</span>);</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> builder.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="测试用例：TodoDTO参数校验通过"><a href="#测试用例：TodoDTO参数校验通过" class="headerlink" title="测试用例：TodoDTO参数校验通过"></a>测试用例：<code>TodoDTO</code>参数校验通过</h3><p>该测试用例主要工作如下：</p><ol><li>准备测试数据</li><li>配置mock的<code>TodoService</code>实例在<code>add()</code>方法被调用的时候返回一个<code>Todo</code>项</li><li>执行一个’/todo/add’的POST请求</li><li>对响应作断言：HTTP返回码是302</li><li>对响应作断言：view的名称是”redirect:todo/{id}”</li><li>对响应作断言：请求被重定向到”todo/1”</li><li>检查请求执行过程中mock的<code>TodoService</code>实例执行了<code>add()</code>方法有且仅1次</li><li>检查请求执行过程中mock的<code>TodoService</code>实例未执行其他方法</li></ol><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.junit.Before;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.mockito.ArgumentCaptor;</div><div class="line"><span class="keyword">import</span> org.mockito.Mockito;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.web.WebAppConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;</div><div class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.is;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertNull;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertThat;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Matchers.isA;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(classes = &#123;TestContext.class, WebAppContext.class&#125;)</div><div class="line"><span class="meta">@WebAppConfiguration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> TodoService todoServiceMock;</div><div class="line"> </div><div class="line">    <span class="comment">//Add WebApplicationContext field here</span></div><div class="line"> </div><div class="line">    <span class="comment">//The setUp() method is omitted.</span></div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add_NewTodoEntry_ShouldAddTodoEntryAndRenderViewTodoEntryView</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Todo added = <span class="keyword">new</span> TodoBuilder()</div><div class="line">                .id(<span class="number">1L</span>)</div><div class="line">                .description(<span class="string">"description"</span>)</div><div class="line">                .title(<span class="string">"title"</span>)</div><div class="line">                .build();</div><div class="line"> </div><div class="line">        when(todoServiceMock.add(isA(TodoDTO.class))).thenReturn(added);</div><div class="line"> </div><div class="line">        mockMvc.perform(post(<span class="string">"/todo/add"</span>)</div><div class="line">                .contentType(MediaType.APPLICATION_FORM_URLENCODED)</div><div class="line">                .param(<span class="string">"description"</span>, <span class="string">"description"</span>)</div><div class="line">                .param(<span class="string">"title"</span>, <span class="string">"title"</span>)</div><div class="line">                .sessionAttr(<span class="string">"todo"</span>, <span class="keyword">new</span> TodoDTO())</div><div class="line">        )</div><div class="line">                .andExpect(status().isMovedTemporarily())</div><div class="line">                .andExpect(view().name(<span class="string">"redirect:todo/&#123;id&#125;"</span>))</div><div class="line">                .andExpect(redirectedUrl(<span class="string">"/todo/1"</span>))</div><div class="line">                .andExpect(model().attribute(<span class="string">"id"</span>, is(<span class="string">"1"</span>)))</div><div class="line">                .andExpect(flash().attribute(<span class="string">"feedbackMessage"</span>, is(<span class="string">"Todo entry: title was added."</span>)));</div><div class="line"> </div><div class="line">        ArgumentCaptor&lt;TodoDTO&gt; formObjectArgument = ArgumentCaptor.forClass(TodoDTO.class);</div><div class="line">        verify(todoServiceMock, times(<span class="number">1</span>)).add(formObjectArgument.capture());</div><div class="line">        verifyNoMoreInteractions(todoServiceMock);</div><div class="line"> </div><div class="line">        TodoDTO formObject = formObjectArgument.getValue();</div><div class="line"> </div><div class="line">        assertThat(formObject.getDescription(), is(<span class="string">"description"</span>));</div><div class="line">        assertNull(formObject.getId());</div><div class="line">        assertThat(formObject.getTitle(), is(<span class="string">"title"</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文主要介绍了如何使用Spring MVC Test来对标准controller进行单元测试，主要内容如下：</p><ul><li>如何创建一个请求</li><li>如何对请求的响应作断言</li><li>如何单元测试一个渲染view的接口</li><li>如何单元测试一个处理表单请求的接口</li></ul><p>下一篇是介绍<a href="/2016/04/09/spring-mvc-testing-unit-testing-rest-api/">Spring MVC Unit Testing - REST API</a>。</p><p>本文使用的代码已经放在了 <a href="https://github.com/pkainulainen/spring-mvc-test-examples/tree/master/controllers-unittest" target="_blank" rel="external">Github</a> 上，请自行查阅。</p>]]></content>
      
        <categories>
            
            <category> Spring MVC Testing </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring MVC </tag>
            
            <tag> Test </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring MVC Unit Testing - Configuration]]></title>
      <url>http://www.wbprime.me/2016/04/09/spring-mvc-testing-unit-testing-configuration/</url>
      <content type="html"><![CDATA[<p>本文是 <a href="/2016/04/09/spring-mvc-testing-content/">Spring MVC Testing</a> 单元测试系列的第1篇，原文链接：<a href="http://www.petrikainulainen.net/programming/spring-framework/unit-testing-of-spring-mvc-controllers-configuration/" target="_blank" rel="external">Unit Testing of Spring MVC Controllers: Configuration</a>。</p><p>一直以来，为Spring MVC的Controller写单元测试的工作既简单又问题多多。简单体现在单元测试可以很简单地写个测试用例调用一下目标Controller的方法；问题在于这种单元测试完全没有用（不是HTTP的请求），比如说，这种单元测试的方法没办法测试请求映射、参数验证和异常映射等。</p><p>幸运的是，从Spring 3.2开始，我们可以使用<a href="http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/htmlsingle/#new-in-3.2-spring-mvc-test" target="_blank" rel="external">Spring MVC Test Framework</a>这一强大的工具通过DispatcherServlet来仿照HTTP请求的方式来单元测试Controller的方法。</p><p>本文主要介绍如何配置Spring使得可以单元测试Spring MVC Controllers。</p><p>下面进入正题。</p><h1 id="通过Maven获取依赖"><a href="#通过Maven获取依赖" class="headerlink" title="通过Maven获取依赖"></a>通过Maven获取依赖</h1><p>本系列用到的依赖如下：</p><ul><li>JUnit 4.11</li><li>Mockito Core 1.9.5</li><li>Spring Test 3.2.3.RELEASE</li></ul><p>生成的<code>pom.xml</code>文件的片段如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mockito<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mockito-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p>然后，我们进一步去看一下示例程序。</p><h1 id="示例程序的结构"><a href="#示例程序的结构" class="headerlink" title="示例程序的结构"></a>示例程序的结构</h1><p>本教程的示例程序提供用于访问todo项的增删改查（CRUD）入口。为了更好地理解测试配置，首先看一下需要测试的controller类。</p><p>到目前为止，我们需要回答以下两个问题：</p><ul><li>待测试的controller类有哪些依赖</li><li>这些以来是如何注入待测试的controller类</li></ul><p>我们可以创建的<code>TodoController</code>目标类的代码中去查找答案。相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.context.MessageSource;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"> </div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoController</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TodoService service;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MessageSource messageSource;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TodoController</span><span class="params">(MessageSource messageSource, TodoService service)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.messageSource = messageSource;</div><div class="line">    <span class="keyword">this</span>.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//Other methods are omitted.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>从代码中可以看出，<code>TodoController</code>类依赖于<code>TodoService</code>类和<code>MessageSource</code>类，并且使用的是构造器注入。</p><p>好了，到目前我们已经知道了需要的信息，下一步是去了解上下文配置信息。</p><h1 id="程序上下文配置"><a href="#程序上下文配置" class="headerlink" title="程序上下文配置"></a>程序上下文配置</h1><p>为程序在生产环境和测试分别准备不同的上下文配置是不合算的，除了增加额外的工作量之外，还将导致二者配置不一致的问题，比如我们修改了生产环境的配置但是忘了修改测试配置的话。</p><p>所以我们将配置上下文按功能片段进行拆分，以使生产环境和测试环境可以做各自的自定义配置，还能最大程度的共用配置。</p><p>我们将程序配置拆分为3个部分。</p><ol><li>第一部分称之为主配置，主要是配置webapp相关的信息</li><li>第二部分称之为Web配置，主要是配置Controller层的注入等信息</li><li>第三部分称之为持久层配置，主要包含程序的持久层信息</li></ol><p>注意：因为Spring同时支持Java类配置和XML配置，所以下面的配置信息都会给出两者的配置方式。</p><p>下一步我们看一下主配置的主要设置内容，以及我们如何使用Spring的方式进行配置。</p><h1 id="主配置（生产环境）"><a href="#主配置（生产环境）" class="headerlink" title="主配置（生产环境）"></a>主配置（生产环境）</h1><p>本示例程序的主配置主要做如下工作：</p><ol><li>启用Spring MVC对<code>@Controller</code>注解的支持</li><li>配置静态资源的路由位置</li><li>配置静态资源由容器的默认servlet解析</li><li>配置Bean搜索的包路径</li><li>配置<code>ExceptionResolver</code> bean</li><li>配置<code>ViewResolver</code> bean</li></ol><p>我们直接看看使用Java类配置和XML配置的结果。</p><h2 id="Java类配置"><a href="#Java类配置" class="headerlink" title="Java类配置"></a>Java类配置</h2><p>如果使用Java类配置方式，配置类<code>WebAppContext</code>的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.ViewResolver;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.SimpleMappingExceptionResolver;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.view.InternalResourceViewResolver;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.view.JstlView;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"> </div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableWebMvc</span></div><div class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123;</div><div class="line">        <span class="string">"net.petrikainulainen.spring.testmvc.common.controller"</span>,</div><div class="line">        <span class="string">"net.petrikainulainen.spring.testmvc.todo.controller"</span></div><div class="line">&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAppContext</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</div><div class="line">        registry.addResourceHandler(<span class="string">"/static/**"</span>).addResourceLocations(<span class="string">"/static/"</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> </span>&#123;</div><div class="line">        configurer.enable();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SimpleMappingExceptionResolver <span class="title">exceptionResolver</span><span class="params">()</span> </span>&#123;</div><div class="line">        SimpleMappingExceptionResolver exceptionResolver = <span class="keyword">new</span> SimpleMappingExceptionResolver();</div><div class="line"> </div><div class="line">        Properties exceptionMappings = <span class="keyword">new</span> Properties();</div><div class="line"> </div><div class="line">        exceptionMappings.put(<span class="string">"net.petrikainulainen.spring.testmvc.todo.exception.TodoNotFoundException"</span>, <span class="string">"error/404"</span>);</div><div class="line">        exceptionMappings.put(<span class="string">"java.lang.Exception"</span>, <span class="string">"error/error"</span>);</div><div class="line">        exceptionMappings.put(<span class="string">"java.lang.RuntimeException"</span>, <span class="string">"error/error"</span>);</div><div class="line"> </div><div class="line">        exceptionResolver.setExceptionMappings(exceptionMappings);</div><div class="line"> </div><div class="line">        Properties statusCodes = <span class="keyword">new</span> Properties();</div><div class="line"> </div><div class="line">        statusCodes.put(<span class="string">"error/404"</span>, <span class="string">"404"</span>);</div><div class="line">        statusCodes.put(<span class="string">"error/error"</span>, <span class="string">"500"</span>);</div><div class="line"> </div><div class="line">        exceptionResolver.setStatusCodes(statusCodes);</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> exceptionResolver;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ViewResolver <span class="title">viewResolver</span><span class="params">()</span> </span>&#123;</div><div class="line">        InternalResourceViewResolver viewResolver = <span class="keyword">new</span> InternalResourceViewResolver();</div><div class="line"> </div><div class="line">        viewResolver.setViewClass(JstlView.class);</div><div class="line">        viewResolver.setPrefix(<span class="string">"/WEB-INF/jsp/"</span>);</div><div class="line">        viewResolver.setSuffix(<span class="string">".jsp"</span>);</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> viewResolver;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="XML配置"><a href="#XML配置" class="headerlink" title="XML配置"></a>XML配置</h2><p>如果使用XML配置方式，配置文件<code>exampleApplicationContext-web.xml</code>的内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></div><div class="line">       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd</div><div class="line">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd"&gt;</div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/static/**"</span> <span class="attr">location</span>=<span class="string">"/static/"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"net.petrikainulainen.spring.testmvc.common.controller"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"net.petrikainulainen.spring.testmvc.todo.controller"</span>/&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exceptionResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionMappings"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"net.petrikainulainen.spring.testmvc.todo.exception.TodoNotFoundException"</span>&gt;</span>error/404<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"java.lang.Exception"</span>&gt;</span>error/error<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"java.lang.RuntimeException"</span>&gt;</span>error/error<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"statusCodes"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"error/404"</span>&gt;</span>404<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"error/error"</span>&gt;</span>500<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure><h1 id="主配置（测试环境）"><a href="#主配置（测试环境）" class="headerlink" title="主配置（测试环境）"></a>主配置（测试环境）</h1><p>用于测试环境的主配置片段主要用于：</p><ul><li>配置一个<code>MessageSource</code> bean用于依赖注入</li><li>配置一个<code>TodoService</code> bean用于依赖注入</li></ul><h2 id="Java类配置-1"><a href="#Java类配置-1" class="headerlink" title="Java类配置"></a>Java类配置</h2><p><code>TestContext</code>类的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.mockito.Mockito;</div><div class="line"><span class="keyword">import</span> org.springframework.context.MessageSource;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.context.support.ResourceBundleMessageSource;</div><div class="line"> </div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestContext</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</div><div class="line"> </div><div class="line">        messageSource.setBasename(<span class="string">"i18n/messages"</span>);</div><div class="line">        messageSource.setUseCodeAsDefaultMessage(<span class="keyword">true</span>);</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> messageSource;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> TodoService <span class="title">todoService</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Mockito.mock(TodoService.class);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="XML配置-1"><a href="#XML配置-1" class="headerlink" title="XML配置"></a>XML配置</h2><p><code>testContext.xml</code>文件的内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ResourceBundleMessageSource"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basename"</span> <span class="attr">value</span>=<span class="string">"i18n/messages"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useCodeAsDefaultMessage"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"todoService"</span> <span class="attr">name</span>=<span class="string">"todoService"</span> <span class="attr">class</span>=<span class="string">"org.mockito.Mockito"</span> <span class="attr">factory-method</span>=<span class="string">"mock"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"net.petrikainulainen.spring.testmvc.todo.service.TodoService"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure><h1 id="测试类的编写"><a href="#测试类的编写" class="headerlink" title="测试类的编写"></a>测试类的编写</h1><p>我们可以使用以下两种方式来编写我们的controller测试用例：</p><ul><li>当待测试的controller类依赖比较简单时，可以使用所谓的<code>Standalone</code>方式显示的创建controller实例并手动地配置Spring MVC组件（指ExceptionHandler和ViewResolver等）</li><li>当待测试的controller类依赖比较复杂时，可以使用所谓的<code>WebApplicationContext</code>方式启动一个配置好的<code>WebApplicationContext</code>实例</li></ul><p>接下来看一下这两种方式分别如何编写测试用例。</p><h2 id="Standalone方式"><a href="#Standalone方式" class="headerlink" title="Standalone方式"></a><code>Standalone</code>方式</h2><p>使用<code>Standalone</code>方式编写测试用例，我们可以按照如下步骤进行：</p><ol><li>对测试用例类加上<code>@RunWith(MockitoJUnitRunner.class)</code>注解</li><li>测试用例类中添加一个<code>MockMvc</code>类型的成员</li><li>测试用例类中添加一个<code>TodoService</code>类型的成员，并使用<code>@Mock</code>进行注解，表示该成员由<code>MockitoJUnitRunner</code>进行模拟及赋值</li><li>测试用例类中添加一个<code>exceptionResolver()</code>方法，用于生成一个配置好的<code>SimpleMappingExceptionResolver</code>实例以注入</li><li>测试用例类中添加一个<code>messageSource()</code>方法，用于生成一个配置好的<code>ResourceBundleMessageSource</code>实例以注入</li><li>测试用例类中添加一个<code>validator()</code>方法，用于生成一个配置好的<code>LocalValidatorFactoryBean</code>实例以注入</li><li>测试用例类中添加一个<code>viewResolver()</code>方法，用于生成一个配置好的<code>InternalResourceViewResolver</code>实例以注入</li><li>测试用例类中添加一个<code>setUp()</code>方法并用<code>@Before</code>注解，调用<a href="http://docs.spring.io/spring/docs/3.2.x/javadoc-api/org/springframework/test/web/servlet/setup/MockMvcBuilders.html" target="_blank" rel="external"><code>MockMvcBuilders</code></a>的静态方法<code>standaloneSetup()</code>创建并配置好<code>MockMvc</code>类型的成员</li></ol><p>测试用例类的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.junit.Before;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.mockito.Mock;</div><div class="line"><span class="keyword">import</span> org.mockito.runners.MockitoJUnitRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.context.MessageSource;</div><div class="line"><span class="keyword">import</span> org.springframework.context.support.ResourceBundleMessageSource;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;</div><div class="line"><span class="keyword">import</span> org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerExceptionResolver;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.ViewResolver;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.SimpleMappingExceptionResolver;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.view.InternalResourceViewResolver;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.view.JstlView;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(MockitoJUnitRunner.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StandaloneTodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="meta">@Mock</span></div><div class="line">    <span class="keyword">private</span> TodoService todoServiceMock;</div><div class="line"> </div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</div><div class="line">        mockMvc = MockMvcBuilders.standaloneSetup(<span class="keyword">new</span> TodoController(messageSource(), todoServiceMock))</div><div class="line">                .setHandlerExceptionResolvers(exceptionResolver())</div><div class="line">                .setValidator(validator())</div><div class="line">                .setViewResolvers(viewResolver())</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> HandlerExceptionResolver <span class="title">exceptionResolver</span><span class="params">()</span> </span>&#123;</div><div class="line">        SimpleMappingExceptionResolver exceptionResolver = <span class="keyword">new</span> SimpleMappingExceptionResolver();</div><div class="line"> </div><div class="line">        Properties exceptionMappings = <span class="keyword">new</span> Properties();</div><div class="line"> </div><div class="line">        exceptionMappings.put(<span class="string">"net.petrikainulainen.spring.testmvc.todo.exception.TodoNotFoundException"</span>, <span class="string">"error/404"</span>);</div><div class="line">        exceptionMappings.put(<span class="string">"java.lang.Exception"</span>, <span class="string">"error/error"</span>);</div><div class="line">        exceptionMappings.put(<span class="string">"java.lang.RuntimeException"</span>, <span class="string">"error/error"</span>);</div><div class="line"> </div><div class="line">        exceptionResolver.setExceptionMappings(exceptionMappings);</div><div class="line"> </div><div class="line">        Properties statusCodes = <span class="keyword">new</span> Properties();</div><div class="line"> </div><div class="line">        statusCodes.put(<span class="string">"error/404"</span>, <span class="string">"404"</span>);</div><div class="line">        statusCodes.put(<span class="string">"error/error"</span>, <span class="string">"500"</span>);</div><div class="line"> </div><div class="line">        exceptionResolver.setStatusCodes(statusCodes);</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> exceptionResolver;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> MessageSource <span class="title">messageSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</div><div class="line"> </div><div class="line">        messageSource.setBasename(<span class="string">"i18n/messages"</span>);</div><div class="line">        messageSource.setUseCodeAsDefaultMessage(<span class="keyword">true</span>);</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> messageSource;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> LocalValidatorFactoryBean <span class="title">validator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LocalValidatorFactoryBean();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> ViewResolver <span class="title">viewResolver</span><span class="params">()</span> </span>&#123;</div><div class="line">        InternalResourceViewResolver viewResolver = <span class="keyword">new</span> InternalResourceViewResolver();</div><div class="line"> </div><div class="line">        viewResolver.setViewClass(JstlView.class);</div><div class="line">        viewResolver.setPrefix(<span class="string">"/WEB-INF/jsp/"</span>);</div><div class="line">        viewResolver.setSuffix(<span class="string">".jsp"</span>);</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> viewResolver;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以明显的发现，这种方式有两个问题：</p><ul><li>尽管Spring的配置量变少了，但是测试用例类太难看了，包含了太多无用的与测试无关的代码。我们可以将这些无用代码重构到一个新的类中，这步工作可以留待读者们完成。</li><li>对于webapp的配置与生产环境的配置重复了，导致二者不能有效的同步。</li></ul><h2 id="WebApplicationContext方式"><a href="#WebApplicationContext方式" class="headerlink" title="WebApplicationContext方式"></a><code>WebApplicationContext</code>方式</h2><p>使用<code>Standalone</code>方式编写测试用例，我们可以按照如下步骤进行：</p><ol><li>对测试用例类加上<code>@RunWith(MockitoJUnitRunner.class)</code>注解</li><li>对测试用例类加上<code>@ContextConfiguration</code>注解，并设置要使用的配置（如果使用Java类配置，请使用<code>classes</code>属性；如果使用XML配置，请使用<code>locations</code>属性）</li><li>对测试用例类加上<code>@WebAppConfiguration</code>注解，主要是使用<code>WebApplicationContext</code>实例来管理依赖注入</li><li>测试用例类中添加一个<code>MockMvc</code>类型的成员</li><li>测试用例类中添加一个<code>TodoService</code>类型的成员，并添加<code>@AutoWired</code>注解</li><li>测试用例类中添加一个<code>WebApplicationContext</code>类型的成员，并添加<code>@AutoWired</code>注解</li><li>测试用例类中添加一个<code>setUp()</code>方法并用<code>@Before</code>注解，调用<a href="http://docs.spring.io/spring/docs/3.2.x/javadoc-api/org/springframework/test/web/servlet/setup/MockMvcBuilders.html" target="_blank" rel="external"><code>MockMvcBuilders</code></a>的静态方法<code>webAppContextSetup()</code>创建并配置好<code>MockMvc</code>类型的成员</li></ol><p>测试用例类的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.junit.Before;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.mockito.Mockito;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.web.WebAppConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;</div><div class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</div><div class="line"> </div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(classes = &#123;TestContext.class, WebAppContext.class&#125;)</div><div class="line"><span class="comment">//@ContextConfiguration(locations = &#123;"classpath:testContext.xml", "classpath:exampleApplicationContext-web.xml"&#125;)</span></div><div class="line"><span class="meta">@WebAppConfiguration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebApplicationContextTodoControllerTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> TodoService todoServiceMock;</div><div class="line"> </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> WebApplicationContext webApplicationContext;</div><div class="line"> </div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//We have to reset our mock between tests because the mock objects</span></div><div class="line">        <span class="comment">//are managed by the Spring container. If we would not reset them,</span></div><div class="line">        <span class="comment">//stubbing and verified behavior would "leak" from one test to another.</span></div><div class="line">        Mockito.reset(todoServiceMock);</div><div class="line"> </div><div class="line">        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用这种方式使得测试用例类的代码非常干净简洁，但是缺点就是一个测试用例就要加载完整的Spring MVC框架。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文介绍了使用Spring MVC Test自带的支持进行单元测试的方法和配置：<code>Standalone</code>方式和<code>WebApplicationContext</code>方式，我们应该了解到：</p><ul><li>进行Spring配置的时候按照功能分片段维护是很重要的，能方便配置重用</li><li><code>Standalone</code>方式和<code>WebApplicationContext</code>方式的区别</li></ul><p>下一篇是介绍 <a href="/2016/04/09/spring-mvc-testing-unit-testing-normal-controllers/">Unit Testing - Normal Controllers</a></p><p>本文使用的代码已经放在了 <a href="https://github.com/pkainulainen/spring-mvc-test-examples/tree/master/controllers-unittest" target="_blank" rel="external">Github</a> 上，请自行查阅。</p>]]></content>
      
        <categories>
            
            <category> Spring MVC Testing </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring MVC </tag>
            
            <tag> Test </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring MVC Testing: Content]]></title>
      <url>http://www.wbprime.me/2016/04/09/spring-mvc-testing-content/</url>
      <content type="html"><![CDATA[<p>本系列翻译自<a href="http://www.petrikainulainen.net/spring-mvc-test-tutorial/" target="_blank" rel="external">Spring MVC Test Tutorial</a>。</p><p>Springframework自3.2版本以后，提供了<a href="http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/testing.html#spring-mvc-test-framework" target="_blank" rel="external">Spring MVC Test Framework</a>用于对Spring MVC项目进行测试。</p><p>本系列一共两个部分：单元测试和集成测试。</p><p>单元测试将一个一个的Spring MVC Controller作为一个单元，对每一个接口进行测试。Controller层对Service层的调用使用Mockito进行模拟。</p><p>集成测试对整个web服务进行测试，虽然测试的单位仍然是接口，但是测试结果更偏向于生产环境。为了保证测试的稳定性，使用了DBUnit来控制每一次测试的数据样本。</p><p>需要注意的是，虽然这个系列将Spring MVC Test Framework分为单元测试和集成测试两个部分，但是对于Spring本身来说，其内部实现都是一样的。单元测试和集成测试的区分，是从开发者的角度进行的区分。</p><p>Spring MVC 单元测试：</p><ol><li><a href="/2016/04/09/spring-mvc-testing-unit-testing-configuration/">Unit Testing - Configuration</a></li><li><a href="/2016/04/09/spring-mvc-testing-unit-testing-normal-controllers/">Unit Testing - Normal Controllers</a></li><li><a href="/2016/04/09/spring-mvc-testing-unit-testing-rest-api/">Unit Testing - REST API</a></li></ol><p>Spring MVC 集成测试：</p><ol><li><a href="/2016/04/09/spring-mvc-testing-integration-testing-configuration/">Integration Testing - Configuration</a></li><li><a href="/2016/04/09/spring-mvc-testing-integration-testing-controllers/">Integration Testing - Controllers</a></li><li><a href="/2016/04/09/spring-mvc-testing-integration-testing-forms/">Integration Testing - Forms</a></li><li><a href="/2016/04/09/spring-mvc-testing-integration-testing-rest-api/">Integration Testing - REST API</a></li><li><a href="/2016/04/09/spring-mvc-testing-integration-testing-security/">Integration Testing - Security</a></li><li><a href="/2016/04/09/spring-mvc-testing-integration-testing-jsonpath/">Integration Testing - JsonPath</a></li></ol>]]></content>
      
        <categories>
            
            <category> Spring MVC Testing </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring MVC </tag>
            
            <tag> Test </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Learning Java Concurrency - ReentrantReadWriteLock]]></title>
      <url>http://www.wbprime.me/2016/04/07/learning-java-concurrency-reentrantreadwritelock/</url>
      <content type="html"><![CDATA[<p><code>ReentrantLock</code>是互斥锁，对于要保护的资源，同一时间只能有一个线程进行访问。所谓的访问，就是读和写。但是在实际中，往往是读操作对互斥性的要求远远低于写操作。</p><p>考虑一个共享资源，比如一个List对象，可能会有多个线程对其进行读写。</p><p>下面是使用<code>ReentrantLock</code>实现的一个版本。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ExclusiveLockStack</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">final</span> String val)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == val)    <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            list.add(val);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">last</span><span class="params">()</span> </span>&#123;</div><div class="line">        lock.lock();</div><div class="line">        String str = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> lastIdx = list.size() - <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (lastIdx &gt;= <span class="number">0</span>) &#123;</div><div class="line">                str = list.get(lastIdx);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> str;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>下面是使用<code>ReentrantReadWriteLock</code>实现的一个版本。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">ReadWrittatic <span class="class"><span class="keyword">class</span> <span class="title">ReadWriteLockStack</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt;           list  = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantReadWriteLock lock  = <span class="keyword">new</span> ReentrantReadWriteLock();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock                   rLock = lock.readLock();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock                   wLock = lock.writeLock();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">final</span> String val)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == val)    <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        wLock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            list.add(val);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            wLock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">last</span><span class="params">()</span> </span>&#123;</div><div class="line">        rLock.lock();</div><div class="line">        String str = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> lastIdx = list.size() - <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (lastIdx &gt;= <span class="number">0</span>) &#123;</div><div class="line">                str = list.get(lastIdx);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            rLock.unlock();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> str;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>ReentrantReadWriteLock</code>虽然看起来像一个Lock，但却并不是真正的Lock，没有去实现<code>java.util.concurrent.locks.Lock</code>接口，而是去实现了一个<code>ReadWriteLock</code>的接口。</p><h1 id="接口概览"><a href="#接口概览" class="headerlink" title="接口概览"></a>接口概览</h1><p>对比一下<code>ReentrantLock</code>和<code>ReentrantReadWriteLock</code>的实现的接口就能知道二者有什么区别了。</p><p><code>ReentrantLock</code>的根底如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lock</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Condition <span class="title">newCondition</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>ReentrantReadWriteLock</code>的跟脚如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantReadWriteLock</span> <span class="keyword">implements</span> <span class="title">ReadWriteLock</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ReadWriteLock</span> </span>&#123;</div><div class="line">    <span class="function">Lock <span class="title">readLock</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Lock <span class="title">writeLock</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可见，一个真正的锁需要提供<code>lock</code>和<code>unlock</code>等方法。<code>ReentrantLock</code>直接实现了<code>Lock</code>接口，而<code>ReentrantReadWriteLock</code>通过<code>readLock()</code>和<code>writeLock()</code>方法来返回<code>Lock</code>供使用。</p><p><code>ReentrantReadWriteLock</code>类提供的方法如下：</p><ol><li>ReentrantReadWriteLock() &amp; ReentrantReadWriteLock(boolean fair)</li><li>Lock readLock()</li><li>Lock writeLock()</li><li>boolean isFair()</li><li>int getReadLockCount()</li><li>boolean isWriteLocker()</li></ol><h1 id="共享锁与互斥锁"><a href="#共享锁与互斥锁" class="headerlink" title="共享锁与互斥锁"></a>共享锁与互斥锁</h1><p><code>ReentrantReadWriteLock</code>向外界提供了一个读锁和写锁。</p><p>读锁是一种共享锁，同一时间多个线程都可以持有该锁。</p><p>写锁是一种互斥锁，同一时间只能有一个线程持有该锁。写锁上有一个计数器，只有当计数器为0时，新的线程才能去持有该锁；如果计数器不为0,但是持有锁的线程正是当前线程，则计数器加1,表示锁需要被unlock两次才能真正释放。</p><p>读锁和写锁在一起工作时，相互之间也会有影响。如果读锁已经被持有，则所有请求写锁的线程会被阻塞。如果写锁已经被持有，则任何新的读锁和写锁的请求线程都会被阻塞。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</div><div class="line">        sync.acquireShared(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        sync.acquireSharedInterruptibly(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</div><div class="line">        sync.releaseShared(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</div><div class="line">        sync.acquire(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        sync.acquireInterruptibly(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</div><div class="line">        sync.release(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>ReadLock</code>和<code>WriteLock</code>持有同一个<code>Sync</code>的对象实例，而<code>Sync</code>继承自<code>AbstractQueuedSynchronizer</code>。二者的区别在于各自的<code>lock &amp; unlock</code>操作分别调用的是<code>AbstractQueuedSynchronizer</code>的共享和独占方法。</p><p>所以，读锁和写锁，实际上是同一个锁。</p><h1 id="真正的锁"><a href="#真正的锁" class="headerlink" title="真正的锁"></a>真正的锁</h1><p><code>Sync</code>中主要的方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">readerShouldBlock</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">writerShouldBlock</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>Sync</code>定义了两个抽象方法，用来实现公平性策略。这两个方法的作用不言自明，具体的实现在其两个子类中。</p><h2 id="写锁的获取"><a href="#写锁的获取" class="headerlink" title="写锁的获取"></a>写锁的获取</h2><p>写锁的<code>lock</code>调用了<code>Sync</code>的<code>tryAcquire()</code>。</p><p>当前线程获取写锁的需要先判断逻辑：</p><ol><li>没有上锁的读线程；</li><li>如果有上锁的写线程，则该线程必须是当前线程；</li><li>公平性策略允许。如果通过了逻辑判断，则获取写锁，写计数器加1（这意味着写计数器的值与持有锁的重入次数保持一致）。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * 总结:</div><div class="line">         * 1. 如果当前有读线程持有锁，直接返回失败</div><div class="line">         × 2. 如果当前有写线程持有锁，并且当前线程并不是该写线程，直接失败</div><div class="line">         * 3. 如果当前有写线程持有锁，并且当前线程是该写线程，预判断加锁后的写计</div><div class="line">         *		数器的值是否超过了最大值（65535），超过则失败，否则成功</div><div class="line">         * 4. 如果没有读线程和写线程持有锁，则进行公平性策略判断</div><div class="line">         *		如果读线程可以非公平抢占锁，则去插队；否则，失败（去排队）</div><div class="line">         */</div><div class="line">        Thread current = Thread.currentThread();</div><div class="line">        <span class="keyword">int</span> c = getState();</div><div class="line">        <span class="keyword">int</span> w = exclusiveCount(c);</div><div class="line">        <span class="keyword">if</span> (c != <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// (Note: if c != 0 and w == 0 then shared count != 0)</span></div><div class="line">            <span class="keyword">if</span> (w == <span class="number">0</span> || current != getExclusiveOwnerThread())</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">if</span> (w + exclusiveCount(acquires) &gt; MAX_COUNT)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</div><div class="line">            <span class="comment">// Reentrant acquire</span></div><div class="line">            setState(c + acquires);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (writerShouldBlock() ||</div><div class="line">            !compareAndSetState(c, c + acquires))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        setExclusiveOwnerThread(current);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="写锁的释放"><a href="#写锁的释放" class="headerlink" title="写锁的释放"></a>写锁的释放</h2><p>写锁的<code>unlock</code>调用了<code>Sync</code>的<code>tryRelease()</code>。</p><p>当前线程释放写锁，只需要判断：</p><ol><li>当前线程确实持有写锁；</li><li>写计数器的值是否会变为0。</li></ol><p>如果写计数器的值会变为0，则写锁会被释放；否则说明当前线程多次调用了<code>lock</code>而没有执行相应数目的<code>unlock</code>操作，需要等更多的<code>unlock</code>才能释放写锁（可重入）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * 总结：</div><div class="line">         * 1. 如果当前线程没有持有锁，则失败，抛出异常</div><div class="line">         * 2. 如果当前的写计数器的值减1之后为0,则成功；否则失败</div><div class="line">         */</div><div class="line">        <span class="keyword">if</span> (!isHeldExclusively())</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</div><div class="line">        <span class="keyword">int</span> nextc = getState() - releases;</div><div class="line">        <span class="keyword">boolean</span> free = exclusiveCount(nextc) == <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (free)</div><div class="line">            setExclusiveOwnerThread(<span class="keyword">null</span>);</div><div class="line">        setState(nextc);</div><div class="line">        <span class="keyword">return</span> free;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="读锁的获取"><a href="#读锁的获取" class="headerlink" title="读锁的获取"></a>读锁的获取</h2><p>读锁的<code>lock</code>调用了<code>Sync</code>的<code>tryAcquireShared()</code>。</p><p>线程获取读锁的需要先判断逻辑：</p><ol><li>写锁没有被其他线程获取，同一个线程可以先获取写锁在获取读锁（降级）；</li><li>公平性策略允许。</li></ol><p>如果通过了逻辑判断，则获取读锁，读计数器加1（这意味着读计数器的值与持有锁的重入次数保持一致）。读锁的获取是一个不断尝试的自旋过程。</p><p>由于读锁也是可以重入的，所以用读计数器表示所有读线程的重入次数外，<code>Sync</code>还维护了一套读线程的线程局部计数器（ThreadLocal），用于记录每一个写线程的重入数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> unused)</span> </span>&#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * 总结：</div><div class="line">         * 1. 如果已经有写线程持有锁，判断该线程是不是当前线程，</div><div class="line">         *		如果不是，直接失败；否则可以试图去获取锁</div><div class="line">         * 2. 不管有没有写线程持有锁，当前线程都可以去试图获取锁</div><div class="line">         * 3. 如果读计数器的值会超过最大值（65535），则失败</div><div class="line">         */</div><div class="line">        Thread current = Thread.currentThread();</div><div class="line">        <span class="keyword">int</span> c = getState();</div><div class="line">        <span class="keyword">if</span> (exclusiveCount(c) != <span class="number">0</span> &amp;&amp;</div><div class="line">            getExclusiveOwnerThread() != current)</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> r = sharedCount(c);</div><div class="line">        <span class="keyword">if</span> (!readerShouldBlock() &amp;&amp;</div><div class="line">            r &lt; MAX_COUNT &amp;&amp;</div><div class="line">            compareAndSetState(c, c + SHARED_UNIT)) &#123;</div><div class="line">            <span class="keyword">if</span> (r == <span class="number">0</span>) &#123;</div><div class="line">                firstReader = current;</div><div class="line">                firstReaderHoldCount = <span class="number">1</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (firstReader == current) &#123;</div><div class="line">                firstReaderHoldCount++;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                HoldCounter rh = cachedHoldCounter;</div><div class="line">                <span class="keyword">if</span> (rh == <span class="keyword">null</span> || rh.tid != current.getId())</div><div class="line">                    cachedHoldCounter = rh = readHolds.get();</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (rh.count == <span class="number">0</span>)</div><div class="line">                    readHolds.set(rh);</div><div class="line">                rh.count++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> fullTryAcquireShared(current);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="读锁的释放"><a href="#读锁的释放" class="headerlink" title="读锁的释放"></a>读锁的释放</h2><p>读锁的<code>unlock</code>调用了<code>Sync</code>的<code>tryReleaseShared()</code>。当前线程释放写锁，只需要判断线程局部计数器是否大于1。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> unused)</span> </span>&#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * 总结：</div><div class="line">         * 1. 判断当前读线程的局部计数器是否可以往下减（大于1）</div><div class="line">         */</div><div class="line">        Thread current = Thread.currentThread();</div><div class="line">        <span class="keyword">if</span> (firstReader == current) &#123;</div><div class="line">            <span class="comment">// assert firstReaderHoldCount &gt; 0;</span></div><div class="line">            <span class="keyword">if</span> (firstReaderHoldCount == <span class="number">1</span>)</div><div class="line">                firstReader = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                firstReaderHoldCount--;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            HoldCounter rh = cachedHoldCounter;</div><div class="line">            <span class="keyword">if</span> (rh == <span class="keyword">null</span> || rh.tid != current.getId())</div><div class="line">                rh = readHolds.get();</div><div class="line">            <span class="keyword">int</span> count = rh.count;</div><div class="line">            <span class="keyword">if</span> (count &lt;= <span class="number">1</span>) &#123;</div><div class="line">                readHolds.remove();</div><div class="line">                <span class="keyword">if</span> (count &lt;= <span class="number">0</span>)</div><div class="line">                    <span class="keyword">throw</span> unmatchedUnlockException();</div><div class="line">            &#125;</div><div class="line">            --rh.count;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">            <span class="keyword">int</span> c = getState();</div><div class="line">            <span class="keyword">int</span> nextc = c - SHARED_UNIT;</div><div class="line">            <span class="keyword">if</span> (compareAndSetState(c, nextc))</div><div class="line">                <span class="comment">// Releasing the read lock has no effect on readers,</span></div><div class="line">                <span class="comment">// but it may allow waiting writers to proceed if</span></div><div class="line">                <span class="comment">// both read and write locks are now free.</span></div><div class="line">                <span class="keyword">return</span> nextc == <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="公平性"><a href="#公平性" class="headerlink" title="公平性"></a>公平性</h1><p>在<code>Sync</code>的共享锁和互斥锁的获取过程中都去判断了公平性策略，公平性是同时对写线程和读线程起作用，因为读线程和写线程在同一个等待队列里面进行排队。公平性判断实在获取锁的过程中进行的，此时有空余的锁可供获取（有可能是等待队列是空的；也有可能等待队列不是空的，里面有很多读线程和写线程，但是当前线程申请锁的时候，刚好有一个线程释放了锁）。如果当前线程申请锁的时候没有空余的锁，只能乖乖地进入等待序列排队。</p><p>公平与非公平是通过<code>FairSync</code>和<code>NonfairSync</code>来区分的，分别实现<code>writerShouldBlock()</code>和<code>readerShouldBlock()</code>方法。</p><h2 id="非公平的策略"><a href="#非公平的策略" class="headerlink" title="非公平的策略"></a>非公平的策略</h2><p>对于写线程而言，非公平就是能插队就插队。不公平是对那些在等待队列中线程而言的，它们有可能一直在等待锁。</p><p>对于读线程而言，非公平就是只要等待队列的第一个（等待最久）线程不是写线程就去插队。但其实读锁是一个共享锁，所以插队也没有意义；但是可以保证写线程有机会拿到锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NonfairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">writerShouldBlock</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// 写线程有机会就抢锁，没办法采取排队等锁</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">readerShouldBlock</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         × 请求写锁和读锁的线程在同一个队列里面排队</div><div class="line">         * 如果等待队列的第一个线程（等的黄花菜最凉的那一位）请求的是写锁，返回true；否则返回false</div><div class="line">         */</div><div class="line">        <span class="keyword">return</span> apparentlyFirstQueuedIsExclusive();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="公平的策略"><a href="#公平的策略" class="headerlink" title="公平的策略"></a>公平的策略</h2><p>对于写线程而言，公平就是只要等待队列中没有其他就插队；对于读线程也是一样。</p><p>好像这个没有什么意义。进入等待队列进行排队的意思是，当前线程要被挂起，排到了的时候要被恢复，这都需要操作系统的调度，存在一定的开销。而插队就是先不去挂起，先尝试获取锁，获取失败再排队。当队列是空的情况下，当然不需要去排队了，这样貌似可以降低一些系统开销。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">writerShouldBlock</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * 等待队列没有前驱节点</div><div class="line">         */</div><div class="line">        <span class="keyword">return</span> hasQueuedPredecessors();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">readerShouldBlock</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * 等待队列没有前驱节点</div><div class="line">         */</div><div class="line">        <span class="keyword">return</span> hasQueuedPredecessors();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="锁降级"><a href="#锁降级" class="headerlink" title="锁降级"></a>锁降级</h1><p>如果当前线程已经持有了读锁，下一次可以再次申请到读锁，这个是读锁的可重入。对于写锁也是存在可重入的。</p><p>如果当前线程已经持有了写锁，可以申请到读锁，然后释放写锁，这个称之为锁的降级。</p><p>但是，锁不能升级。获取到写锁的条件之一是没有读锁被持有，不管是不是当前线程。</p><h1 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h1><p>锁就有条件变量<code>Condition</code>。</p><p>读锁是共享锁，条件变量没有意义，所以获取条件变量的方法会抛出<code>UnsupportedOperationException</code>异常。</p><p>写锁的条件变量的用法同<a href="/2016/04/07/learning-java-concurrency-reentrantlock-condition/"><code>ReentrantLock</code></a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><code>ReentrantReadWriteLock</code>本身并不是锁，它通过一个内部锁来实现读锁、写锁以及二者的同步。读锁是一种共享锁，写锁是一种互斥锁。</p><p><code>ReentrantReadWriteLock</code>的使用也存在公平不公平的选择。</p><p><code>ReentrantReadWriteLock</code>可以保护共享资源的访问，当共享资源是很大的集合并且读线程（远远）多余写线程的时候，对于性能的提升有很明显效果。</p>]]></content>
      
        <categories>
            
            <category> Learning Java Concurrency </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Concurrency </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Learning Java Concurrency - ReentrantLock & Condition]]></title>
      <url>http://www.wbprime.me/2016/04/07/learning-java-concurrency-reentrantlock-condition/</url>
      <content type="html"><![CDATA[<p><code>ReentrantLock</code>是<code>synchronized</code>的高阶版本，用来控制多线程同步。<code>ReentrantLock</code>是一种独占锁，同一时间只能有一个线程使用一把锁，其他请求加锁的线程都会被阻塞。除了控制多线程同步之外，<code>ReentrantLock</code>还提供了<code>Condition</code>用来进行多线程通讯。<code>Condition</code>是<code>Object</code>类的方法<code>wait &amp; notify</code>的替代版本，可以用等待/通知模式来有效控制多线程对共享资源的访问。</p><p>仿<a href="/2016/04/01/java-concurrency-synchronized/"><code>synchronized</code></a>，用<code>ReentrantLock</code>实现单例模式的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton INSTANCE;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">instance</span><span class="params">()</span> </span>&#123;</div><div class="line">        Singleton var = INSTANCE;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == var) &#123;</div><div class="line">            lock.lock();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                var = INSTANCE;</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == var) &#123;</div><div class="line">                    INSTANCE = var = <span class="keyword">new</span> Singleton();</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                lock.unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> var;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>仿<a href="/2016/04/06/learning-java-concurrency-wait-notify/"><code>wait &amp; notify</code></a>，用<code>Condition</code>来实现父子通知汇款的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DepositAccount</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> money;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition cond = lock.newCondition();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DepositAccount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.money = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">while</span> (money &lt; val) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    cond.await(); <span class="comment">// 钱不够，等一会儿</span></div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    <span class="comment">// do nothing here</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            money -= val;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deposite</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            money += val;</div><div class="line"></div><div class="line">            cond.signalAll(); <span class="comment">// 存完钱周知一下</span></div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="ReentrantLock’s-API"><a href="#ReentrantLock’s-API" class="headerlink" title="ReentrantLock’s API"></a>ReentrantLock’s API</h1><ol><li>ReentrantLock() &amp; ReentrantLock(boolean fair)</li><li>void lock()</li><li>void lockInterruptibly() throws InterruptedException</li><li>boolean tryLock()</li><li>boolean tryLock(long timeout, TimeUnit unit)</li><li>void unlock()</li><li>boolean isHelpByCurrentThread()</li><li>boolean isLocked()</li><li>boolean isFair()</li><li>Condition newCondition()</li><li>boolean hasWaiters(Condition cond)</li></ol><p><code>ReentrantLock</code>的实现是委托给内部静态类<code>FairSync</code>和<code>NonfairSync</code>，这两个类又继承自<code>AbstractQueuedSynchronizer</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NonfairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="公平锁与非公平锁"><a href="#公平锁与非公平锁" class="headerlink" title="公平锁与非公平锁"></a>公平锁与非公平锁</h2><p><code>FairSync</code>和<code>NonfairSync</code>即所谓的公平锁和非公平锁。对比一下两个锁版本对于<code>lock</code>方法的实现，就能明白公平和非公平的区别在哪里了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123; <span class="comment">// NonfairSync</span></div><div class="line">    <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</div><div class="line">        setExclusiveOwnerThread(Thread.currentThread());</div><div class="line">    <span class="keyword">else</span></div><div class="line">        acquire(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123; <span class="comment">// FairSync</span></div><div class="line">    acquire(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看到，公平锁直接让当前线程加入等待队列；而非公平锁首先试图去获取锁，如果当前有线程恰好释放了锁，就可以插队获取到锁，如果获取失败，还是会加入等待队列。也就是说，非公平锁会在调用lock的时候去尝试获取锁。如果这时候能够获取锁，就直接获取到锁，这样可以减少线程挂起和恢复的性能开销；缺点就是有可能在等待队列中的线程有可能永远拿不到锁。</p><p><code>ReentrantLock</code>在构造器中可以指定使用公平锁还是非公平锁策略，默认是非公平锁。</p><h2 id="lock"><a href="#lock" class="headerlink" title="lock"></a><code>lock</code></h2><p><code>lock()</code>和<code>lockInterruptibly()</code>用于获取锁。调用线程试图去获取一个锁，如果锁已经被当前线程占用，则锁的计数器加1；如果锁被其他线程占用，则当前线程被阻塞，进入等待队列等待锁被释放。</p><p>两者的区别在于等待线程在等待的过程中是否可以被中断。</p><h2 id="tryLock"><a href="#tryLock" class="headerlink" title="tryLock"></a><code>tryLock</code></h2><p>如果调用线程不想被阻塞，可以使用<code>lock</code>的异步版本<code>tryLock</code>。<code>tryLock</code>会试图去获取锁，如果获取成功了，就返回成功；如果失败了，就会返回失败。获取失败，可以设定一个等待时间，自旋等待。</p><h2 id="unlock"><a href="#unlock" class="headerlink" title="unlock"></a><code>unlock</code></h2><p>如果调用线程持有了目标锁，当前线程调用<code>unlock</code>会试图释放锁定。准确的说是让目标锁的计数器减1,如果目标锁的计数器为0,则锁被释放。</p><p>如果调用线程没有持有目标锁，会导致<code>IllegalMonitorStateException</code>异常。</p><h2 id="newCondition"><a href="#newCondition" class="headerlink" title="newCondition"></a><code>newCondition</code></h2><p>创建一个与目标锁相关联的<code>Condition</code>对象。</p><h1 id="Condition’s-API"><a href="#Condition’s-API" class="headerlink" title="Condition’s API"></a>Condition’s API</h1><ol><li>void await() throws InterruptedException</li><li>void awaitUninterruptibly()</li><li>long awaitNanos(long nanos) throws InterruptedException</li><li>boolean await(long timeout, TimeUnit unit) throws InterruptedException</li><li>boolean awaitUnit(Date dt) throws InterruptedException</li><li>void signal()</li><li>void signalAll()</li></ol><p><code>Condition</code>的作用和用法可以参考<code>Object</code>类的<code>wait &amp; notify</code>族。</p><p><code>ReentrantLock</code>返回的<code>Condition</code>对象与一个互斥锁相关联。<code>Condition</code>对象本身维护一个线程的等待队列，<code>await</code>会将调用线程放到等待队列中；<code>signal</code>会将等待线程中的所有线程放到关联的<code>ReentrantLock</code>对象的等待队列中。这样线程的挂起和唤醒工作就由<code>ReentrantLock</code>对象完成。</p><h2 id="await"><a href="#await" class="headerlink" title="await"></a><code>await</code></h2><p>同<code>Object</code>的<code>wait</code>族，估计就是因为已经有了<code>wait</code>，所以新的API才被命名为<code>await</code>。</p><p>调用线程会被挂起，一直等到条件满足被其他线程用<code>signal</code>来唤醒。</p><p>等待可以设置允不允许中断，也可以设置等待时间间隔。</p><p>调用线程被挂起之后会释放持有的锁，加入到<code>Condition</code>对象的等待队列中去。</p><h2 id="signal"><a href="#signal" class="headerlink" title="signal"></a><code>signal</code></h2><p>同<code>Object</code>的<code>notify</code>族。</p><p><code>signal</code>唤醒线程的顺序是未定义的，不同的JVM实现会有不同的策略，可以是等待时间最长的最先被唤醒。</p><p><code>signal</code>会将需要唤醒的线程从<code>Condition</code>自己的等待队列移动到绑定的<code>ReentrantLock</code>对象的等待序列，按照<code>ReentrantLock</code>的规则去获取锁。</p><h1 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h1><p><a href="ConditionCase.java">ConditionCase.java</a><br><a href="ReentrantLockCase.java">ReentrantLockCase.java</a></p>]]></content>
      
        <categories>
            
            <category> Learning Java Concurrency </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Concurrency </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Learning Java Concurrency - wait & notify]]></title>
      <url>http://www.wbprime.me/2016/04/06/learning-java-concurrency-wait-notify/</url>
      <content type="html"><![CDATA[<p>在synchronized关键字之外，Java提供了另外的<code>wait</code>和<code>notify</code>函数族用于支援多线程通信，使用上类似于JUC的Condition类。</p><p><code>wait()</code>、<code>notify()</code>和<code>notifyAll()</code>是Object类的方法，与synchronized配套使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Object</span> </span>&#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout, <span class="keyword">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notifyAll</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>wait</code>一共有三个函数。调用<code>wait</code>的线程必须已经持有了同一个对象的同步器（使用synchronized）。调用<code>wait</code>的线程会进入等待状态，直到另外的线程调用了同一个对象的<code>notify</code>函数，或者指定的等待时间过期，或者被中断（引发InterruptedException）。调用<code>wait</code>函数之后，当前线程会放弃已经持有的同步器。</p><p><code>notify</code>一共是有两个函数。<code>notify()</code>函数会唤醒当前的由于执行<code>wait</code>而进入等待的某个线程；注意，被唤醒的线程是不可预料的，也就是说不同的JVM实现可以用不同的规则算法来决定被唤醒的是哪一个线程。<code>notifyAll()</code>函数会唤醒所有的等待线程，但是只会有一个线程最终进入执行。</p><p>下面用两个例子来说明<code>wait &amp; notify</code>的使用场景和使用方式。</p><h1 id="银行取钱"><a href="#银行取钱" class="headerlink" title="银行取钱"></a>银行取钱</h1><p>银行取钱是传统的生产者和消费者模型的一个简化版本。</p><p>假设有一个银行账户，两个用户分别要往里面存钱和取钱（可以想象为一个通知汇款，儿子在上大学要花钱，打电话让父亲给打钱；两个ATM机，父亲手哆嗦地五百五百地存，儿子不耐烦地刷，有钱就取出来）。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> me.wbprime.showcase.concurrent;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Class: DepositCase</div><div class="line"> * Date: 2016/04/05 14:42</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Elvis Wang [mail@wbprime.me]</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepositCase</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DepositAccount</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> money;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DepositAccount</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.money = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">            <span class="keyword">while</span> (money &lt; val) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">this</span>.wait(); <span class="comment">// 钱不够，等一会儿</span></div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    <span class="comment">// do nothing here</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            money -= val;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">deposite</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">            money += val;</div><div class="line">            <span class="keyword">this</span>.notifyAll(); <span class="comment">// 存完钱周知一下</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OldFather</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> DepositAccount account;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> totalMoney;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> depositedMoney;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">OldFather</span><span class="params">(<span class="keyword">final</span> DepositAccount account, <span class="keyword">final</span> <span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.account = account;</div><div class="line"></div><div class="line">            <span class="keyword">this</span>.totalMoney = val;</div><div class="line">            <span class="keyword">this</span>.depositedMoney = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> MAX_MONEY_EACH_TIME = <span class="number">5000</span>; <span class="comment">// 每次最多存这么多钱</span></div><div class="line">            <span class="keyword">while</span> (depositedMoney &lt; totalMoney) &#123;</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> moneyEachTime =</div><div class="line">                    (totalMoney - depositedMoney) &lt; MAX_MONEY_EACH_TIME ? (totalMoney - depositedMoney) : MAX_MONEY_EACH_TIME;</div><div class="line"></div><div class="line">                account.deposite(moneyEachTime);</div><div class="line">                depositedMoney += moneyEachTime;</div><div class="line"></div><div class="line">                System.out.println(<span class="string">"父亲 sent "</span> + moneyEachTime + <span class="string">" RMB to his son"</span>);</div><div class="line"></div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">5000</span>); <span class="comment">// 缓口气</span></div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    <span class="comment">// do nothing</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String name;</div><div class="line">        <span class="keyword">private</span> DepositAccount account;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> neededMoney;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> availMoney;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Son</span><span class="params">(<span class="keyword">final</span> String name, <span class="keyword">final</span> DepositAccount account, <span class="keyword">final</span> <span class="keyword">int</span> money)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.name = name;</div><div class="line"></div><div class="line">            <span class="keyword">this</span>.account = account;</div><div class="line"></div><div class="line">            <span class="keyword">this</span>.neededMoney = money;</div><div class="line">            <span class="keyword">this</span>.availMoney = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> MAX_MONEY_EACH_TIME = <span class="number">1000</span>; <span class="comment">// 每次最多取这么多钱</span></div><div class="line">            <span class="keyword">while</span> (availMoney &lt; neededMoney) &#123;</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> moneyEachTime =</div><div class="line">                    (neededMoney - availMoney) &lt; MAX_MONEY_EACH_TIME ? (neededMoney - availMoney) : MAX_MONEY_EACH_TIME;</div><div class="line"></div><div class="line">                account.withdraw(moneyEachTime);</div><div class="line">                availMoney += moneyEachTime;</div><div class="line"></div><div class="line">                System.out.println(name + <span class="string">" get "</span> + moneyEachTime + <span class="string">" RMB from his father"</span>);</div><div class="line"></div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">1000</span>); <span class="comment">// 抽根烟</span></div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    <span class="comment">// do nothing</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> DepositAccount account = <span class="keyword">new</span> DepositAccount();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> ExecutorService executorService = Executors.newCachedThreadPool();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> moneyToSon1 = <span class="number">10000</span>;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> moneyToSon2 = <span class="number">18600</span>;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> moneyToSon3 = <span class="number">10240</span>;</div><div class="line"></div><div class="line">        executorService.execute(</div><div class="line">            <span class="keyword">new</span> OldFather(account, moneyToSon1 + moneyToSon2 + moneyToSon3)</div><div class="line">        );</div><div class="line">        executorService.execute(</div><div class="line">            <span class="keyword">new</span> Son(<span class="string">"胡大"</span>, account, moneyToSon1)</div><div class="line">        );</div><div class="line">        executorService.execute(</div><div class="line">            <span class="keyword">new</span> Son(<span class="string">"胡二"</span>, account, moneyToSon2)</div><div class="line">        );</div><div class="line">        executorService.execute(</div><div class="line">            <span class="keyword">new</span> Son(<span class="string">"胡三"</span>, account, moneyToSon3)</div><div class="line">        );</div><div class="line"></div><div class="line">        executorService.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h2><ol><li><code>DepositAccount</code>类表征银行存款帐号，主要记录当前有多少钱，并提供同步的存款、取款的方法。取钱的钱不够了就没法取，只能等着；存钱的就没关系，可以一直往里面存，每存一笔钱就通知一遍要取钱的人。</li><li><code>OldFather</code>类表征存钱的父亲，连续往账户里面存钱，每次存钱都有一个限额。父亲每存一笔钱，要叹一口气。</li><li><code>Son</code>类表征在外的儿子（们），缺钱了去取钱，每次取钱有限额。如果账户里面没有钱了，只能抽一根烟等着了。</li><li><code>main()</code>函数，首先构造帐号，然后构造父亲和儿子（胡大、胡二和胡三），然后用一个线程池跑起来。</li></ol><p>代码很简单。</p><h1 id="令狐冲被困西湖底"><a href="#令狐冲被困西湖底" class="headerlink" title="令狐冲被困西湖底"></a>令狐冲被困西湖底</h1><p>另外一个例子可以考虑令狐冲被困在西湖底下面的情形。</p><p>冲哥被困在了西湖底的地牢里面，不见天日。梅庄四友发善心，每天都让人送饭给他吃。</p><p>现在来看，冲哥要吃饭，只能等人送饭过来；送饭的人是个聋哑人，到点了过来看一下，发现饭被吃了，就给一份新的饭。也就是，一个人送一个人吃；吃完了才送，没吃完不送；送来了才有得吃，没送就没得吃。</p><p>代码说话。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> me.wbprime.showcase.concurrent;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Class: LinghuChongCase</div><div class="line"> * Date: 2016/04/06 12:38</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Elvis Wang [mail@wbprime.me]</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinghuChongCase</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Bowl</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> isFull;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">while</span> (! isFull) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">this</span>.wait();</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    <span class="comment">// do nothing</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            isFull = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">this</span>.notifyAll();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">provide</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">while</span> (isFull) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">this</span>.wait();</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    <span class="comment">// do nothing</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            isFull = <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">this</span>.notifyAll();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LinghuChong</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Bowl bowl;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> days;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LinghuChong</span><span class="params">(<span class="keyword">final</span> Bowl bowl, <span class="keyword">final</span> <span class="keyword">int</span> days)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.bowl = bowl;</div><div class="line">            <span class="keyword">this</span>.days = days;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">int</span> existingDays = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span> (existingDays &lt; days) &#123;</div><div class="line">                bowl.eat();</div><div class="line">                System.out.println(<span class="string">"Linghu Chong enjoys eating，"</span>);</div><div class="line"></div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">1000</span>); <span class="comment">// 练吸心大法</span></div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    <span class="comment">// do nothing</span></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                existingDays ++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeBody</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Bowl bowl;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> days;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SomeBody</span><span class="params">(<span class="keyword">final</span> Bowl bowl, <span class="keyword">final</span> <span class="keyword">int</span> days)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.bowl = bowl;</div><div class="line">            <span class="keyword">this</span>.days = days;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">int</span> existingDays = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span> (existingDays &lt; days) &#123;</div><div class="line">                bowl.provide();</div><div class="line">                System.out.println(<span class="string">"Prepared a bowl for a prisoner to eat"</span>);</div><div class="line"></div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">2000</span>); <span class="comment">// 不知道干嘛</span></div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    <span class="comment">// do nothing</span></div><div class="line">                &#125;</div><div class="line">                existingDays++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Bowl bowl = <span class="keyword">new</span> Bowl();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> ExecutorService executorService = Executors.newCachedThreadPool();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> daysLostFreedom = <span class="number">15</span>;</div><div class="line"></div><div class="line">        executorService.execute(</div><div class="line">            <span class="keyword">new</span> LinghuChong(bowl, daysLostFreedom)</div><div class="line">        );</div><div class="line">        executorService.execute(</div><div class="line">            <span class="keyword">new</span> SomeBody(bowl, daysLostFreedom)</div><div class="line">        );</div><div class="line"></div><div class="line">        executorService.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="代码说明-1"><a href="#代码说明-1" class="headerlink" title="代码说明"></a>代码说明</h2><ol><li><code>Bowl</code>类表征饭碗，里面还有饭令狐冲才可以吃，送饭人就不会送；里面没饭了，令狐冲就没得吃，送饭人才会送。</li><li><code>LinghuChong</code>类表征令狐冲，吃饭，没饭吃的时候就练吸心大法。</li><li><code>SomeBody</code>类表征送饭的人，不知道干嘛的。定时送饭。</li><li><code>main()</code>函数，构造饭碗，构造令狐冲和送饭人，然后设定冲哥被关了半个月。</li></ol><h1 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h1><p><a href="2016-04-06-learning-java-concurrency-wait-notify/DepositCase.java">DepositCase.java</a><br><a href="2016-04-06-learning-java-concurrency-wait-notify/LinghuChongCase.java">LinghuChongCase.java</a></p>]]></content>
      
        <categories>
            
            <category> Learning Java Concurrency </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Concurrency </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Learning Java Concurrency - synchronized]]></title>
      <url>http://www.wbprime.me/2016/04/01/java-concurrency-synchronized/</url>
      <content type="html"><![CDATA[<p>synchronized，同步控制器，是Java原生提供的多线程同步控制的工具，是Java语法的一部分。</p><p>synchronized在语义上等同于一个独占锁。synchronized可以用来修饰一个方法，标识该方法是可同步的；也可以用来修饰语句块，标识该语句块是同步的。在代码经过编译之后，JVM会在方法或者语句块的前后插入<code>monitorenter</code>和<code>monitorexit</code>的虚拟机指令，这两条指令又会隐式地调用<code>lock</code>原语。</p><p>synchronized可以使用在普通方法里，也可以使用在静态方法里。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Synchronized</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(<span class="keyword">final</span> String val)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"1: Begin add "</span> + val);</div><div class="line">        System.out.println(<span class="string">"1: Finish add "</span> + val);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">(<span class="keyword">final</span> String val)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"2: Begin add "</span> + val);</div><div class="line">        System.out.println(<span class="string">"2: Finish add "</span> + val);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">(<span class="keyword">final</span> String val)</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</div><div class="line">            System.out.println(<span class="string">"3: Begin add "</span> + val);</div><div class="line">            System.out.println(<span class="string">"3: Finish add "</span> + val);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">(<span class="keyword">final</span> String val)</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span>(Synchronized.class) &#123;</div><div class="line">            System.out.println(<span class="string">"4: Begin add "</span> + val);</div><div class="line">            System.out.println(<span class="string">"4: Finish add "</span> + val);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>synchronized的学习最好结合单例模式来进行。</p><h2 id="Version-0"><a href="#Version-0" class="headerlink" title="Version 0"></a>Version 0</h2><p>最简单的单例模式，可以表示如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton0</span> </span>&#123;</div><div class="line">     </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton0 instance_ = <span class="keyword">new</span> Singleton0(); <span class="comment">// init while class loaded</span></div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton0</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton0 <span class="title">instance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> instance_;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>本单例实现会在Singleton0类加载的时候实例化。使构造器私有是为了保证实例单一化，不允许外部构造新实例。如果要使用Java的序列化机制，可能需要额外的代码保证实例的唯一性。如果有可能用上反射构造对象，最简单的应对方法是在构造器里面抛出异常。</p><h2 id="Version-1-wrong"><a href="#Version-1-wrong" class="headerlink" title="Version 1 (wrong)"></a>Version 1 (wrong)</h2><p>如果想延迟初始化，可以使用下面的方案。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton1 instance_;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">instance</span><span class="params">()</span> </span>&#123; <span class="comment">// lazy inited but with multi thread problem</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == instance_) &#123;</div><div class="line">            instance_ = <span class="keyword">new</span> Singleton1();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> instance_;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>本实现的问题在于多线程同步导致的潜在的多次实例化。可以使用synchronized关键字来解决这个问题，因为synchronized可以保证同一时间只有一个线程进行操作，其他的线程被阻塞。</p><h2 id="Version-2"><a href="#Version-2" class="headerlink" title="Version 2"></a>Version 2</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton2 instance_;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Singleton2 <span class="title">instance</span><span class="params">()</span> </span>&#123;<span class="comment">// lazy inited</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == instance_) &#123;</div><div class="line">            instance_ = <span class="keyword">new</span> Singleton2();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> instance_;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Version-3-wrong"><a href="#Version-3-wrong" class="headerlink" title="Version 3 (wrong)"></a>Version 3 (wrong)</h2><p>然而上面的版本还可以进行改进。可以只在实例化的时候才加以同步控制，如果已经实例化了，就不需要同步控制代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton3 instance_;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton3</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton3 <span class="title">instance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == instance_) &#123;</div><div class="line">            <span class="keyword">synchronized</span>(Singleton3.class) &#123; <span class="comment">// multi thread may conflict here</span></div><div class="line">                instance_ = <span class="keyword">new</span> Singleton3();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> instance_;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>但是这种方式导致了新的问题：如果在两个线程都通过了为非空的条件判断时，一个线程（线程A）已经获取了同步器并创建了对象实例，另一个线程（线程B）则被阻塞以获取同步器，则线程B获取到同步器之后还是会去创建对象。</p><h2 id="Version-4-wrong"><a href="#Version-4-wrong" class="headerlink" title="Version 4 (wrong)"></a>Version 4 (wrong)</h2><p>这个时候需要使用到双重检锁机制：在获取同步器之前和之后都需要进行条件判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton4</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton4 instance_; <span class="comment">// variable visibility</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton4</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton4 <span class="title">instance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == instance_) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (Singleton4.class) &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == instance_) &#123;</div><div class="line">                    instance_ = <span class="keyword">new</span> Singleton4();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> instance_;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样看起来就可以了。但是还是会有一个问题：JVM无法保证变量instance<em>在多个线程间的可见性。具体的来说，就是线程A和线程B同时通过了第一次条件判断，然后线程A获取到了同步器并创建实例然后给instance</em>变量赋值；现在线程B拿到了同步器，开始做第二次条件测试，测试变量instance_的值是否非空。从时间顺序上说，线程A给变量赋完值之后，然后线程B再去取变量的值做判断，此时线程B拿到的肯定是非空的。然而，JVM并不保证线程B拿到的变量值是非空的。</p><p><del>众所周知的，处理器的执行指令的速度高出主内存读写速度好几个量级。为了防止处理器的指令执行经常被主内存读写操作所堵塞，JVM会对指令进行优化，不是所有的对变量的赋值操作都会立即写入到主内存；很合理的假设，JVM只要保证改变量在下一个读取之前被改写就可以了，这样既保证了程序的正确，也保证了JVM可以对指令进行重排序以优化执行效率。但问题是，在执行之前，指令的优化已经做完了；而多线程操作是执行期间的事情；万一线程B获取变量值的指令在线程A赋值变量指令之前执行怎么办？</del> 内存的可见性可以由同步器来保证，根据<a href="https://en.wikipedia.org/wiki/Double_checked_locking_pattern" target="_blank" rel="external">Double-checked locking</a>的说明，本实现的问题在于：实例化执行构造器的有可能是耗时操作，线程A拿到同步器然后执行构造器代码，JVM有可能已经对变量进行了赋值；线程B在第一次条件判断时可能认为对象已经初始化（实际上还没有初始化完成，或者线程A被挂起），就会直接使用部分初始化的对象。</p><h2 id="Version-5"><a href="#Version-5" class="headerlink" title="Version 5"></a>Version 5</h2><p>双重检锁的推荐实现是使用synchronized来保证多线程同步，使用volatile来保证变量的多线程可见性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton5</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton5 instance_; <span class="comment">// Add volatile to keep variable memory visibility</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton5</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton5 <span class="title">instance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == instance_) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (Singleton5.class) &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == instance_) &#123;</div><div class="line">                    instance_ = <span class="keyword">new</span> Singleton5();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> instance_;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Other-versions"><a href="#Other-versions" class="headerlink" title="Other versions"></a>Other versions</h2><p>到这里，基本上可以梳理清楚synchronized关键字的用法。</p><p>事实上，随着Java版本的提升，目前公认的比较好的Java单例模式实现是使用enum。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> Singleton6 &#123;</div><div class="line">    INSTANCE;</div><div class="line"></div><div class="line">    Singleton6() &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果不想使用enum关键字，也可以使用<a href="https://en.wikipedia.org/wiki/Initialization_on_demand_holder_idiom" target="_blank" rel="external">Initialization-on-demand holder idiom</a>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton7</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton7 INSTANCE = <span class="keyword">new</span> Singleton7();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton7</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton7 <span class="title">instance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当然也可以使用双检锁版本，或者其改进版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton8</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton8 instance_;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton8</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Singleton8 <span class="title">instance</span><span class="params">()</span> </span>&#123;</div><div class="line">        Singleton8 var = instance_;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == var) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (Singleton8.class) &#123;</div><div class="line">                var = instance_;</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == var) &#123;</div><div class="line">                    instance_ = var = <span class="keyword">new</span> Singleton8();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> var;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>局部变量<code>var</code>的引入是为了效率考虑，减少对<code>volatile</code>变量的读取次数。按照<a href="https://en.wikipedia.org/wiki/Double-checked_locking" target="_blank" rel="external">Double-checked locking</a>的说法，可以提升25%的效率。</p><h1 id="同步器的释放"><a href="#同步器的释放" class="headerlink" title="同步器的释放"></a>同步器的释放</h1><p>同一时间同一个对象只允许一个线程持有同步器，其他请求同步器的线程会被阻塞。当前线程超出了同步器约束的作用域（方法体或者代码块）或者当前线程调用了同一个对象的<code>wait()</code>方法。</p><p>具体来说，就是：</p><ol><li>当前线程正常退出作用域。</li><li>当前线程作用域内出现了未处理的Error或者Exception。</li><li>当前线程在作用域内执行了同步器锁定对象的<code>wait()</code>方法。</li></ol><p>特别的，以下两种情况可能会有迷惑性，当前执行线程是不会释放同步器的。</p><ol><li>当前线程在作用域内调用<code>Thread.sleep()</code>或<code>Thread.yield()</code>暂停执行。</li><li>当前线程在作用域内时，其他线程调用了当前线程的<code>suspend()</code>方法。</li></ol><h1 id="与-ReentrantLock-的比较"><a href="#与-ReentrantLock-的比较" class="headerlink" title="与 ReentrantLock 的比较"></a>与 ReentrantLock 的比较</h1><p>synchronized和java.util.concurrency包中的ReentrantLock在作用和用法上具有很高的相似性。前者是Java语法层面的多线程同步器，后者是API层面的互斥锁。</p><p>从功能上讲，ReentrantLock是synchronized的超集，增加了公平性、可中断性和条件控制。</p><ol><li><p>公平性是指当锁/同步器被释放时，等待的线程是否需要按照FIFO的顺序来获得锁/同步器。ReentrantLock在非公平锁之外还提供了非公平锁。</p></li><li><p>可中断性是指线程在被阻塞的时候，是否可以选择放弃等待，进行别的工作。RenentrantLock提供了设置超时时间获取锁的方法来提供可中断。</p></li><li><p>ReentrantLock提供了获得Condition的方法，可以用来进行多线程通信。</p></li></ol><p>从性能上讲，synchronized是Java锁，ReentrantLock是使用的底层系统实现，所以ReentrantLock会比synchronized具有更高的性能。根据《深入理解Java虚拟机》（周志明 著）的实验，JDK 1.6以后，JVM实现对synchronized的编译进行了大幅度的优化，两者的性能差别不大；在可以遇见到的未来，JVM的实现团队们肯定会逐步地优化作为Java语法的synchronized的编译和执行，而ReentrantLock作为Java附带的API库，优化的空间不是很大，所以二者的性能差异不应该成为进行选择的主要依据。</p><p>synchronized具有比ReentrantLock更底层的语法和更简单的使用；ReentrantLock具有比synchronized更优秀的性能和更复杂的功能。在实际的使用中，主要应根据使用场景来选择使用的工具；在synchronized可以解决问题的场合，不必要为了追求所谓的一点点性能就去使用ReentrantLock或者其他JUC的API。</p>]]></content>
      
        <categories>
            
            <category> Learning Java Concurrency </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Concurrency </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Learning Java Concurrency - Content]]></title>
      <url>http://www.wbprime.me/2016/03/31/Java-concurrency-content/</url>
      <content type="html"><![CDATA[<p>Java Concurrency是学习Java的过程中绕不过去的一道坎。既然绕不过去，只能一点一点去学习它，然后了解它。本系列是在学习Java Concurrency过程中的记录，鉴于网络上关于原理和实现代码的文章一大堆，所以本系列会尽量以实际应用为主。毕竟原理了解的再深，还是要落地为代码。</p><p>本系列主要参考<a href="http://www.blogjava.net/xylz/archive/2010/07/08/325587.html" target="_blank" rel="external">《深入浅出Java Concurrency》</a>系列。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ol><li><a href="/2016/04/11/learning-java-concurrency-thread-runnable/">Learning Java Concurrency - Thread &amp; Runnable</a></li><li><a href="/2016/04/13/learning-java-concurrency-futuretask-callable/">Learning Java Concurrency - FutureTask &amp; Callable</a></li><li><a href="/2016/04/01/java-concurrency-synchronized/">Learning Java Concurrency - synchronized</a></li><li><a href="/2016/04/06/learning-java-concurrency-wait-notify/">Learning Java Concurrency - wait &amp; notify</a></li><li><a href="/2016/04/07/learning-java-concurrency-reentrantlock-condition/">Learning Java Concurrency - ReentrantLock &amp; Condition</a></li><li><a href="/2016/03/30/java-concurrency-countdownlatch/">Learning Java Concurrency - CountDownLatch</a></li><li><a href="/2016/03/30/java-concurrency-cyclicbarrier/">Learning Java Concurrency - CyclicBarrier</a></li><li><a href="/2016/03/30/java-concurrent-semaphore/">Learning Java Concurrency - Semaphore</a></li><li><a href="/2016/04/07/learning-java-concurrency-reentrantreadwritelock/">Learning Java Concurrency - ReentrantReadWriteLock</a></li><li><a href="/2016/04/15/learning-java-concurrency-executors-1-executorservice/">Learning Java Concurrency - Executors(1)</a></li></ol>]]></content>
      
        <categories>
            
            <category> Learning Java Concurrency </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Concurrency </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Learning Java Concurrency - CyclicBarrier]]></title>
      <url>http://www.wbprime.me/2016/03/30/java-concurrency-cyclicbarrier/</url>
      <content type="html"><![CDATA[<p>CyclicBarrier，正如同名字里面表达出来的，是一个可以循环使用的屏障。与CountDownLatch类似，它可以用来表达等待某个状态，比如大家都到齐了，那么开始开会吧。与CountDownLatch不同的是，它可以多次等待，也就是可以等待多个状态。</p><p>好吃不过栗子。比如哈利波特的三强争霸赛，要一项一项任务地完成，大家都结束了（不管成功还是失败），才开始计划下一个任务。第一个是去挑战龙；然后是到海里面挑战人鱼群；最后是挑战伏地魔。每一个任务总是要等大家都完成了才开始。</p><p>还有一个栗子。大家一起去面试，有的公司为了省事，等凑齐了一波人才开始走流程。HR领着大家一起先笔试，然后安排初面官，然后安排复试官。每一关刷掉一波人，但是只有大家都结束了才进行下一轮。别问我哪里有这样的招聘部门，人家开心就好。</p><h1 id="CyclicBarrier-的简单使用"><a href="#CyclicBarrier-的简单使用" class="headerlink" title="CyclicBarrier 的简单使用"></a>CyclicBarrier 的简单使用</h1><p>首先，需要判断有哪些关卡，设计好通关条件。</p><p>然后，创建闯关的线程，各自吃好喝好，准备闯关。</p><p>然后，每过一关，可以有看守的线程出来引导，这也是一个任务。</p><p>之后，就可以开始了。</p><h1 id="CyclicBarrier-的API"><a href="#CyclicBarrier-的API" class="headerlink" title="CyclicBarrier 的API"></a>CyclicBarrier 的API</h1><p>CyclicBarrier是来做多线程同步的，首先需要确定有多少个线程参与同步。每一个线程都需要调用await()表示自己已经就绪；当所有线程都调用了await()之后，CyclicBarrier达到了第一个屏障。此时可以简单地放行，也可以设置一个任务，由最后一个就绪的线程执行，执行完才放行。</p><ol><li>CyclicBarrier(int n)<br>构造一个有n个线程参与同步的同步器，阻塞所有线程直到阻塞的线程个数大于等于n。</li><li>CyclicBarrier(int n, Runnable action)<br>构造一个有n个线程参与同步的同步器，阻塞所有线程直到阻塞的线程个数大于等于n。接触阻塞之前，由最后一个达到的新城执行action。</li><li>int await() throws InterruptedException, BrokenBarrierException<br>阻塞调用线程，直到所有n个线程都调用了本方法。最后一个调用本方法的线程，需要去执行设置的阻塞任务，如果设置了的话。</li><li>int await(long timeout, TimeUnit unit) throws InterruptedException, BrokenBarrierException, TimeoutException<br>同上，加上了超时限制。返回值表示还有多少个线程未就绪，0表示调用线程是最后一个线程。</li><li>int getParties()<br>返回构造器传入的n值。</li><li>boolean isBroken()<br>是否被损坏，损坏原因可能是线程被中断或者超时，或者阻塞action发生异常。</li><li>void reset()<br>重置到初始化状态。</li><li>int getNumberWaiting()<br>返回当前已经等待的线程数。</li></ol><p>CyclicBarrier内部是通过一个ReentrantLock实例来进行同步的，用该实例的一个Condition实例来控制是否达到放行状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** The lock for guarding barrier entry */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line"><span class="comment">/** Condition to wait on until tripped */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Condition trip = lock.newCondition();</div></pre></td></tr></table></figure><h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> me.wbprime.showcase.concurrent;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> com.google.common.collect.ImmutableList;</div><div class="line"><span class="keyword">import</span> org.joda.time.LocalDate;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Random;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.BrokenBarrierException;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.CyclicBarrier;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Class: CyclicBarrierCase</div><div class="line"> * Date: 2016/03/30 13:35</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Elvis Wang [mail@wbprime.me]</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierCase</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Interviewee</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> CyclicBarrier barrier;</div><div class="line">        <span class="keyword">private</span> List&lt;String&gt;  jobs;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Interviewee</span><span class="params">(<span class="keyword">final</span> List&lt;String&gt; dt, <span class="keyword">final</span> CyclicBarrier b)</span> </span>&#123;</div><div class="line">            barrier = b;</div><div class="line">            jobs = dt;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">final</span> String myName = Thread.currentThread().getName();</div><div class="line"></div><div class="line">                <span class="keyword">final</span> Random rnd = <span class="keyword">new</span> Random(System.currentTimeMillis());</div><div class="line"></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">final</span> String eachJob: jobs) &#123;</div><div class="line">                    barrier.await();</div><div class="line">                    System.out.println(myName + <span class="string">": Start processing job: "</span> + eachJob);</div><div class="line"></div><div class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> sleepTime = rnd.nextInt(<span class="number">1000</span>) + <span class="number">1</span>;</div><div class="line">                    Thread.sleep(sleepTime);</div><div class="line"></div><div class="line">                    System.out.println(myName + <span class="string">": Finish processing job: "</span> + eachJob);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                <span class="comment">// do nothing</span></div><div class="line">            &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</div><div class="line">                <span class="comment">// do nothing</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HR</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">HR</span><span class="params">()</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"Hello everyone, go on to next challenge"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> memberCount = <span class="number">3</span>;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> List&lt;String&gt; workflow = ImmutableList.of(</div><div class="line">            <span class="string">"Self introduction"</span>,</div><div class="line">            <span class="string">"Coding exam"</span>,</div><div class="line">            <span class="string">"Tech interview"</span>,</div><div class="line">            <span class="string">"Leader interview"</span>,</div><div class="line">            <span class="string">"HR interview"</span>,</div><div class="line">            <span class="string">"Offer"</span></div><div class="line">        );</div><div class="line"></div><div class="line">        <span class="keyword">final</span> CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier(memberCount, <span class="keyword">new</span> HR());</div><div class="line"></div><div class="line">        <span class="keyword">final</span> ExecutorService executor = Executors.newCachedThreadPool();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; memberCount; i ++) &#123;</div><div class="line">            executor.execute(<span class="keyword">new</span> Interviewee(workflow, barrier));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        executor.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="示例代码说明"><a href="#示例代码说明" class="headerlink" title="示例代码说明"></a>示例代码说明</h1><ol><li><p>某公司公开招聘，一共有3个人过来面试，HR进行安排。</p></li><li><p>Interviewee类表征前来面试的人，手上有一份日程表（jobs），每一个任务都需要HR领着所有人一起开始。</p></li><li><p>HR类表征协调的人力资源，每次准备下一关时，可以给大家解释疑问，加油打气。</p></li><li><p>main函数里面，创建日程表，创建CyclicBarrier实例，创建HR和应试者，然后大家开始面试，从自我介绍开始吧。</p></li></ol><h1 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h1><ol><li><a href="CyclicBarrierCase.java">CyclicBarrierCase.java</a></li></ol>]]></content>
      
        <categories>
            
            <category> Learning Java Concurrency </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Concurrency </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Learning Java Concurrency - CountDownLatch]]></title>
      <url>http://www.wbprime.me/2016/03/30/java-concurrency-countdownlatch/</url>
      <content type="html"><![CDATA[<p>CountDownLatch 是一种比较有意思的线程同步方法，主要用于需要同步启动的环境中。</p><p>举个栗子，部门进行聚餐要等到大家都到齐了才能开动。这个时候CountDownLatch可以理解为“还有多少人没有到”这个东西，来了一个，这个东西的值就会减1。一直到人都到齐了，这个东西的值变为了0,也就是可以开吃了。</p><p>举个栗子，通用的make进行多工程代码编译，必须所有工程编译完了才能结束。</p><p>举个栗子，项目上线，各个模块都上线完了，leader说一句OK，大家才能走。</p><p>要注意以上几个栗子都是每个线程减1，但是实际中具体减多少不做限制。</p><p>比如，猫有9条命，两个人你一下我一下一刀一刀砍上去，然后它就死了。这个也可用CountDownLatch来描述。</p><a id="more"></a><h1 id="CountDownLatch-的简单使用"><a href="#CountDownLatch-的简单使用" class="headerlink" title="CountDownLatch 的简单使用"></a>CountDownLatch 的简单使用</h1><p>首先，估计要参与工作的子工作数，创建一个CountDownLatch。</p><p>然后，创建干活的线程，持有该CountDownLatch实例，调用await()等待事件。比如具体到聚餐就是“开吃”，具体到9命猫就是“命没了要死了”。</p><p>然后，创建多个准备的线程，每个线程持有相同的CountDownLatch实例。这些线程用来做准备工作，争取早日达到能干活的状态。具体到聚餐上就是“人一个一个来”，具体到猫上就是“一次一次被砍死”。</p><p>然后，就结束了。</p><h1 id="CountDownLatch-的-API"><a href="#CountDownLatch-的-API" class="headerlink" title="CountDownLatch 的 API"></a>CountDownLatch 的 API</h1><ol><li><code>CountDownLatch(int)</code><br>构造一个可以由n个线程共享的闭锁。</li><li><code>void await() throws InterruptedException</code><br>等待原始的n变成0。调用的线程会被阻塞，直到条件达到。</li><li><code>boolean await(long timeout, TimeUnit unit) throws InterruptedException</code><br>等待原始的n变成0。调用的线程会被阻塞，直到条件达到(return true)或者超时(return false)。</li><li><code>void countDown()</code><br>n - 1。</li><li><code>long getCount()</code><br>查询n的值。</li></ol><p>CountDownLatch内部有一个静态类Sync。CountDownLatch的所有方法都委托到内部一个Sync实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span></span></div></pre></td></tr></table></figure><p>Sync可以理解为一个共享锁，主要使用AbstractQueuedSynchronizer的共享锁方面的功能。</p><h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> me.wbprime.showcase.concurrent;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Random;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Class: CountDownLatchCase</div><div class="line"> * Date: 2016/03/30 13:05</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Elvis Wang [mail@wbprime.me]</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchCase</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Module</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> CountDownLatch latch;</div><div class="line">        <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Module</span><span class="params">(<span class="keyword">final</span> String name, <span class="keyword">final</span> CountDownLatch val)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.name = (<span class="keyword">null</span> != name) ? name : <span class="string">"Anonymous"</span>;</div><div class="line">            <span class="keyword">this</span>.latch = val;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"Begin to deploy module: "</span> + name);</div><div class="line"></div><div class="line">            <span class="keyword">final</span> Random rnd = <span class="keyword">new</span> Random(System.currentTimeMillis());</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> sleepTime = rnd.nextInt(<span class="number">1000</span>) + <span class="number">1</span>;</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(sleepTime);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                <span class="comment">// do nothing</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            System.out.println(<span class="string">"Finish deploying module: "</span> + name);</div><div class="line"></div><div class="line">            latch.countDown();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> CountDownLatch latch;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Controller</span><span class="params">(<span class="keyword">final</span> CountDownLatch val)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.latch = val;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                latch.await();</div><div class="line">                System.out.println(<span class="string">"Finish deploying all modules"</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                <span class="comment">// do nothing</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> moduleCount = <span class="number">20</span>;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> CountDownLatch syncLatch = <span class="keyword">new</span> CountDownLatch(moduleCount);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">8</span>);</div><div class="line"></div><div class="line">        executorService.execute(<span class="keyword">new</span> Controller(syncLatch));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; moduleCount; i++) &#123;</div><div class="line">            executorService.execute(<span class="keyword">new</span> Module(<span class="string">"Module "</span> + i, syncLatch));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        executorService.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="示例代码说明"><a href="#示例代码说明" class="headerlink" title="示例代码说明"></a>示例代码说明</h1><ol><li><p>有一个项目需要上线。项目的各个子模块解耦合做的非常好，彼此可以独立上线。但是由于上线有BOSS看着，所以所有模块的团队不管上没上线完，都得在公司里呆着，防止出意外。</p></li><li><p>Controller 类表征一个上线通知。所有模块上线完了，整个项目才算上线完了。BOSS才发话，大家才可以回家。</p></li><li><p>Module 类表征一个一个的模块。各个模块自己独立上线，上线完了通知项目组一声，然后等别的模块上线。</p></li><li><p>main函数里面，创建了CountDownLatch实例，创建了项目组，创建了各个模块，然后大家一起等上线。</p></li></ol><h1 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h1><ol><li><a href="CountDownLatchCase.java">CountDownLatchCase.java</a></li></ol>]]></content>
      
        <categories>
            
            <category> Learning Java Concurrency </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Concurrency </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Learning Java Concurrency - Semaphore]]></title>
      <url>http://www.wbprime.me/2016/03/30/java-concurrent-semaphore/</url>
      <content type="html"><![CDATA[<p>Semaphore，信号量。信号量可以理解为令牌掌牌使，负责令牌的发放；当线程需要执行任务时，先到信号量处领取令牌，领取到了令牌再去执行任务；如果令牌被领光了，就需要一直等待；如果任务执行完了，需要到信号量处交还令牌。很简单的逻辑！</p><p>还是吃个栗子，地铁里面公厕，一般也就3、4个坑位。人有三急，当你有需要的时候，还必须得靠这个解决。这个时候，如果公厕里没有人，或者还剩最后一个坑位，那就啥也别说了，进去吧。但是，如果，满了。就，只有，等，了。不着急可以等一等；实在憋不住的，可以催一催。但是不管急不急，都要等里面随便一个里面出来人了才能进去。这个就是典型的信号量。</p><p>还有就是非常典型的生产者/消费者问题了。有一个仓库，里面的仓位是有限的。生产者只有当仓库里面有空仓位时才能进行生产；如果没有空仓位，则需要等待；如果生产了一次，则仓库少了一个空仓位。消费者只有当仓库里有非空仓位时才能消费；如果没有非空仓位，就需要等待；如果消费了一次，仓库里多了一个空仓位。</p><h1 id="Semaphore的简单实用"><a href="#Semaphore的简单实用" class="headerlink" title="Semaphore的简单实用"></a>Semaphore的简单实用</h1><p>首先，初始化信号量控制的令牌的个数。</p><p>然后，消费者去申请令牌，可能申请到，也可能被阻塞。</p><p>然后，生产者去释放令牌。</p><p>然后，交互就可以开始了。</p><p>注意，信号量只是保证资源的可用性，当资源不可用时，阻塞线程；然而线程使用资源的过程不保证是原子的，需要另外加锁控制。</p><p>举个例子，你成功申请到了令牌开始执行任务，但是这个任务可能失败，可能成功，还有可能部分成功部分失败。</p><h1 id="Semaphore的API"><a href="#Semaphore的API" class="headerlink" title="Semaphore的API"></a>Semaphore的API</h1><ol><li>Semaphore(int permits) &amp; Semaphore(int permits, boolean fair)<br>构造一个信号量实例（可以是公平的或者非公平的），默认是非公平的。</li><li>void acquire() throws InterruptedException<br>申请一枚令牌；如果没有可用令牌，则阻塞。</li><li>void acquireUninterruptibly()<br>同上；当调用线程被中断时，不抛出异常。</li><li>void acquire(int permits) throws InterruptedException<br>申请多枚令牌；如果没有可用令牌，则阻塞。</li><li>void acquireUninterruptibly(int permits)<br>同上；当调用线程被中断时，不抛出异常。</li><li>boolean tryAcquire()<br>申请一枚令牌；立即返回，申请成功返回true，反之false。</li><li>boolean tryAcquire(int permits)<br>申请多枚令牌；立即返回，申请成功返回true，反之false。</li><li>boolean tryAcquire(long timeout, TimeUnit unit) throws TimeoutException<br>申请一枚令牌，不允许超时；立即返回，申请成功返回true，反之false。</li><li>boolean tryAcquire(int permits, long timeout, TimeUnit unit) throws TimeoutException<br>申请多枚令牌，不允许超时；立即返回，申请成功返回true，反之false。</li><li>void release()<br>归还一枚令牌。</li><li>void release(int permits)<br>归还多枚令牌。</li><li>int availablePermits()<br>当前可用的令牌数。</li><li>int drainPermits()<br>申请获取所有可用令牌，返回申请到的令牌数。</li><li>boolean isFair()<br>是否公平。</li></ol><p>Semaphore内部有一个静态类Sync来实现公平策略，NonFairSync来实现非公平策略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span></span></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="title">static</span> <span class="title">final</span> <span class="title">class</span> <span class="title">NonfairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span></div></pre></td></tr></table></figure><p>公平与非公平的区别在于申请令牌的调用中是否可以插队。公平的策略是将所有线程放入一个FIFO队列，按照出队顺序分配令牌；非公平策略是如果申请的时候有新的释放出来的令牌，直接获取，不需要排队。由于线程阻塞然后被唤醒的开销可能会比较大，所以非公平可能会比公平策略有潜在的更高的性能。</p><p>公平与非公平策略只影响申请令牌时的操作；如果已经被放入了等待队列，则公平与非公平没有区别。</p><h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> me.wbprime.showcase.concurrent;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Class: SemaphoreCase</div><div class="line"> * Date: 2016/03/30 18:15</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Elvis Wang [mail@wbprime.me]</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreCase</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Item</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</div><div class="line">            name = String.format(<span class="string">"%s %d"</span>, Thread.currentThread().getName(), idx);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> name;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> getName();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WareHouse</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Item&gt; items;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Semaphore notFull;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Semaphore notEmpty;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Semaphore mutex;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WareHouse</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> cnt)</span> </span>&#123;</div><div class="line">            items = Lists.newArrayListWithExpectedSize(cnt);</div><div class="line">            <span class="keyword">this</span>.notFull = <span class="keyword">new</span> Semaphore(cnt);</div><div class="line">            <span class="keyword">this</span>.notEmpty = <span class="keyword">new</span> Semaphore(<span class="number">0</span>);</div><div class="line">            <span class="keyword">this</span>.mutex = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">itemsString</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> items.toString();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">final</span> Item obj)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != obj) &#123;</div><div class="line"></div><div class="line">                <span class="comment">/*</span></div><div class="line">                 * 获取非满的保证</div><div class="line">                 *</div><div class="line">                 * 如果是满的，则挂起</div><div class="line">                 */</div><div class="line">                notFull.acquire();</div><div class="line"></div><div class="line">                <span class="comment">/*</span></div><div class="line">                 * 获取容器操作的独占保证</div><div class="line">                 */</div><div class="line">                mutex.acquire();</div><div class="line"></div><div class="line">                items.add(obj);</div><div class="line"></div><div class="line">                System.out.println(<span class="string">"Put "</span> + obj.getName());</div><div class="line">                System.out.println(items.toString());</div><div class="line"></div><div class="line">                <span class="comment">/*</span></div><div class="line">                 * 结束容器操作</div><div class="line">                 */</div><div class="line">                mutex.release();</div><div class="line"></div><div class="line">                <span class="comment">/*</span></div><div class="line">                 * 保证非空，允许take操作（唤醒挂起线程）</div><div class="line">                 */</div><div class="line">                notEmpty.release();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Item <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line"></div><div class="line">            <span class="comment">/*</span></div><div class="line">             * 获取非空的保证</div><div class="line">             *</div><div class="line">             * 如果是空的，则挂起</div><div class="line">             */</div><div class="line">            notEmpty.acquire();</div><div class="line"></div><div class="line">            <span class="comment">/*</span></div><div class="line">             * 获取容器操作的独占保证</div><div class="line">             */</div><div class="line">            mutex.acquire();</div><div class="line"></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> lastIdx = items.size() - <span class="number">1</span>;</div><div class="line">            <span class="keyword">final</span> Item item = items.get(lastIdx);</div><div class="line">            items.remove(lastIdx);</div><div class="line"></div><div class="line">            System.out.println(<span class="string">"Take "</span> + item.getName());</div><div class="line">            System.out.println(items.toString());</div><div class="line"></div><div class="line">            <span class="comment">/*</span></div><div class="line">             * 结束容器操作</div><div class="line">             */</div><div class="line">            mutex.release();</div><div class="line"></div><div class="line">            <span class="comment">/*</span></div><div class="line">             * 保证非满，允许put操作（唤醒挂起进程）</div><div class="line">             */</div><div class="line">            notFull.release();</div><div class="line"></div><div class="line">            <span class="keyword">return</span> item;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> WareHouse wareHouse;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(<span class="keyword">final</span> WareHouse s)</span> </span>&#123;</div><div class="line">            wareHouse = s;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                    <span class="keyword">final</span> Item itm = <span class="keyword">new</span> Item(i++);</div><div class="line"></div><div class="line">                    wareHouse.put(itm);</div><div class="line"></div><div class="line">                    Thread.sleep(<span class="number">1000</span>);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> WareHouse wareHouse;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(<span class="keyword">final</span> WareHouse s)</span> </span>&#123;</div><div class="line">            wareHouse = s;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                    wareHouse.take();</div><div class="line"></div><div class="line">                    Thread.sleep(<span class="number">1500</span>);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> WareHouse wareHouse = <span class="keyword">new</span> WareHouse(<span class="number">5</span>);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> ExecutorService executor = Executors.newCachedThreadPool();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> countOfConsumers = <span class="number">3</span>;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> countOfProducers = <span class="number">5</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; countOfProducers; i++) &#123;</div><div class="line">            executor.execute(<span class="keyword">new</span> Producer(wareHouse));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; countOfConsumers; i++) &#123;</div><div class="line">            executor.execute(<span class="keyword">new</span> Consumer(wareHouse));</div><div class="line">        &#125;</div><div class="line"></div><div class="line"><span class="comment">//        try &#123;</span></div><div class="line"><span class="comment">//            executor.awaitTermination(1, TimeUnit.MINUTES);</span></div><div class="line"><span class="comment">//        &#125; catch (InterruptedException e) &#123;</span></div><div class="line"><span class="comment">//            executor.shutdown();</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="示例代码说明"><a href="#示例代码说明" class="headerlink" title="示例代码说明"></a>示例代码说明</h1><ol><li><p>典型的生产者/消费者模型，WareHouse类表征仓库，Consumer类表征消费者，Producer类表征生产者。</p></li><li><p>notFull信号量负责发放生产令牌，由生产者acquire，消费者release。</p></li><li><p>notEmpty信号量负责发放消费令牌，由消费者acquire，生产者release。</p></li><li><p>mutex信号量表示生产和消费的互斥，用来保证列表元素读取的线程安全性，可以用ReentrantLock代替。</p></li></ol><h1 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h1><ol><li><a href="SemaphoreCase.java">SemaphoreCase.java</a></li></ol>]]></content>
      
        <categories>
            
            <category> Learning Java Concurrency </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Concurrency </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring: Annotation based configuration]]></title>
      <url>http://www.wbprime.me/2015/06/08/Spring-Annotation-based-configuration/</url>
      <content type="html"><![CDATA[<p>Despite XML-based configuration, the Springframework provides full support for annotation-based metadata configuration.</p><p>XML-based configuration isolates the configuration metadata from source code using independent xml files, while annotation-based configuration mixes source code and configuration data. Thus which is the better one to collaborate with the Springframework? The answer is it depends. The XML one performes good isolation between source code and configuration, however you need to bear its stupid and complex and long-but-useless xml syntax, and you must do additional work to sync youc onfiguration data and you source code when you need to update your code, which however is very frequent during development. The annotation one is easy-understanding and simple to update/sync your configuration with your source code. The cons is obvious that it addes more semantics to a regular Java bean leading to a mixing of configuration and source.</p><p>Fortunately you can use both styels and mix them together. Note that annotation-based configuration is performed before XMl injection.</p><p>Note that almost all annotation-based configurations are per-class other than per-bean.</p><h1 id="Dependency-Injection-Annotations"><a href="#Dependency-Injection-Annotations" class="headerlink" title="Dependency Injection Annotations"></a>Dependency Injection Annotations</h1><p>Beans can be injected into a host bean through annotations. Typical DI-related annotations are <code>@Required</code>, <code>@Autowired</code>, <code>@Resource</code>, <code>@PostConstruct</code>, <code>@PreDestroy</code>.</p><p>To enable annotations <code>@Required</code>, <code>@Autowired</code>, <code>@Resource</code>, <code>@PostConstruct</code>, <code>@PreDestroy</code>, you need to add a <code>&lt;context:annotation-config /&gt;</code> element in your beans xml file.</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;

    &lt;context:annotation-config /&gt;
&lt;/beans&gt;
</code></pre><p>Alternatively you can include explicite <code>RequiredAnnotationBeanPostProcessor</code>, <code>AutowiredAnnotationBeanPostProcessor</code>, <code>CommonAnnotationBeanPostProcessor</code> or <code>PersistenceAnnotationBeanPostProcessor</code> dependencies instead.</p><p>To make it clear, these annotations help DI procedure, while the annotation detection and bean recovery are done by XML definitions.</p><h2 id="Required"><a href="#Required" class="headerlink" title="@Required"></a><code>@Required</code></h2><p>The <code>@Required</code> annotation applies to bean property setter to specify that this property must be populated at configuration time. This annotation is introduced from Spring 2.0.</p><pre><code>public class SimpleMovieLister {

    private MovieFinder movieFinder;

    @Required
    public void setMovieFinder(MovieFinder movieFinder) {
        this.movieFinder = movieFinder;
    }

    // more methods
}
</code></pre><h2 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a><code>@Autowired</code></h2><p>The <code>@Autowired</code> annotation performs autowiring by type. This annotation is introduced from Spring 2.5.</p><p>The <code>@Autowired</code> annotation can be applied to field.</p><pre><code>public class OuterBean {
    @Autowired
    private InnerBean inner;
}
</code></pre><p>Applied to setter:</p><pre><code>public class OuterBean {
    private InnerBean inner;

    @Required
    public void setInner(InnerBean inner) {
        this.inner = inner;
    }
}
</code></pre><p>Applied to regular (set) method:</p><pre><code>public class OuterBean {
    private InnerBean1 inner1;
    private InnerBean2 inner2;

    @Autowired
    public void prepare(InnerBean1 inner1, InnerBean2 inner2) {
        this.inner1 = inner1;
        this.inner2 = inner2;
    }
}
</code></pre><p>Applied to constructor:</p><pre><code>public class OuterBean {
    private InnerBean inner;

    @Autowired
    public void OuterBean(InnerBean inner) {
        this.inner = inner;
    }
}
</code></pre><p>There should only be one constructor annotated with <code>@Autowired</code> in a class. However you can use <code>required</code> attribute to annotate multi constructor. Typically the target constructor is <code>public</code> but not limited to.</p><pre><code>public class OuterBean {
    private InnerBean inner;

    @Autowired
    public void OuterBean(InnerBean inner) {
        this.inner = inner;
    }

    @Autowired(required=false)
    public void OuterBean(InnerBean inner, AnotherBean anther) {
        this.inner = inner;
    }
}
</code></pre><p>Applied to array:</p><pre><code>public class OuterBean {
    @Autowired
    private InnerBean[] inners;
}
</code></pre><p>Applied to typed collection:</p><pre><code>public class OuterBean {
    @Autowired
    private Set&lt;InnerBean&gt; inners;
}
</code></pre><p>Specially, a <code>Map</code> can be autowired if and only if its key type is <code>String</code>.</p><pre><code>public class OuterBean {
    @Autowired
    private Map&lt;String, InnerBean&gt; innersMap;
}
</code></pre><h2 id="Autowired-Combined-with-Qualifier"><a href="#Autowired-Combined-with-Qualifier" class="headerlink" title="@Autowired Combined with @Qualifier"></a><code>@Autowired</code> Combined with <code>@Qualifier</code></h2><p>When there are multi candidates for auotwiring, <code>@Qualifier</code> can help you control wiring details.</p><p>Generally you can specify which bean is needed among multi beans of the same type. For example:</p><p>In your annotation source file:</p><pre><code>public class OuterBean {
    @Autowired
    @Qualifier(&quot;main&quot;)
    private InnerBean inner;
}
</code></pre><p>In your xml file:</p><pre><code>&lt;bean id=&quot;inner1&quot; class=&quot;InnerBean&quot;&gt;
    &lt;qualifier value=&quot;main&quot;/&gt;
&lt;/bean&gt;

&lt;bean id=&quot;inner2&quot; class=&quot;InnerBean&quot;&gt;
    &lt;qualifier value=&quot;action&quot;/&gt;
&lt;/bean&gt;

&lt;bean id=&quot;outer&quot; class=&quot;OuterBean&quot;/&gt;
</code></pre><p>Thus bean <code>inner1</code> will be autowired to bean <code>outer</code>.</p><p>The <code>@Qualifier</code> can also be applied to a construtor argument.</p><pre><code>public class OuterBean {
    @Autowired
    public void OuterBean(@Qualifier(&quot;main&quot;) InnerBean inner) {
    }
}
</code></pre><p>If the value of <code>@Qualifier</code> is not given, the bean id/name will be used as a fallback qualifier value.</p><h2 id="Custom-Qualifier"><a href="#Custom-Qualifier" class="headerlink" title="Custom @Qualifier"></a>Custom <code>@Qualifier</code></h2><p>Dispite value based <code>@Qualifier</code> identification, you can custom your own qualifier annotation and use type based <code>@Qualifier</code>.</p><p>Given:</p><pre><code>@Target({ElementType.FIELD, ElementType.PARAMETER})
@Retention(RetentionPolicy.RUNTIME)
@Qualifier
public @interface Genre {
    String value();
}

public class OuterBean {
    @Autowired
    @Genre(&quot;Action&quot;)
    private InnerBean inner;
}
</code></pre><p>Thus following configuration works:</p><pre><code>&lt;context:annotation-config/&gt;

&lt;bean class=&quot;OuterBean&quot;&gt;
    &lt;qualifier type=&quot;Genre&quot; value=&quot;Action&quot;/&gt;
&lt;/bean&gt;
</code></pre><h2 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a><code>@Resource</code></h2><p>The Spring introduces support for JSR-250 annotations like <code>@Resource</code> from version 2.5. <code>@Resource</code> works on fields or setters, taking a name attribute indicating the bean id/name to be injected. One of the differences between <code>@Resource</code> and <code>@Autowired</code> is that the former performs by-name injection while the latter by-type.</p><pre><code>public class OuterBean {

    @Resource(name=&quot;inner&quot;)
    private InnerBean inner;

    @Resource
    private InnerBean inner1;

    private InnerBean inner2;

    @Resource
    public void setInner2(InnerBean inner2) { }
}
</code></pre><p>The bean <code>inner</code> will be injected as it is specified explicitely. However, if not specified, a fallback injection will be done by setting the field name (for field annotation, i.e., <code>inner1</code>) or the arguement name (for setter method, e.g., <code>inner2</code>).</p><h2 id="PostConstruct-and-PreDestroy"><a href="#PostConstruct-and-PreDestroy" class="headerlink" title="@PostConstruct and @PreDestroy"></a><code>@PostConstruct</code> and <code>@PreDestroy</code></h2><p>Similar to XML based configuration, the Spring annotation based configuration also provides annotations to support bean lifecycle management.</p><p>The <code>@PostConstruct</code> annotation specifies the callback after bean instantiation and dependency injection.</p><p>The <code>@PreDestroy</code> annotation specifies the callback before bean destruction.</p><pre><code>public class OuterBean {
    @PostConstruct
    public void myCustomInit() {
    }

    @PreDestroy
    public void myCustomDestroy() {
    }
}
</code></pre><h1 id="Classpath-Scanning"><a href="#Classpath-Scanning" class="headerlink" title="Classpath Scanning"></a>Classpath Scanning</h1><p>Last annotations demonstrate ways to help dependency injection, however dependency beans themself need to be specified using traditional XML definitions.</p><p>More or less, the Springframework also provides annotations to help bean registration and dependecy detection, removing the need of xml files.</p><h2 id="Component-Repository-Service-and-Controller"><a href="#Component-Repository-Service-and-Controller" class="headerlink" title="@Component, @Repository, @Service and @Controller"></a><code>@Component</code>, <code>@Repository</code>, <code>@Service</code> and <code>@Controller</code></h2><p>The <code>@Component</code> annotation is a generic marker of any conponents that are designing to managed by the Spring container. That is to say, that the any class decorated by <code>@Component</code> would be instatiated as a bean, and the beans lifecycle is managed by the Spring container, and the beans will be scanned and filtered in DI step.</p><p>The <code>@Component</code> annotation provides three specializtions concentrating on semantics. The <code>@Repository</code> annotation marks, say, a repository type (DAO). The <code>@Service</code> annotation marks a service layer type. The <code>@Controller</code> annotation marks a presentation layer type. These annotations differ in semantics and may be used differently by the Spring framework in future releases.</p><pre><code>@Component
public class MyCustomBean {}

@Repository
public class MyCustomDAO {}

@Service
public class MyCustomService {}

@Controller
public class MyCustomController {}
</code></pre><p>To enable classpath scanning, you need additional work. Adding following lines in your xml configuration file:</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;

    &lt;context:component-scan base-package=&quot;org.example&quot;/&gt;

&lt;/beans&gt;
</code></pre><p>The <code>&lt;context:component-scan /&gt;</code> calles classpath auto scanning, specifying the qualified package name <code>org.example</code>. This implicit enables the <code>&lt;context:annotation-config /&gt;</code> which enables <code>AutowiredAnnotationBeanPostProcessor</code>, <code>CommonAnnotationBeanPostProcessor</code> and <code>RequiredAnnotationBeanPostProcessor</code> at the same time. So the <code>@Required</code>, <code>@Autowired</code>, <code>@PostConstruct</code> and <code>@PreDestroy</code> annotations are also out of box.</p><p>Also you can implement your own annotations based on <code>@Component</code> meta annotation.</p><pre><code>// Spring will treat @MyComponent in the same way as @Component
@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Component 
public @interface MyComponent { }
</code></pre><p>The custom <code>@MyComponent</code> annotation will be treated like the <code>@Component</code> besides more costom semantics.</p><p>The bean name for a annotated class is generated by the Spring following a default rule: returning the uncapitalized non-qualified class name.</p><p>i.g.,</p><pre><code>@Repository
public class MyCustomDAO {}
</code></pre><p>will auto introduce a bean named *myCustomDAO”.</p><p>However, if you don’t like this name, you can set <code>name</code> using <code>@Repository(&quot;myBestName&quot;)</code>. The <code>name</code> property applies to <code>@Component</code>, <code>@Repository</code>, <code>@Service</code> and <code>@Controller</code>.</p><p>If you don’t like the default naming rule, you can use <code>BeanNameGenerator</code> interface.</p><h2 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a><code>@Scope</code></h2><p>Specifying bean scope using the <code>@Scope</code> annotation.</p><pre><code>@Scope(&quot;prototype&quot;)
@Repository
public class MyCustomBean { }
</code></pre><h2 id="Lazy"><a href="#Lazy" class="headerlink" title="@Lazy"></a><code>@Lazy</code></h2><p>Specifying bean lazy instantiating using the <code>@Lazy</code> annotation.</p><pre><code>@Lazy
@Repository
public class MyCustomBean { }
</code></pre><h2 id="Beans-Filtering"><a href="#Beans-Filtering" class="headerlink" title="Beans Filtering"></a>Beans Filtering</h2><p>You may want to cusotm the beans are to be scanned by setting some filters. You can achieve this by adding <code>include-filter</code> and <code>exclude-filter</code> sub-element to <code>component-scan</code> element.</p><pre><code>&lt;beans&gt;
    &lt;context:component-scan base-package=&quot;org.example&quot;&gt;
        &lt;context:include-filter type=&quot;regex&quot;
                expression=&quot;.*Stub.*Repository&quot;/&gt;
        &lt;context:exclude-filter type=&quot;annotation&quot;
                expression=&quot;org.springframework.stereotype.Repository&quot;/&gt;
    &lt;/context:component-scan&gt;
&lt;/beans&gt;
</code></pre><p>This implies the configuration will ignore all <code>@Repository</code> annotations and using “stub Repository” instead.</p><p>You must set <code>type</code> and <code>expression</code> attributes for a <code>include-filter</code> or a <code>exclude-filter</code> element. Types are <em>annotation</em>, <em>assignable</em>, <em>aspectj</em>, <em>regex</em> and <em>custom</em>.</p><table><thead><tr><th>Filter Type</th><th>Example Expression</th><th>Description</th></tr></thead><tbody><tr><td>annotation (default)</td><td>org.example.SomeAnnotation</td><td>An annotation to be present at the type level in target components.</td></tr><tr><td>assignable</td><td>org.example.SomeClass</td><td>A class (or interface) that the target components are assignable to (extend/implement).</td></tr><tr><td>aspectj</td><td>org.example..*Service+</td><td>An AspectJ type expression to be matched by the target components.</td></tr><tr><td>regex</td><td>org.example.Default.*</td><td>A regex expression to be matched by the target components class names.</td></tr><tr><td>custom</td><td>org.example.MyTypeFilter</td><td>A custom implementation of the org.springframework.core.type .TypeFilter interface.</td></tr></tbody></table><h1 id="JSR-3-0-Annotations-Alternatives"><a href="#JSR-3-0-Annotations-Alternatives" class="headerlink" title="JSR 3.0 Annotations Alternatives"></a>JSR 3.0 Annotations Alternatives</h1><p>You can use also JSR 3.0 standard annotations for dependency injection. These annotations are scanned in the same way as the Spring annotations.</p><p>To use JSR 3.0 annotations, you need to add relevant jars to your classpath.</p><p>For maven, adding following lines:</p><pre><code>&lt;dependency&gt;
    &lt;groupId&gt;javax.inject&lt;/groupId&gt;
    &lt;artifactId&gt;javax.inject&lt;/artifactId&gt;
    &lt;version&gt;1&lt;/version&gt;
&lt;/dependency&gt;
</code></pre><h2 id="Inject"><a href="#Inject" class="headerlink" title="@Inject"></a><code>@Inject</code></h2><p>Think <code>@Inject</code> as <code>@Autowired</code>.</p><p>The <code>@Inject</code> annotation can be applied at the class-level, field-level, method-level and constructor-argument level.</p><pre><code>import javax.inject.Inject;

public class OuterBean {
    private InnerBean inner;

    @Inject
    public void setInner(InnerBean inner) {
        this.inner = inner;
    }
}
</code></pre><h2 id="Named"><a href="#Named" class="headerlink" title="@Named"></a><code>@Named</code></h2><p>Think <code>@Named</code> as <code>@Component</code>.</p><pre><code>import javax.inject.Named;

@Named
public class OuterBean { }
</code></pre><p>You can specify a <em>name</em> to the <code>@Named</code>.</p><pre><code>@Named(&quot;myOuterBean&quot;)
public class OuterBean { }
</code></pre><p>Specially, you can use <code>@Named</code> combined with <code>@Inject</code>.</p><pre><code>@Inject
public void setInner(@Named(&quot;main&quot;) InnerBean inner) {
    this.inner = inner;
}
</code></pre><h2 id="JSR-3-0-Annotations-VS-Spring-Annotations"><a href="#JSR-3-0-Annotations-VS-Spring-Annotations" class="headerlink" title="JSR 3.0 Annotations VS Spring Annotations"></a><em>JSR 3.0 Annotations</em> VS <em>Spring Annotations</em></h2><p>The comparison between <em>JSR 3.0 annotations</em> VS <em>Spring annotations</em> is shown in following table.</p><table><thead><tr><th>Spring</th><th>javax.inject.*</th><th>javax.inject restrictions / comments</th></tr></thead><tbody><tr><td>@Autowired</td><td>@Inject</td><td>@Inject has no required attribute</td></tr><tr><td>@Component</td><td>@Named</td><td>-</td></tr><tr><td>@Scope(“singleton”)</td><td>@Singleton</td><td>The JSR-330 default scope is like Spring’s prototype. However, in order to keep it consistent with Spring’s general defaults, a JSR-330 bean declared in the Spring container is a singleton by default. In order to use a scope other than singleton, you should use Spring’s @Scope annotation.</td></tr><tr><td>@Qualifier</td><td>@Named</td><td>-</td></tr><tr><td>-@Value</td><td>-</td><td>-no equivalent</td></tr><tr><td>@Required</td><td>-</td><td>-no equivalent</td></tr><tr><td>@Lazy</td><td>-</td><td>-no equivalent</td></tr></tbody></table><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>The Spring annotation-based metadata configuration method is a full-featured and easy to use alternative to traditional XML-based metadata configuration.</p><p>Note that annotation injection is performed before XML injection, thus the latter configuration will override the former for properties wired through both approaches.</p>]]></content>
      
        <categories>
            
            <category> Spring DI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring: XML based configuration]]></title>
      <url>http://www.wbprime.me/2015/06/02/Spring-XML-based-configuration/</url>
      <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><h2 id="Spring-Configuration"><a href="#Spring-Configuration" class="headerlink" title="Spring Configuration"></a>Spring Configuration</h2><p>The Springframework supports 3 kinds of configuration methods, including XML-based configuration, annotation-based configuration and Java-based configuration.</p><ul><li>Xml-based configuration: traditionally supplied as a simple and intuitive XMl format metadata.</li><li>Annotation-based configuration: introduced by Spring 2.5.</li><li>Java-based configuration: introduced as the Spring JavaConfig project by Spring 3.0.</li></ul><p>XML-based configuration is widely used and best supported.</p><p>Typical xml configuration file:</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;

    &lt;bean id=&quot;aBean&quot; class=&quot;MyBean&quot;&gt;
    &lt;!-- collaborators and configuration for this bean go here --&gt;
    &lt;/bean&gt;

    &lt;!-- more bean definitions go here --&gt;

&lt;/beans&gt;
</code></pre><h2 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h2><p>XML-based configuration provides bean metadata to Spring through a single or a set of XML file(s).</p><p>Generally Spring read configuration metadata via a <code>BeanFactory</code> interface. Direct use of <code>BeanFactory</code> is not supported officially in dailly application development, though you can implement <code>BeanFactory</code> interface and provide your own class. However Spring provide a more convinient interface <code>ApplicationContext</code> inheriting <code>BeanFactory</code>.</p><p>The <code>org.springframework.context.ApplicationContext</code> interface provides more features over <code>BeanFactory</code> interface such as: integration with Spring AOP interfaces, message resource handling for internationalization, event publication, web application support and so on.</p><p>Implementations of <code>ApplicationContext</code> interface differ in ways reading configuration metadata, among which are <code>ClassPathXmlApplicationContext</code> and <code>FileSystemXmlApplicationContext</code> that providing control of XML-based configuration metadata.</p><p><code>ClassPathXmlApplicationContext</code> is a standalone XML application context, taking the context definition files from the class path, interpreting plain paths as class path resource names that include the package path (e.g. “mypackage/myresource.txt”). <code>ClassPathXmlApplicationContext</code> accepts one or more String and intepretes them as files in CLASSPATH, then loads configuration metadata from those files. The leading slash in parameters, if exists, will be ignored.</p><p>Note: In case of multiple config locations, later bean definitions will override ones defined in earlier loaded files. This can be leveraged to deliberately override certain bean definitions via an extra XML file.</p><p><code>FileSystemXmlApplicationContext</code> is a Standalone XML application context, taking the context definition files from the file system or from URLs, interpreting plain paths as relative file system locations (e.g. “mydir/myfile.txt”). Useful for test harnesses as well as for standalone environments. Plain path(s) will always treated relative to the current VM working directory whether it has or has not leading slash. To avoid this, add a “file:” prefix to declare an absolute file path.</p><p>Note: In case of multiple config locations, later bean definitions will override ones defined in earlier loaded files. This can be leveraged to deliberately override certain bean definitions via an extra XML file.</p><p>Typical usage of <code>ApplicationContext</code> to load xml configuration metadata:</p><pre><code>// create and configure beans
ApplicationContext context =
    new ClassPathXmlApplicationContext(new String[] {&quot;mybean.xml&quot;, &quot;mybean2.xml&quot;});

// retrieve configured instance
MyBean my_bean = context.getBean(&quot;aBean&quot;, MyBean.class);

// use configured instance
boolean is_succeed = myBean.doSomething();
</code></pre><h1 id="XML-file-format"><a href="#XML-file-format" class="headerlink" title="XML file format"></a>XML file format</h1><h2 id="beans"><a href="#beans" class="headerlink" title="beans"></a><code>beans</code></h2><p>An xml configuration file is, of cource, a regular xml file with a top-level <code>&lt;beans /&gt;</code> element and some springframework specific definitions.</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;
&lt;/beans&gt;
</code></pre><h2 id="bean"><a href="#bean" class="headerlink" title="bean"></a><code>bean</code></h2><p>An xml file consists of at least one bean definition through <code>&lt;bean /&gt;</code> element inside a top-level <code>&lt;beans /&gt;</code> element. A <code>&lt;bean /&gt;</code> element represents a bean object; a bean object can be anything whatever you want it to be: a service layer object, a data access object (DAO), a presentation object and so forth, only if it is a standard BEAN object.</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;

    &lt;bean id=&quot;aSerice&quot; class=&quot;me.wbprime.java.MySerice&quot; /&gt;
    &lt;bean id=&quot;aDao&quot; class=&quot;me.wbprime.java.MyDAO&quot; /&gt;
    &lt;bean id=&quot;aAction&quot; class=&quot;me.wbprime.java.MyAction&quot; /&gt;
    &lt;bean id=&quot;aSession&quot; class=&quot;me.wbprime.java.MySession&quot; /&gt;

    &lt;!-- more bean definitions go here --&gt;

&lt;/beans&gt;
</code></pre><h2 id="alias"><a href="#alias" class="headerlink" title="alias"></a><code>alias</code></h2><p>Spring supports alias for a bean which is valid in the <code>ApplicationContext</code> scope.</p><p>In file <code>a.xml</code>:</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;

    &lt;alias name=&quot;appService&quot; alias=&quot;b-serice&quot;/&gt;
&lt;/beans&gt;
</code></pre><p>In file <code>b.xml</code>:</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;

    &lt;alias name=&quot;appService&quot; alias=&quot;b-serice&quot;/&gt;
&lt;/beans&gt;
</code></pre><p>In file <code>app.xml</code>:</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;

    &lt;alias name=&quot;appService&quot; alias=&quot;app-serice&quot;/&gt;

    &lt;bean id=&quot;appSerice&quot; class=&quot;me.wbprime.java.MySerice&quot; /&gt;
    &lt;bean id=&quot;appDao&quot; class=&quot;me.wbprime.java.MyDAO&quot; /&gt;
    &lt;bean id=&quot;appAction&quot; class=&quot;me.wbprime.java.MyAction&quot; /&gt;
    &lt;bean id=&quot;appSession&quot; class=&quot;me.wbprime.java.MySession&quot; /&gt;
&lt;/beans&gt;
</code></pre><h2 id="import"><a href="#import" class="headerlink" title="import"></a><code>import</code></h2><p>It can be useful to have bean definitions span multiple XML files. Often each individual XML configuration file represents a logical layer or module in your architecture.</p><p>In file <code>app.xml</code>:</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;

    &lt;import resource=&quot;a.xml&quot;/&gt;
    &lt;import resource=&quot;resources/b.xml&quot;/&gt;
    &lt;import resource=&quot;/resources/c.xml&quot;/&gt;
&lt;/beans&gt;
</code></pre><p>Thus loading <code>app.xml</code> means loading configuration data from three files: <code>a.xml</code>, <code>b.xml</code> and <code>c.xml</code>. As a implicit constraint, pathes of all files being imported must be given relative to the file doing the import. So <code>a.xml</code> must be in the same directory or classpath location as <code>app.xml</code>, while <code>b.xml</code> and <code>c.xml</code> must be in <code>resources</code> sub-directory of the importing file. Also a leading slash is ignored.</p><p>Note that the contents of the files being imported, including the top level<beans>element, must be valid XML bean definitions according to the Spring Schema.</beans></p><h1 id="Bean-Configuration"><a href="#Bean-Configuration" class="headerlink" title="Bean Configuration"></a>Bean Configuration</h1><p>Spring container manages one or more beans by <code>&lt;bean /&gt;</code> definitions. A <code>&lt;bean /&gt;</code> element can provide the following metadata for a target <code>Bean</code> object:</p><ul><li>a full-qualified class name</li><li>object scope</li><li>object lifecycle behavior</li><li>properties being injected, including plain values and references, also called <em>collaborators</em> or <em>dependencies</em></li><li>other configuration</li></ul><h2 id="Name"><a href="#Name" class="headerlink" title="Name"></a>Name</h2><p>In Spring, every bean should have one or more identifiers. These identifiers must be unique within the container that hosts the bean.</p><p>In a <code>&lt;bean /&gt;</code> element, an identifier can be specified by an <code>id</code> attribute. Note that <code>id</code> uniqueness is enforced by the container.</p><pre><code>&lt;bean id=&quot;unique id&quot; ... /&gt;
</code></pre><p>Also you can use a <code>name</code> attribute. Interestingly, you can specify more than one identifiers in <code>name</code> attribute, treated as aliases, separated by a comma (<code>,</code>), a semicolon (<code>;</code>) or white space(s).</p><pre><code>&lt;beans name=&quot;id1,id2,id3&quot; ... /&gt;
&lt;beans name=&quot;id1;id2;id3&quot; ... /&gt;
&lt;beans name=&quot;id1 id2 id3&quot; ... /&gt;
</code></pre><p>If neither <code>id</code> nor <code>name</code> sttribute are explicitly given, Spring would generate a unique identifier for that bean. However this bean can not be referenced by other beans.</p><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p>The object type is specified by <code>class</code> attribute for a bean. The <code>class</code> attribute can be used in 2 ways:</p><ul><li>when specifying a static factory method, <code>class</code> attribute must match the calss type containning the static factory method.</li><li><p>when not specified, <code>class</code> attribute must match the return type of <code>new</code> operator.</p><pre><code>&lt;bean class=&quot;ClassA&quot; ... /&gt;
</code></pre></li></ul><h2 id="Instantiating-a-Bean"><a href="#Instantiating-a-Bean" class="headerlink" title="Instantiating a Bean"></a>Instantiating a Bean</h2><p>Spring provides 3 ways to instantiating a bean.</p><ol><li><p>using a constructor.</p><p>If you got a class with default constructor which has no parameters, you can simply specify the <code>class</code> attribute.</p><p>If you got a class without a default constructor, you can add a <code>class</code> attribute and then provide additional <code>constructor-arg</code> sub-elements.</p><pre><code>&lt;bean id=&quot;exampleBean&quot; class=&quot;me.wbprime.java.ExampleBean&quot; &gt;
    &lt;constructor-arg value=&quot;some value&quot; /&gt;
&lt;/bean&gt;
</code></pre><p>If your constructor have more than one parameters, for example, class <code>ExampleBean</code>:</p><pre><code>package me.wbprime.java

public class ExampleBean {
    private int _age;
    private String _name;

    public ExampleBean(int age, String name) {
        this._age = age;
        this._name = name;
    }
}
</code></pre><p>You can specify the parameter type:</p><pre><code>&lt;bean id=&quot;exampleBean&quot; class=&quot;me.wbprime.java.ExampleBean&quot; &gt;
    &lt;constructor-arg type=&quot;int&quot; value=&quot;26&quot; /&gt;
    &lt;constructor-arg type=&quot;java.lang.String&quot; value=&quot;Elvis Wang&quot; /&gt;
&lt;/bean&gt;
</code></pre><p>Or you can specify the parameter position:</p><pre><code>&lt;bean id=&quot;exampleBean&quot; class=&quot;me.wbprime.java.ExampleBean&quot; &gt;
    &lt;constructor-arg index=&quot;0&quot; value=&quot;26&quot; /&gt;
    &lt;constructor-arg index=&quot;1&quot; value=&quot;Elvis Wang&quot; /&gt;
&lt;/bean&gt;
</code></pre><p>Or you can use parameter names:</p><pre><code>&lt;bean id=&quot;exampleBean&quot; class=&quot;me.wbprime.java.ExampleBean&quot; &gt;
    &lt;constructor-arg name=&quot;age&quot; value=&quot;26&quot; /&gt;
    &lt;constructor-arg name=&quot;name&quot; value=&quot;Elvis Wang&quot; /&gt;
&lt;/bean&gt;
</code></pre><p>Keep in mind that to make this work out of the box your code must be compiled with the debug flag enabled so that Spring can look up the parameter name from the constructor.</p></li><li><p>using a static factory method</p><p>You may want to implement your <code>Factory method</code> pattern, by using a static factory method. Of cource you can make your work together with Spring. In such case, you need a <code>class</code> attribute which contains the static factory method as is discussed right before. Then you need a new attribute named <code>factory-method</code>.</p><p>For example:</p><pre><code>package me.wbprime.java

public class ExampleFactory {
    private static ExampleBean aBean = new ExampleBean();
    private ExampleFactory() {}

    public static ExampleBean createBean() {
        return aBean;
    }
}
</code></pre><p>You can add a <code>&lt;bean /&gt;</code> like this:</p><pre><code>&lt;bean id=&quot;aaBean&quot;
    class=&quot;me.wbprime.java.ExampleFactory&quot;
    factory-method=&quot;createBean&quot;/&gt;
</code></pre><p>The definition does not specify the return type.</p></li><li><p>using a non-static factory method</p><p>Similar to a static factory method, instance factory method is also supported by Spring. All you need to do is to leave the <code>class</code> attribute empty, set the <code>factory-bean</code> attribute to the bean reference containning the factory method, set the <code>factory-method</code> attribute to the name of the factory method.</p><p>Example:</p><pre><code>package me.wbprime.java

public class ExampleFactory {
    public ExampleFactory() {}

    public ExampleBean createBeanA() {
        return new BeanA;
    }

    public ExampleBean createBeanB() {
        return new BeanB;
    }
}
</code></pre><p>Configuration in xml file:</p><pre><code>...

&lt;bean id=&quot;aFactory&quot; class=&quot;ExampleFactory&quot; /&gt;
&lt;bean id=&quot;aBean&quot; factory-bean=&quot;aFactory&quot; factory-method=&quot;createBeanA&quot; /&gt;
&lt;bean id=&quot;bBean&quot; factory-bean=&quot;aFactory&quot; factory-method=&quot;createBeanB&quot; /&gt;

...
</code></pre><p>Note that a <code>factory-bean</code> can have more than one factory method, and the return type is not specified.</p></li></ol><h2 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h2><p>You can control the bean scope by specifying an additional <code>scope</code> attribute to your <code>&lt;bean /&gt;</code> element. The Spring Framework supports six scopes out of box, four of which are web-aware.</p><table><thead><tr><th>Scope</th><th>Description</th></tr></thead><tbody><tr><td>singleton</td><td>(Default) Scopes a single bean definition to a single object instance per Spring IoC container.</td></tr><tr><td>prototype</td><td>Scopes a single bean definition to any number of object instances.</td></tr><tr><td>request</td><td>Scopes a single bean definition to the lifecycle of a single HTTP request. Web-aware.</td></tr><tr><td>session</td><td>Scopes a single bean definition to the lifecycle of an HTTP Session. Web-aware.</td></tr><tr><td>global session</td><td>Scopes a single bean definition to the lifecycle of a global HTTP Session. Web-aware.</td></tr><tr><td>application</td><td>Scopes a single bean definition to the lifecycle of a ServletContext. Web-aware.</td></tr></tbody></table><h3 id="singleton"><a href="#singleton" class="headerlink" title="singleton"></a><code>singleton</code></h3><p>The Spring container creates only one instance of that object if you specify singleton scope to a bean by adding a <code>scope</code> attribute.</p><pre><code>&lt;bean id=&quot;demo1&quot; class=&quot;Demo1&quot; scope=&quot;singleton&quot; /&gt;
</code></pre><p>Note that this is the default value for <code>scope</code> attribute, if not specified explicitly.</p><h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a><code>prototype</code></h3><p>In contrast to singleton, prototype scope means that the Spring container creates an instance each time a request for that bean is made. As a rule, use the prototype scope for all stateful beans and the singleton scope for stateless beans.</p><pre><code>&lt;bean id=&quot;demo2&quot; class=&quot;Demo2&quot; scope=&quot;prototype&quot; /&gt;
</code></pre><p>If you use a singleton-scoped bean which referenced a prototype-scoped bean, all dependencies are injected at instantiation time and injected once.</p><h3 id="request-session-and-global-session"><a href="#request-session-and-global-session" class="headerlink" title="request, session and global session"></a><code>request</code>, <code>session</code> and <code>global session</code></h3><p>The request, session, and global session scopes are web-aware (using <code>ApplicationContext</code> such as <code>XmlWebApplicationContext</code>). If you use these scopes with regular <code>ApplicationContext</code> such as the <code>ClassPathXmlApplicationContext</code>, you get an <code>IllegalStateException</code> complaining about an unknown bean scope.</p><h3 id="application"><a href="#application" class="headerlink" title="application"></a><code>application</code></h3><p>The application scope is similar to singleton for a entire web application, but differs in 2 ways: It is a singleton per <code>ServletContext</code>, not per Spring <code>ApplicationContext</code>, and it is actually exposed and therefore visible as a <code>ServletContext</code> attribute.</p><h3 id="Custom-Scope"><a href="#Custom-Scope" class="headerlink" title="Custom Scope"></a>Custom Scope</h3><p>To do.</p><h2 id="Lazy-initializing"><a href="#Lazy-initializing" class="headerlink" title="Lazy-initializing"></a>Lazy-initializing</h2><p>By default, the Spring container creates and configures all singleton dependencies when initializing a bean. If this behavior is not desirable, you can set lazy initializing mode for a bean.</p><pre><code>&lt;bean id=&quot;lazyBean&quot; class=&quot;LazyBean&quot; lazy-init=&quot;true&quot; /&gt;
</code></pre><p>Now <code>lazyBean</code> bean will not be pre-instantiated when the Spring container is starting up. However, if a lazy-initialized bean is referenced by another singleton bean that is not lazy-initialized, the lazy-initialized bean will still be created and initialized when starting up.</p><h2 id="Lifecycle-Callbacks"><a href="#Lifecycle-Callbacks" class="headerlink" title="Lifecycle Callbacks"></a>Lifecycle Callbacks</h2><h3 id="init-method"><a href="#init-method" class="headerlink" title="init-method"></a><code>init-method</code></h3><p>The Spring provides <code>init-method</code> attribute to allow a bean performing initialization work after instantiating and all necessary properties been set.</p><pre><code>&lt;bean id=&quot;exampleBean&quot; class=&quot;examples.ExampleBean&quot; init-method=&quot;init&quot;/&gt;
</code></pre><p><code>init</code> is a name of method in <code>examples.ExampleBean</code> with a <code>public void init() {..}</code> like implementation.</p><h3 id="destroy-method"><a href="#destroy-method" class="headerlink" title="destroy-method"></a><code>destroy-method</code></h3><p>The Spring provides <code>destroy-method</code> attribute to allow a bean performing cleaning up work before destroyed.</p><pre><code>&lt;bean id=&quot;exampleBean&quot; class=&quot;examples.ExampleBean&quot; destroy-method=&quot;cleanup&quot;/&gt;
</code></pre><p><code>cleanup</code> is a name of method in <code>examples.ExampleBean</code> with a <code>public void cleanup() {...}</code> like implementation.</p><h3 id="Default-init-destroy-Method"><a href="#Default-init-destroy-Method" class="headerlink" title="Default init/destroy Method"></a>Default <code>init/destroy</code> Method</h3><p>The fact is that init methods in your project keep the same name such as <code>init()</code>, <code>initialize()</code> and so on. Adding it to each bean seems stupid. To avoid this, you can set <code>default-init-method</code> attribute for <code>beans</code> element.</p><pre><code>&lt;beans default-init-method=&quot;init&quot;/&gt;
</code></pre><p>Similarly, you can set <code>default-destroy-method</code> attribute for destroy methods.</p><pre><code>&lt;beans default-destroy-method=&quot;destroy&quot;/&gt;
</code></pre><p>The <code>init-method</code>/<code>destroy-method</code> attribute for <code>bean</code> element will override the default values set to <code>beans</code>.</p><h2 id="Dependency-Injection"><a href="#Dependency-Injection" class="headerlink" title="Dependency Injection"></a>Dependency Injection</h2><p>Dependency injection (DI) is a process that bean objects define their dependencies, while the dependencies are handled by the container. DI can be fulfilled by 1) interface, 2) constructor and 3) setters.</p><p>The Spring provides support for constructor-based DI and setter-based DI.</p><h3 id="Constructor-based-DI"><a href="#Constructor-based-DI" class="headerlink" title="Constructor-based DI"></a>Constructor-based DI</h3><p>This applies to constructor and factory method based bean instantiation process.</p><pre><code>&lt;bean id=&quot;bBean&quot; ... &gt;
    &lt;constructor-arg value=&quot;lalala&quot; /&gt; &lt;!-- auto detecting --&gt;
    &lt;constructor-arg type=&quot;java.lang.String&quot; value=&quot;lalala&quot; /&gt; &lt;!-- using type detecting --&gt;
    &lt;constructor-arg index=&quot;0&quot; value=&quot;lalala&quot; /&gt; &lt;!-- using index detecting --&gt;
    &lt;constructor-arg name=&quot;info&quot; value=&quot;lalala&quot; /&gt; &lt;!-- using name detecting --&gt;
&lt;/bean&gt;
</code></pre><h3 id="Setter-based-DI"><a href="#Setter-based-DI" class="headerlink" title="Setter-based DI"></a>Setter-based DI</h3><p>Setter-based DI applies to beans being instantiated.</p><p>Setter-based DI can be done via <code>property</code> sub-element.</p><pre><code>&lt;bean id=&quot;exampleBean&quot; class=&quot;examples.ExampleBean&quot;&gt;
    &lt;property name=&quot;prop1&quot;&gt;
        &lt;ref bean=&quot;anotherExampleBean&quot;/&gt;
    &lt;/property&gt;

    &lt;property name=&quot;prop2&quot; ref=&quot;yetAnotherBean&quot;/&gt;
    &lt;property name=&quot;prop3&quot; value=&quot;1&quot;/&gt;
&lt;/bean&gt;
</code></pre><h3 id="DI-Values"><a href="#DI-Values" class="headerlink" title="DI Values"></a>DI Values</h3><p>The Spring supports constructor-based DI via <code>&lt;constructor-arg /&gt;</code> element and setter-based DI via <code>&lt;property /&gt;</code> element. Values for these two elements can be specified inline (via attribute) or via sub element. And values can be Java primitives (int, boolean and so on), String (java.lang.String) and reference to other beans.</p><ol><li><p>straight values</p><p>Java primitives and String values can be setted using <code>value</code> attribute or <code>value</code> element.</p><pre><code>&lt;bean id=&quot;exampleBean&quot; class=&quot;examples.ExampleBean&quot;&gt;
    &lt;property name=&quot;prop1&quot; value=&quot;1&quot;/&gt;
    &lt;property name=&quot;prop2&quot;&gt;
        &lt;value&gt;1&lt;/value&gt;
    &lt;/property&gt;
    &lt;property name=&quot;prop3&quot; value=&quot;My name&quot;/&gt;
    &lt;property name=&quot;prop4&quot;&gt;
        &lt;value&gt;My name&lt;/value&gt;
    &lt;/property&gt;
&lt;/bean&gt;
</code></pre></li><li><p>bean reference</p><p>References to other beans can be setted using <code>ref</code> attribute or <code>ref</code> element. You can specify each of <code>bean</code>, <code>local</code> and <code>parent</code> attributes to <code>ref</code> element.</p><p>Specifying the target bean through the <code>bean</code> attribute of the <code>&lt;ref/&gt;</code> tag is the most general form, and allows creation of a reference to any bean in the same container or parent container, regardless of whether it is in the same XML file. The value of the <code>bean</code> attribute may be the same as the <code>id</code> attribute of the target bean, or as one of the values in the <code>name</code> attribute of the target bean.</p><p>Specifying the target bean through the <code>parent</code> attribute creates a reference to a bean that is in a parent container of the current container. The value of the <code>parent</code> attribute may be the same as either the <code>id</code> attribute of the target bean, or one of the values in the <code>name</code> attribute of the target bean, and the target bean must be in a parent container of the current one. You use this bean reference variant mainly when you have a hierarchy of containers and you want to wrap an existing bean in a parent container with a proxy that will have the same name as the parent bean.</p><p>The <code>local</code> attribute on the <code>ref</code> element is no longer supported in the 4.0 beans xsd since it does not provide value over a regular bean reference any more.</p><pre><code>&lt;bean id=&quot;exampleBean&quot; class=&quot;examples.ExampleBean&quot;&gt;
    &lt;property name=&quot;prop1&quot; ref=&quot;aBean&quot;/&gt;
    &lt;property name=&quot;prop2&quot;&gt;
        &lt;ref bean=&quot;aBean&quot; /&gt;
    &lt;/property&gt;
&lt;/bean&gt;
</code></pre></li><li><p>inner beans</p><p>A <code>&lt;bean/&gt;</code> element inside the <code>&lt;property/&gt;</code> or <code>&lt;constructor-arg/&gt;</code> elements defines a inner bean. An inner bean definition does not require a defined id or name; the container ignores these values. It also ignores the scope flag. Inner beans are always anonymous and they are always created with the outer bean. It is not possible to inject inner beans into collaborating beans other than into the enclosing bean.</p><pre><code>&lt;bean id=&quot;outer&quot; class=&quot;...&quot;&gt;
    &lt;!-- instead of using a reference to a target bean, simply define the target bean inline --&gt;
    &lt;property name=&quot;target&quot;&gt;
        &lt;bean class=&quot;com.example.Person&quot;&gt; &lt;!-- this is the inner bean --&gt;
            &lt;property name=&quot;name&quot; value=&quot;Fiona Apple&quot;/&gt;
            &lt;property name=&quot;age&quot; value=&quot;25&quot;/&gt;
        &lt;/bean&gt;
    &lt;/property&gt;
&lt;/bean&gt;
</code></pre></li><li><p>collections</p><p>You can set values of Java collection types <code>List</code>, <code>Set</code>, <code>Map</code> and <code>Properties</code> via <code>&lt;list /&gt;</code>, <code>&lt;set /&gt;</code>, <code>&lt;map /&gt;</code> and <code>&lt;props /&gt;</code> elements respectively.</p><pre><code>&lt;bean id=&quot;moreComplexObject&quot; class=&quot;example.ComplexObject&quot;&gt;
    &lt;!-- results in a setAdminEmails(java.util.Properties) call --&gt;
    &lt;property name=&quot;adminEmails&quot;&gt;
        &lt;props&gt;
            &lt;prop key=&quot;administrator&quot;&gt;administrator@example.org&lt;/prop&gt;
            &lt;prop key=&quot;support&quot;&gt;support@example.org&lt;/prop&gt;
            &lt;prop key=&quot;development&quot;&gt;development@example.org&lt;/prop&gt;
        &lt;/props&gt;
    &lt;/property&gt;
    &lt;!-- results in a setSomeList(java.util.List) call --&gt;
    &lt;property name=&quot;someList&quot;&gt;
        &lt;list&gt;
            &lt;value&gt;a list element followed by a reference&lt;/value&gt;
            &lt;ref bean=&quot;myDataSource&quot; /&gt;
        &lt;/list&gt;
    &lt;/property&gt;
    &lt;!-- results in a setSomeMap(java.util.Map) call --&gt;
    &lt;property name=&quot;someMap&quot;&gt;
        &lt;map&gt;
            &lt;entry key=&quot;an entry&quot; value=&quot;just some string&quot;/&gt;
            &lt;entry key =&quot;a ref&quot; value-ref=&quot;myDataSource&quot;/&gt;
        &lt;/map&gt;
    &lt;/property&gt;
    &lt;!-- results in a setSomeSet(java.util.Set) call --&gt;
    &lt;property name=&quot;someSet&quot;&gt;
        &lt;set&gt;
            &lt;value&gt;just some string&lt;/value&gt;
            &lt;ref bean=&quot;myDataSource&quot; /&gt;
        &lt;/set&gt;
    &lt;/property&gt;
&lt;/bean&gt;
</code></pre></li><li><p>null</p><p>Using <code>&lt;null /&gt;</code> element to set Java <code>null</code> value.</p><pre><code>&lt;bean class=&quot;ExampleBean&quot;&gt;
    &lt;property name=&quot;email&quot;&gt;
        &lt;null/&gt;
    &lt;/property&gt;
&lt;/bean&gt;
</code></pre></li></ol><h3 id="p-namespace"><a href="#p-namespace" class="headerlink" title="p-namespace"></a><code>p-namespace</code></h3><p>The Spring p-namespace (property namespace ?) is introduced to describe straight values and bean references as a shorcut/replacement for <code>&lt;property /&gt;</code> element.</p><pre><code>&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xmlns:p=&quot;http://www.springframework.org/schema/p&quot;
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;
</code></pre><p>Typically</p><pre><code>&lt;bean name=&quot;pnamespaceBean&quot; class=&quot;com.example.ExampleBean&quot;
    p:email=&quot;foo@bar.com&quot;/&gt;
</code></pre><p>is the same as</p><pre><code>&lt;bean name=&quot;classicBean&quot; class=&quot;com.example.ExampleBean&quot;&gt;
    &lt;property name=&quot;email&quot; value=&quot;foo@bar.com&quot;/&gt;
&lt;/bean&gt;
</code></pre><p>And also</p><pre><code>&lt;bean name=&quot;pnamespaceStudent&quot;
    class=&quot;com.example.Student&quot;
    p:teacher-ref=&quot;jane&quot;/&gt;
</code></pre><p>is the same as</p><pre><code>&lt;bean name=&quot;classicStudent&quot; class=&quot;com.example.Student&quot;&gt;
    &lt;property name=&quot;teacher&quot; ref=&quot;jane&quot;/&gt;
&lt;/bean&gt;
</code></pre><p>Spring p-namespace provide inline attribute for <code>&lt;property /&gt;</code> element, using <code>p:PROPERRY</code> to set straight values and <code>p:PROPERTY-ref</code> to set bean references, of which <code>PROPERTY</code> is the actual property name.</p><h3 id="c-namespace"><a href="#c-namespace" class="headerlink" title="c-namespace"></a><code>c-namespace</code></h3><p>The Spring c-namespace (constructor namespace ?) is introduced to describe straight values and bean references as a shorcut/replacement for <code>&lt;constructor-arg /&gt;</code> element.</p><pre><code>&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xmlns:c=&quot;http://www.springframework.org/schema/c&quot;
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;
</code></pre><p>Typically</p><pre><code>&lt;bean name=&quot;cnamespaceBean&quot; class=&quot;com.example.ExampleBean&quot;
    c:email=&quot;foo@bar.com&quot;/&gt;
</code></pre><p>is the same as</p><pre><code>&lt;bean name=&quot;classicBean&quot; class=&quot;com.example.ExampleBean&quot;&gt;
    &lt;constraint-arg name=&quot;email&quot; value=&quot;foo@bar.com&quot;/&gt;
&lt;/bean&gt;
</code></pre><p>And also</p><pre><code>&lt;bean name=&quot;cnamespaceStudent&quot;
    class=&quot;com.example.Student&quot;
    c:teacher-ref=&quot;jane&quot;/&gt;
</code></pre><p>is the same as</p><pre><code>&lt;bean name=&quot;classicStudent&quot; class=&quot;com.example.Student&quot;&gt;
    &lt;constructor-arg name=&quot;teacher&quot; ref=&quot;jane&quot;/&gt;
&lt;/bean&gt;
</code></pre><p>Of course the name of constructor parameters should be available (compiled with debug information). If this is not the case, you can use index position based version.</p><pre><code>&lt;bean id=&quot;foo&quot; class=&quot;Foo&quot; c:_0=&quot;foo@bar.com&quot; c:_1-ref=&quot;jane&quot;/&gt;
</code></pre><h3 id="Compound-Property"><a href="#Compound-Property" class="headerlink" title="Compound Property"></a>Compound Property</h3><p>You can use compound property to simplify property injection.</p><pre><code>&lt;bean id=&quot;foo&quot; class=&quot;foo.Bar&quot;&gt;
    &lt;property name=&quot;fred.bob.sammy&quot; value=&quot;123&quot; /&gt;
&lt;/bean&gt;
</code></pre><p>will call <code>foo.getFred().getBob().setSammy(&quot;123&quot;)</code> equally. In order for this to work, the fred property of foo, and the bob property of fred must not be null after the bean is constructed, or a NullPointerException is thrown.</p><h2 id="Autowiring"><a href="#Autowiring" class="headerlink" title="Autowiring"></a>Autowiring</h2><p>Autowiring is such a feature that the container manages the relationship between a bean and its implicit collaborating beans and resolves the dependencies automatically. Within the Spring autowiring decrease your work significantly specifying properties/constructor-args and helps when your project evolves and bean dependencies changes slightly. To be brief, autowiring moves additional work to the Spring container to detect bean dependencies which needs explicit to be done by you programmers.</p><p>The Spring supports 4 kinds of autowiring modes:</p><ul><li><code>no</code> autowiring. (Default) No autowiring means all dependencies must be specified explicitely.</li><li><code>byName</code> autowiring. Autowiring is done by property name.</li><li><code>byType</code> autowiring. Autowiring is done by property type. Note that if more than one beans for target type exists, a fatal exception is thrown.</li><li><code>constructor</code> autowiring. Autowiring is done by constructor-arg type, similar to <code>byType</code> for property.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;bean ... autowire=&quot;byName&quot; /&gt;</div></pre></td></tr></table></figure><p>If you want to exclude a bean from the autowiring of another bean, you can:</p><ul><li>set <code>default-autowire-candidates</code> attribute for top level <code>&lt;beans /&gt;</code> element. For example, <code>&lt;beans ... default-autowire-candidates=&quot;*DAO&quot; /&gt;</code> will exclude all beans in this element not matching <code>&quot;*DAO</code> pattern for autowiring.</li><li>set <code>autowire-candidates</code> attribute for target <code>&lt;bean /&gt;</code> element to <code>false</code>.</li></ul><p>The latter takes precedence.</p><p>Typically it is best practice to keep consistent across your project when using autowiring.</p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>XML based configuration is the traditional method to fulfill ths Spring IoC/DI and other features, and it is the best supported and documented.</p><p>Ths Spring also supports Annotation based configuration and Java based configuration. Annotation based configuration is more convenient and simply in syntax; Java based configuration is implemented using Java classes.</p>]]></content>
      
        <categories>
            
            <category> Spring DI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring DI: At First Glance]]></title>
      <url>http://www.wbprime.me/2015/05/28/Spring-At-First-Glance/</url>
      <content type="html"><![CDATA[<p><a href="http://spring.io" target="_blank" rel="external">Spring</a> is a world famous Java developing framework.</p><blockquote><p>The Spring Framework is a lightweight solution and a potential one-stop-shop for building your enterprise-ready applications. However, Spring is modular, allowing you to use only those parts that you need, without having to bring in the rest. You can use the IoC container, with any web framework on top, but you can also use only the Hibernate integration code or the JDBC abstraction layer. The Spring Framework supports declarative transaction management, remote access to your logic through RMI or web services, and various options for persisting your data. It offers a full-featured MVC framework, and enables you to integrate AOP transparently into your software.</p><p>Spring is designed to be non-intrusive, meaning that your domain logic code generally has no dependencies on the framework itself. In your integration layer (such as the data access layer), some dependencies on the data access technology and the Spring libraries will exist. However, it should be easy to isolate these dependencies from the rest of your code base.</p></blockquote><p>Now I would like to dive into Spring, starting from the most beginning.</p><h1 id="Getting-start-with-Spring"><a href="#Getting-start-with-Spring" class="headerlink" title="Getting start with Spring"></a>Getting start with Spring</h1><p>Spring framework provides a tool to help start your application using <a href="http://projects.spring.io/spring-boot" target="_blank" rel="external">Spring Boot</a> as soon as possible. <a href="http://start.spring.io" target="_blank" rel="external">Spring Initializr</a> is a new feature in Spring framwork 4.x.</p><blockquote><p>You can use start.spring.io to generate a basic project or follow one of the “Getting Started” guides like the Getting Started Building a RESTful Web Service one. As well as being easier to digest, these guides are very task focused, and most of them are based on Spring Boot. They also cover other projects from the Spring portfolio that you might want to consider when solving a particular problem.</p></blockquote><h1 id="Installation-and-usage"><a href="#Installation-and-usage" class="headerlink" title="Installation and usage"></a>Installation and usage</h1><ol><li><p>For <a href="http://maven.apache.org" target="_blank" rel="external">maven</a>, add Spring modules needed in your pom.xml.</p><pre><code>&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
        &lt;version&gt;4.1.6.RELEASE&lt;/version&gt;
        &lt;scope&gt;runtime&lt;/scope&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre></li><li><p>For <a href="http://www.gradle.org" target="_blank" rel="external">Gradle</a>, include the appropriate URL in the repositories section.</p><pre><code>repositories {
    mavenCentral()
    // and optionally...
    maven { url &quot;http://repo.spring.io/release&quot; }
}
</code></pre></li><li><p>For <a href="http://ant.apache.org/ivy" target="_blank" rel="external">Ivy</a>, the following resolver to your ivysettings.xml.</p><pre><code>&lt;resolvers&gt;
    &lt;ibiblio name=&quot;io.spring.repo.maven.release&quot;
        m2compatible=&quot;true&quot;
        root=&quot;http://repo.spring.io/release/&quot;/&gt;
&lt;/resolvers&gt;
</code></pre></li><li><p>Last but most important, for regular use without each of the three, you can download Spring distribution zip file from <a href="http://repo.spring.io/release/org/springframework/spring" target="_blank" rel="external">http://repo.spring.io/release/org/springframework/spring</a>, and add separated jar files into you CLASSPATH.</p></li></ol><h1 id="Make-it-run"><a href="#Make-it-run" class="headerlink" title="Make it run"></a>Make it run</h1><p>At the very first, I would like to direct into spring without any dependency handling apps. Maven and its counterparts are useful and convienent for development, but may not be helpful for studying at the very beginning.</p><p>To make it clear, I will start my Spring journey in a special directory <code>/home/wb/projects/</code>. Now you can guess my user name is wb, hahaha.</p><p>To handle dependency manually, I need to download <a href="http://repo.spring.io/release/org/springframework/spring" target="_blank" rel="external">Spring libraries</a>.</p><p>Now let’s start by creating a project using Intellij Idea named <code>Spring</code>.</p><p>Now the filesystem hierachy may look like (produced by <code>tree -F</code>):</p><pre><code>/home/wb/projects/Spring/
├── Spring.iml
└── src/
</code></pre><p>Add spring library dependencies for <code>Spring</code> project.</p><ol><li><p>Open <code>Project structure</code> setting dialog by clicking <code>File|Project Structure...</code>. Then add library in <code>Library</code> tab.</p><p>Following jar files need be added:</p><pre><code>spring-core-4.1.6.RELEASE.jar
spring-beans-4.1.6.RELEASE.jar
spring-context-4.1.6.RELEASE.jar
</code></pre></li><li><p>Create a test class named <code>First</code></p><p>Now the filesystem hierachy may look like (produced by <code>tree -F</code>):</p><pre><code>/home/wb/projects/Spring/
├── Spring.iml
└── src/
    └── First.java
</code></pre></li><li><p>Add a private field named <code>prop</code> in <code>First</code>, and add setter and getter.</p><p>Here is what <code>First.java</code> contains:</p><pre><code>public class First {

    private String prop;

    public First() {}

    public String getProp() {
        return prop;
    }

    public void setProp(String prop) {
        this.prop = prop;
    }

    public void print() {
        System.out.println(prop);
    }

    public static void main(String [] _args) {
        First aFirst = new First();

        aFirst.setProp(&quot;Hello world&quot;);
        aFirst.print();
    }
}
</code></pre><p>Run it.</p><pre><code>Hello world
</code></pre></li><li><p>Now create a new file named <code>first.xml</code>.</p><pre><code>/home/wb/projects/Spring/
├── Spring.iml
└── src/
    ├── First.java
    └── first.xml
</code></pre><p>In <code>first.xml</code>:</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;

    &lt;bean id=&quot;aFirst&quot; class=&quot;First&quot;&gt;
        &lt;property name=&quot;prop&quot; value=&quot;I&apos;m first&quot; /&gt;
    &lt;/bean&gt;

&lt;/beans&gt;
</code></pre></li><li><p>Add Spring specific code in <code>First.java</code>.</p><p>In <code>First.java</code>:</p><pre><code>import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class First {

    private String prop;

    public First() {}

    public String getProp() {
        return prop;
    }

    public void setProp(String prop) {
        this.prop = prop;
    }

    public void print() {
        System.out.println(prop);
    }

    public static void main(String [] _args) {
        ApplicationContext con = new ClassPathXmlApplicationContext(new String [] {&quot;first.xml&quot;});

        First aFirst = con.getBean(&quot;aFirst&quot;, First.class);
        aFirst.print();
    }
}
</code></pre><p>Run it:</p><pre><code>Exception in thread &quot;main&quot; java.lang.NoClassDefFoundError: org/apache/commons/logging/LogFactory
    at org.springframework.context.support.AbstractApplicationContext.&lt;init&gt;(AbstractApplicationContext.java:154)
    at org.springframework.context.support.AbstractApplicationContext.&lt;init&gt;(AbstractApplicationContext.java:215)
    at org.springframework.context.support.AbstractRefreshableApplicationContext.&lt;init&gt;(AbstractRefreshableApplicationContext.java:88)
    at org.springframework.context.support.AbstractRefreshableConfigApplicationContext.&lt;init&gt;(AbstractRefreshableConfigApplicationContext.java:58)
    at org.springframework.context.support.AbstractXmlApplicationContext.&lt;init&gt;(AbstractXmlApplicationContext.java:61)
    at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:136)
    at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:93)
    ...
</code></pre><p>Oh, exceptions!</p></li><li><p>Add <code>common-logging</code> dependency.</p><p>According to <a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/index.html#overview-logging" target="_blank" rel="external">Spring guide</a>, Spring (explicitly spring-core) depends on <a href="http://commons.apache.org/proper/commons-logging/" target="_blank" rel="external">Apache Commons Logging</a>. So I need to download <a href="http://commons.apache.org/proper/commons-logging/download_logging.cgi" target="_blank" rel="external">it</a> and add it to project library path.</p><p>Now run it:</p><pre><code>Jun 01, 2015 7:27:19 PM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh
INFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@71933d6c: startup date [Mon Jun 01 19:27:19 CST 2015]; root of context hierarchy
Jun 01, 2015 7:27:19 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from class path resource [first.xml]
Exception in thread &quot;main&quot; java.lang.NoClassDefFoundError: org/springframework/expression/ParserContext
    at org.springframework.context.support.AbstractApplicationContext.prepareBeanFactory(AbstractApplicationContext.java:553)
    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:455)
    at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:139)
    at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:93)
    at First.main(First.java:23)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:606)
    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140)
    Caused by: java.lang.ClassNotFoundException: org.springframework.expression.ParserContext
    at java.net.URLClassLoader$1.run(URLClassLoader.java:366)
    at java.net.URLClassLoader$1.run(URLClassLoader.java:355)
    at java.security.AccessController.doPrivileged(Native Method)
    at java.net.URLClassLoader.findClass(URLClassLoader.java:354)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:425)
    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:358)
    ... 10 more
</code></pre><p>Wow, another exception!</p></li><li><p>Indeed, I surpress this exception by adding another dependency <code>spring-expression-4.1.6.RELEASE.jar</code>. I dont know why, it just works.</p><p>Run it:</p><pre><code>Jun 01, 2015 7:30:16 PM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh
INFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@6ebfc8d0: startup date [Mon Jun 01 19:30:16 CST 2015]; root of context hierarchy
Jun 01, 2015 7:30:16 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from class path resource [first.xml]
I&apos;m first
</code></pre></li><li><p>Finally it works.</p></li></ol>]]></content>
      
        <categories>
            
            <category> Spring DI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JDK installation on Archlinux]]></title>
      <url>http://www.wbprime.me/2015/05/25/JDK-installation-on-Archlinux/</url>
      <content type="html"><![CDATA[<p>Basically, <a href="https://www.archlinux.org" target="_blank" rel="external">Archlinux</a> provide OpenJDK 7/8 in <a href="https://wiki.archlinux.org/index.php/Java" target="_blank" rel="external">official repository</a>. Java JDK environment will be setup in quite a little minutes follwing Archliux official guide.</p><p>However, some java programmes does not work well on OpenJDK, and achives better performance on Sun/Oracle JDK. For example, <a href="https://www.archlinux.org/packages/community/any/intellij-idea-community-edition/" target="_blank" rel="external">Intellij Idea</a> in Archlinux official repository produces warning message blaming OpenJDK. So Sun/Oracle JDK maybe welcomed by some users who wanted a clean installation of Intellij Idea.</p><ol><li><p>Choose and download the JDK version you want to install.</p><p>Offical supported <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">JDK</a> version is 1.7 and 1.8. This post covers both of them.</p><pre><code>JDK 1.7 : jdk-7u79-linux-x64.tar.gz
JDK 1.8 : jdk-8u45-linux-x64.tar.gz
</code></pre><p>Note: according to your platform (i686 or X86_64), the subversion string (7u79 or 8u45) and (x64) may differ in file names.</p></li><li><p>Extract JDK files into installation directory.</p><pre><code>tar zxvf jdk-7u79-linux-x64.tar.gz -C /opt
</code></pre><p>or</p><pre><code>tar zxvf jdk-8u45-linux-x64.tar.gz -C /opt
</code></pre><p>Suppose your jdk is extracted into /opt/jdk.</p></li><li><p>Setup JAVA_HOME variable and add executables into PATH.</p><pre><code>touch /etc/profile.d/java.sh
</code></pre><p>Edit java.sh.</p><pre><code>#!/bin/bash
export JAVA_HOME=/opt/jdk
export PATH=$PATH:$JAVA_HOME/jre/bin
</code></pre><p>Finally, set java.sh executable.</p><pre><code>chmod u+x /etc/profile.d/java.sh
</code></pre></li><li><p>Test your installation.</p><pre><code>java -version
</code></pre><p>Output may look like:</p><pre><code>java version &quot;1.7.0_79&quot;
Java(TM) SE Runtime Environment (build 1.7.0_79-b15)
Java HotSpot(TM) 64-Bit Server VM (build 24.79-b02, mixed mode)
</code></pre></li><li><p>Install a java IDE and start you java developing trip.</p><p><a href="http://www.eclipse.org" target="_blank" rel="external">Eclipse</a> is most widely used by Java developers.</p><p><a href="https://www.jetbrains.com/idea" target="_blank" rel="external">Intellij Idea</a> works more geek.</p><p><a href="https://netbeans.org" target="_blank" rel="external">NetBeans</a> is a product of Oracle.</p><p>I used Intellij Idea right now, and it works well.</p></li><li><p>Enjoy yourself.</p></li></ol>]]></content>
      
        <categories>
            
            <category> Tech </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> JDK </tag>
            
            <tag> Archlinux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[慢慢走]]></title>
      <url>http://www.wbprime.me/2015/05/16/man-man-zou/</url>
      <content type="html"><![CDATA[<p>转眼间已经工作了两年，似乎什么也没有改变。</p><p>毕业那会儿还是躇踌满志。</p><p>现在也还躇踌满志。</p><p>毕业那会儿还是战战兢兢。</p><p>现在也还战战兢兢。</p><p>似乎什么也没有改变，似乎，全都已经改变了。</p><p>好像真的不是从前的自己了。</p><p>好像没有以前那么乐观。</p><p>好像没有以前那么从容。</p><p>好像没有以前那么富有爱心。</p><p>好像开始急忙火燎地挣钱。</p><p>好像开始漫无目的地社交。</p><p>好像开始莫名其妙地吐槽和抱怨。</p><p>始终还是要慢慢来啊。</p><p>车子不是一天能有的。</p><p>房子不是一天能有的。</p><p>生活也不是一天能有的。</p><p>所以，定下个计划，然后按部就班的实现，有条有理地修正。</p><p>日子慢慢来，慢慢过，慢慢走。</p>]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> upset </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[白云依旧在]]></title>
      <url>http://www.wbprime.me/2015/05/16/baiyun-yijiu-zai/</url>
      <content type="html"><![CDATA[<p>白云依旧在，桃花笑春风。</p><p>白云依旧在，黄河入海流。</p><p>白云依旧在，低头思故乡。</p><p>白云依旧在，何人不识君。</p><p>白云依旧在，天涯若比邻。</p><p>白云依旧在，萧萧班马鸣。</p><p>白云依旧在，飞入百姓家。</p><p>白云依旧在，千里共婵娟。</p><p>白云依旧在，我亦是行人。</p><p>白云依旧在，何处是归乡。</p>]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> happy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[说好的安静的美男子呢]]></title>
      <url>http://www.wbprime.me/2015/05/16/shuohaode-anjingde-meinanzi-ne/</url>
      <content type="html"><![CDATA[<p>最近挺多事的。</p><p>事情太多太芜杂，耽误了我的美男子大业。</p><p>安静的美男子大业，需要一杯清茶，一本书，和一个小马凳。</p><p>以前还想着要一抔阳光。</p><p>阳光，太奢侈了，能有亮就不错了，大不了开着灯。</p><p>一杯茶。茶是必须的，有了茶心就能静下来，安安静静地做自己的事情，吹一口茶面，喝一丁茶，感觉自己终于属于自己了。</p><p>一本书。书是必须的，就算不看也要放着一本。多少年了，书始终是一方镇纸，轻轻一翻，心头涟漪顿时全消了。</p><p>小马凳。安安静静的美男子最迷人的是坐着的侧影。坐在椅子上直着腰身的样子太古板，坐着小马凳，垂着袖子的样子，好像文质彬彬。</p><p>最好还要落地窗透着明亮。</p><p>最好还要小树发着新绿。</p><p>最好还要风铃滴答滴答伴着蝉唱。</p><p>说到底就是心里头的一个梦想。</p><p>想做一个安安静静的美男子还真是难呢！</p>]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> calm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C 漫谈]]></title>
      <url>http://www.wbprime.me/2015/05/16/c-mantan/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a[i] = i[a]</div></pre></td></tr></table></figure><p>在C的世界里，无奇不有。</p><p>数组a进行下标运算的结果，相当于指针的算术运算。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a[i] = *(a + i) = *(i + a) = i[a]</div></pre></td></tr></table></figure><p>好吧，我承认这个只是别人说的，我个人没有进行验证。</p><p>因为C实在太灵活了，我竟然不敢说它是错的，虽然很有可能是错的。</p><p>毕竟整数不会有下标运算的，强制转换差不多。</p><p>但它毕竟有可能是正确的。</p><p>除非经过验证，我不能断定它是对是错；我不敢断定它是错是对。</p><p>也许人的悲哀就在于这里。</p><p>想要肯定，早已失去肯定的自信；想要否定，却又恐惧未知的恐惧。</p><p>伛偻前行，战战兢兢。</p><p>如临深渊，如履薄冰。</p><p>有人说，人这一生，就是在不断挣扎然后无可避免地走向死亡。</p><p>这句话未免太过乐观。</p><p>因为也许你明天就走向了死亡，不需要挣扎，不需要纠结，自然而然。</p><p>明白了这一点，就知道应该怎么去生活。</p><p>从明天起，泡一杯茶，寄一张明信片。</p><p>从明天起，深呼吸，然后迎接我的宿命。</p>]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> upset </tag>
            
            <tag> C </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[看电影]]></title>
      <url>http://www.wbprime.me/2015/05/16/kan-dianying/</url>
      <content type="html"><![CDATA[<p>人不知道为什么，总有点少年故事历久弥新的情怀。看到丰盛宴席，也许会想起老家时候外婆炒的的老咸菜；看到可爱小宠，也许会怀念看家赶狼还顺带抓老鼠的那匹老黄狗；走在路上，不自觉就回忆到那些个到中午就扑腾在竹林里打闹的夏天。</p><p>来北京也已经快八年了，少小离家也差不多吧，转眼间已经半半百了。在京师里面吃喝，租着房子，购物，聊天，交友，仿佛就像个家似的。</p><p>想起小时候看电影的事情了。那大约是六七岁时候的事情吧。村头的大田里，本来是堆着稻草的。忽然有一天，来了几个人，跑到田里面踱了两步，说话间点点头。过不半响，叔叔伯伯家的男人们都围了过去，女人们也抱着小孩跟着。我在窗户边写作业，听见阿大阿二他们几个小孩子的声音，就抬头张望。</p><p>过了一会儿，看见他们一些人开始叉稻草，就是那叉棍把稻草堆起来弄到一边去。主要是男人们动手，不时有着大笑；不一会儿女人们也有上前帮忙的；小孩子尖叫着跑来跑去，还能听着有的在哭，约摸是打架了。</p><p>过了一会，家里大人回来，说是村里面要放电影。</p><p>那时候看电影，要找一个空旷的大场子，树两根竿支块幕布，有放电影的人摇个机子把影像投上去。大伙儿也不用买票，自己家里搬条长凳过去围起来坐。</p><p>到了晚上开始演。我写完作业，也是跟着大人们一起出去。</p><p>那天演的什么电影我已经忘记了，什么台词什么人物都没在意。大人们看得很高兴，一阵一阵大笑；好也不是大笑，就是开心的开心的笑。</p><p>我跟着小伙伴们也没心没肺地叫，从人群里面冲来冲去，抢别人东西吃，追着打架。有时候大人们大声地骂两句，有时候也不管，自己在那边笑。</p><p>到现在也忘了为啥那么兴奋地尖叫跑闹；尖叫跑闹声响在脑子里面一阵一阵的，仿佛在昨天，又仿佛在十辈子以前。</p><p>再没有那么尖叫跑闹过了。</p>]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> calm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[大难]]></title>
      <url>http://www.wbprime.me/2015/05/16/danan/</url>
      <content type="html"><![CDATA[<p>唐和尚去取经，历八十一难，首难是两界山遇虎，末难是通天河沉经，一山一水，一者天定，一者人为。<br>援道而登山，山巅自有雄奇瑰丽之景，谓事业成就也。遇虎，难也。登山而遇虎，自是造化欲予先夺、欲得先失之理。盖不经风霜何来傲菊也。<br>乘舟而渡水，彼岸自有艳丽夺目之花，谓爱情美满也。沉经，难也。渡水而沉经，不亦历久弥新、历艰弥坚乎？所谓贵难得之货、尚非常之礼是也。<br>今有一人，于事业有不顺，于情感有不谐，而妄自菲薄、愤懑于天，可乎？曰不可。事有顺不顺，时也。元亨利贞，君子终有时。家有谐不谐，命也。修短随化，君子岂由命乎？且夫修身齐家而家齐国治天下平，一旦身修，天下予取予夺，何况二三子哉？<br>易曰，天行健，君子以自强不息。是言也，其勉乎哉，其勉乎哉！</p>]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> upset </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[将进酒]]></title>
      <url>http://www.wbprime.me/2015/05/16/qiangjinjiu/</url>
      <content type="html"><![CDATA[<p>酒一曰天地。天地造化万物，有生老病死、吃喝玩乐万声万态。饮之<br>酒二曰人伦。无人伦则无父子兄弟姐妹姻亲，亲亲孝悌而后百世不绝。饮之<br>酒三曰太一。太一为神灵，为善有所赏，为恶有所惩，虽曰缈缈天意，不亦铮铮浩然之气哉。饮之<br>酒四曰律法。杀之刑之囚之，而后百姓莫敢犯之。饮之<br>酒五曰先生。先我而生，生我也。先我而学，引我也。先我而知道，教我也。生有先后，学有先后，而得道有先后，此传道授业解惑之理也。饮之<br>酒六曰后生。青松苍苍，江水泱泱，焉知后之来者之不如今。饮之<br>酒七曰独独之我。知之者，我也。好之者，我也。乐之者，我也。无我，如天地人伦何？饮之<br>酒八曰爱恨。无我亦无爱，无我亦无恨，无爱无恨，如我何？饮之<br>酒九曰无。人死如灯灭，喜何如哉。饮之<br>九则老矣，过犹不及。饮九杯酒，酸甜苦辣俱有，喜怒哀乐皆在其中矣。不如饮之，不如饮之</p>]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> calm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小王二三事]]></title>
      <url>http://www.wbprime.me/2015/05/16/xiaowang-ersanshi/</url>
      <content type="html"><![CDATA[<h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><p>小王是我的一个朋友，很好的朋友。<br>有一天，他跟我说，“最近想换工作了，帮忙推荐一个呗！”<br>我想了想，问了一句，“###公司想去吗？”<br>“没听说过，不去。其实我也不是非得大公司才去，就是觉得去了一家小小小公司发展不开！”<br>我又想了想，问，“@@@公司如何？”<br>“老加班，去了受不了。其实我也不是怕吃苦，就是觉得人不能只有工作，也该留出时间诗意地生活！”<br>我又想了想，“%%%公司？”<br>“听说待遇一般啊。我觉得就这待遇我离职也没有意义啊！”<br>说完他有点不好意思，解释了一下，“其实差不多都可以，你再想一想？”<br>我觉得还是先摸好底，问他当时为啥找的现在这家单位。<br>他顿时脖子就粗了，红着脸给我急，“当时还不是想着要找一个待遇好一点的工作，最好不怎么加班还得有面子嘛！不就折中到这里了撒。”</p><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><p>小王最近有点迷茫。<br>我问他原因。<br>他说，“在燕城工作了两年，觉得不怎么适应，压力又大；想回老家徽城吧，又放心不下这里的繁华，奈何啊奈何！”<br>小王是徽城人，读大学来的燕城，三年研究生之后在这里找了份工作。<br>我问，“你要是回去徽城了还能再来燕城吗？”<br>一言而决。</p><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><p>小王跟女朋友闹别扭，跟我吐槽，“心情好的时候就是如胶似漆吧，心情一不好就是各种吵架生气。关键是心情老不定，下一秒就爆发了。”<br>我跟他说，“等小二心情好的时候跟她约法三章好了，不要在她心情不爽的时候硬碰硬。”<br>小二就是她女朋友。<br>他说，“一说这个事她心情就不好！”</p><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><p>小王跟我说，“听我的你找女朋友一定要找一个性格温柔一点、脾气小一点、懂得给男朋友留面子的，不然就是又受气又吃亏的下场。”<br>我明白他在说小二。<br>他又说，“女朋友一碰火就着，没来由的，这个对将来没好处。”<br>他还是说小二。<br>我说，“两个人和则在一起，不和则分。老是盯着双方的缺点，最后肯定会分的”</p>]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> happy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[去所对]]></title>
      <url>http://www.wbprime.me/2015/05/16/Qusuodui/</url>
      <content type="html"><![CDATA[<p>王生与聂生俱供职于华北所，以聂年长，故事于聂。<br>春，荧惑犯于角，凶。王生于是有去意，白聂曰愿乞骸骨。<br>聂生问曰，凤凰非梧桐不栖，子去，寡人之过也，不然，何以匆匆求去。<br>王生对曰，吾闻之，昔者唐尧教化天下而许由藏深山，世人皆称尧氏之治而不非失人之过也。武王伐一夫纣而伯夷死首阳，后世咸多武王之功而不讽杀人之罪也。且夫小人长不满八尺，书不足五车，熙熙攘攘之人也，一旦不识黄钟雷鸣，只求蝇蝇苟且，岂敢害君盛德。<br>问曰，虽然，何以去之急也。<br>对曰，唯唯，否否。吴王夫差失败于勾践者，何也，死生之事对以妇人之仁也。淮阴侯信死于宫人之手者，何也，当断不断反受其乱也。去所之事，虽小亦大，缓而图之，病矣。大者害君之宏图大计，小者伤吾之经济根本。急于求去，是不得已也，唯君察之。<br>聂生曰，天下未定，君子就食何处。<br>答曰，贱名不足以辱君贵耳。<br>问曰，然则何以强于华北所。<br>答曰，不然，各有优劣而已。华北所主用心而臣用力，声名<br>播于中国，天下英雄慕之久矣。承国之重器而保密重于泰山，大忠也；萧规曹随代码不改者，大智也；重情谊而轻五斗之禄，大义也。大忠大智大义之人，君子皆爱之也。<br>问，然则何以去之。<br>曰，吾辈小人也，何足道哉。<br>聂生默然，曰，吾知之矣。<br>夫大人者，先臣下之忧而忧，后臣下之乐而乐是也。夫饥则食，寒则衣，人之常情也。不食则殍，不衣则馁。食臣下之食致臣下食不果腹，衣臣下之衣致臣下衣不蔽体，然后曰人才不我用也。岂人才不我用耶，我不用人才也。<br>王生于是去华北所。</p>]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> upset </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[所办趣事]]></title>
      <url>http://www.wbprime.me/2015/05/16/Suoban-qushi/</url>
      <content type="html"><![CDATA[<p>离职手续需要所长书记签字。<br>所长书记在机关小楼里，渐次而邻。小楼东向，东西扩展，中间有天井，北屋落地窗采光，然后走廊，然后办公室南北向，左窗右门，所长书记居于其中。小楼红砖黑瓦，左右松柏，杂以四季青，梧桐拱卫四周，肃穆庄严，溢于言表。<br>从东门入寻所长书记，须从所办过一小玻璃门。所办者，华北所办公室也。所长书记身居重位，平日觥筹交错，日理万机，在所里之日少而在所外之日多也；而员工出入境入离职一切手续皆须所长签字书记盖章才行，故而特设所办下接员工一切事宜，统而交由所长书记办理之后，再交返个人，以提高工作效率。原之约莫古之中书省、龙图阁是也。<br>办理离职需要所长书记签字，故而直接去机关小楼了。一入门，碰着所办秘书。所办秘书，所办执事也。具以所办事宜白所办秘书。所办秘书将文件搁下，曰退下。<br>于是等待所办秘书电话，上午过去了。<br>于是等待所办秘书电话，下午过去了。<br>于是等待所办秘书电话，翌日上午过去了。<br>翌日下午，遇一同事去找所长书记签字，遂结伴而行。入门，同事直接穿玻璃门而去，过所办而不入。至所长办公室，敲门招呼签字谢谢关门；至书记办公室，敲门招呼签字谢谢关门。然后手续完成。<br>吾至所办秘书处交涉，发现只有所长签字而无书记盖章。所办秘书让吾自己去找书记，如果不愿意等待。<br>于是至书记处，签字，离开。<br>十分钟之事，拖累两日还不完。两日之事，如之奈何。<br>所办趣事，记之。</p>]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> calm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[起来(live)]]></title>
      <url>http://www.wbprime.me/2015/05/16/Qilai-live/</url>
      <content type="html"><![CDATA[<p>这首歌的原唱版本是什么四分卫啥的，没有听说过之前，孤陋寡闻的说。</p><p>然后在网易云音乐的歌单上看到这首歌，五月天DNA，就点了一下。</p><p>音乐起，耳朵一亮。</p><p>气势恢宏的配乐，铺天盖地的潮水汹涌而来，先声夺人。</p><p>然后是起来。</p><p>起来。好一种奇怪的感觉。长在红旗下的我们，说到起来，不自然地就会哼出那段旋律，哒哒哒，不愿做奴隶的人们。。。</p><p>接下来的几句就觉得很违和。</p><p>然后先声夺人之后，杏红开始低吟浅唱，开始抒情。</p><p>这之前我没有看歌词，听着主歌旋律和歌词，大约的确是五月天的风格，感伤但又要充满希望，叛逆又那么找不到方向。</p><p>接着往下听，没有惊艳的意思。</p><p>然后，于是我闭上眼睛去抚摸。</p><p>然后，在那黑暗中挣扎的光线。</p><p>然后，于是我又开始这疼痛感觉。</p><p>赞。</p><p>我连忙点开歌词，对着歌词往下听。</p><p>越听越惊喜，大概是因为live版开始大合唱了，渐渐情绪投入了，觉得歌词大赞，歌曲大赞，合唱大赞。</p><p>就又听了一遍，一边翻看评论，才发现原唱不是五月天，是叫什么四分卫的乐团。</p><p>于是找了原唱的版本，听了几句，不知道为啥有点很乏味的意思，不知道因为改编的原因，还是live气势很足的样子，杏红唱的版本很有劲儿，原唱太娘。</p><p>心情不好的时候听一遍，能显著调整情绪振奋精神。不过重复播放性不强。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">起来  </div><div class="line"></div><div class="line">作词：陈如山</div><div class="line">作曲：陈如山  </div><div class="line"></div><div class="line">起来 我要你看得见</div><div class="line">再大的风雨要用力飞 </div><div class="line">起来 或许你觉得累 </div><div class="line">记得我 在末日来临之前</div><div class="line">海浪在退潮之前 将我消失在泡沫里面</div><div class="line">我承受这份孤单 留下脚印在沙滩</div><div class="line">远方灯火通明 让海和天一样黑</div><div class="line">微风吹动风帆 失去引力向前追 </div><div class="line">突然间我才发现 前方灯塔已熄灭</div><div class="line">我又被影子拉回地面</div><div class="line">被夜晚冷却的沙滩 快乐悲伤浮在上边</div><div class="line">无法抗拒这味道 让空气分割我的脸</div><div class="line">忽然间我才了解 就在起飞的那一瞬间</div><div class="line">我不能独自在海上漂浮</div><div class="line">于是我闭上眼睛去抚摸</div><div class="line">在那黑暗中挣扎的光线</div><div class="line">于是我又开始这疼痛感觉</div><div class="line">起来 我要你看得见</div><div class="line">再大的风雨要用力飞</div><div class="line">起来 或许你觉得累</div><div class="line">记得我 在末日来临之前</div><div class="line">感觉全身在颤抖 无法用心对齐你我的脚步</div><div class="line">太多太快来不及去接受 太多太远太过份执着</div><div class="line">鼓起勇气才看见失去理由</div><div class="line">起来 我要你看得见</div><div class="line">再大的风雨要用力飞</div><div class="line">起来 或许你觉得累</div><div class="line">记得我 在末日来临之前</div><div class="line">起来 我要你看得见</div><div class="line">再大的风雨要用力飞</div><div class="line">起来 或许你觉得 觉得累</div><div class="line">记得我 在末日来临之前</div><div class="line">起来 起来 起来 起来  起来 起来 起来 起来 起来 起来 起来 起来 起来 起来 起来 起来 起来</div><div class="line">记得 我在末日来临之前</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Mayday </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mayday </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[非常六加一]]></title>
      <url>http://www.wbprime.me/2015/05/16/feichangliujiayi/</url>
      <content type="html"><![CDATA[<p>人生如逆旅，年轮旋转压出一条车辙通向远方，远方是终点也是起点。起点叫死亡，终点叫希望。<br>希望，是什么希望？<br>解脱的希望。<br>周一之后是周二。<br>周二之后是周三。<br>周三之后是周四。<br>周四之后是周五。<br>周五之后是周六。<br>周六之后是周七。<br>为什么没有周七？<br>因为周七这个词太悲观了，周而复始已经够让人绝望的了，还要叫周期。宿命也未免欺负人得太赤裸裸了！<br>所以说那一天肯定不能叫周七。<br>人生就是一个周期。<br>人生也是无数个周七。<br>犯错，然后咽下苦果。咽下苦果，然后再次犯错。<br>周一，起床跟自己说要好好享受生活，晚上跟自己说加班就是享受生活。<br>周二，起床跟自己说上班要简洁高效，晚上跟自己说拖拖沓沓显得从容。<br>周三，起床跟自己说从容不迫方显自信，晚上跟自己说人在屋檐下不得不追着项目目进度跑。<br>周四，起床跟自己说时光如梭分秒必争，晚上跟自己说人是生灵须要劳逸结合。<br>周五，起床跟自己说轻轻松松收官之战，晚上跟自己说人行百里半九十。<br>周六，起床跟自己说要积极进取锻炼身体，晚上跟自己说睡觉睡觉睡觉最大。<br>终于，周日了，醒了，终于决定要好好享受生活。看了看表，下午三点了，那么明天再说吧！<br>这样，周七就过去了，下一个周七就要来了。<br>有人说，明天还有就是希望，今天只是现在，未来永远是无限可能。<br>是的，今天才是周五，何必着急？<br>周七过去了，下一个周七还回来的。<br>下一个周七总要来的。</p>]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> upset </tag>
            
            <tag> thoughts </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[记怀柔烧烤]]></title>
      <url>http://www.wbprime.me/2015/05/14/Ji-Huairou-Shaokao/</url>
      <content type="html"><![CDATA[<h1 id="一-缘起"><a href="#一-缘起" class="headerlink" title="一 缘起"></a>一 缘起</h1><p>过了清明，天气转暖。身在帝都也终于感受到了一丝春意，欣欣然，在点点花香环绕下生出来两分造化自然物我合一的感觉来。然而，花香再香，也只是一袖花香；柳条再绿，也只是一丝柳绿；何如万紫千红、千丝万缕呢？</p><p>然则，帝都怀抱于燕山之中，却突兀于群山之间。所谓春草年年绿，春风不过门。帝都，人多，春风少。</p><p>正好同事田氏在怀柔家开了农家乐，迎宾好客，生意兴隆。田氏为人多逸气，有感于柳绿花红鸟飞风鸣之意，颇生踏青之心冶游之意。于是振臂一呼，应斯人胸中之意，又利用自家便利，定下了西元四月十八烧烤之约。</p><h1 id="二-出发"><a href="#二-出发" class="headerlink" title="二 出发"></a>二 出发</h1><p>是日。</p><p>早七点，闹铃响了，身体开始冷启动。初始化引导区和内核，三分钟。初始化硬件，两分钟。启动基础服务，三分钟。启动工作环境，两分钟。完毕，可以起床了。</p><p>刷牙洗脸，饭也来不及吃就上去地铁，发动行程。</p><p>八点二十，同事孟某汪某杜某出现，四人碰头，坐上916，兴致勃勃朝怀柔进发。</p><p>今天是周六，出城的人多。人多就车多，车多就堵车，堵车就慢。本来预想的是人在江上游，水在两边流。结果是寻寻、觅觅、寻寻。车子以瓜牛的速度行驶，不一会儿人就昏昏欲睡了。</p><p>昏昏然，昏昏然，然后就到了。大约历时两个半小时。</p><p>下车之后，寻了一道公交，过了不用十五分钟就到站。</p><p>下车之后，用力呼吸一口大怀柔的空气。果然，果然不愧是出产大板栗的地方，空气就是清新一个赞。</p><h1 id="三-砸炭"><a href="#三-砸炭" class="headerlink" title="三 砸炭"></a>三 砸炭</h1><p>进了田氏庄园大门，迎面是天井里面一畦畦的菜园。农家乐，果然名副其实。</p><p>烧烤，首先有凉菜，然后有串，然后有架子。最重要的是什么？当然必须是要有炭了。</p><p>其他几个人在哪里穿串，我自领了砸炭的大令。半天，砸了一簸箕的碎炭。没累出一身大汗，双手沾上了满满黑灰。</p><p>田氏在厨房炖鸡，香味飘散，让人食指大动。</p><h1 id="四-烤串"><a href="#四-烤串" class="headerlink" title="四 烤串"></a>四 烤串</h1><p>终于开始烤串了，我跃跃欲试。按照指导说明开始端着烤串盘，架上羊排，喷上孜然粉、粉盐粒和胡椒粉，之后羊肉的香气扑面而来，赞一个。烤完了羊排开始烤肉串。我把羊排烤的香喷喷，也想把肉串烤的香喷喷。结果跟想象的完全不一样，羊排肉厚，结果对火候的考验不高；肉串量小，火一大就黑了。结果第一把肉串烤出来有点焦。</p><p>之后果断让高手烤。然后试了试手，烤了一下鱼。鱼不耐烤，只用稍稍用火就可以了，芳香四溢，超级赞。烤出来鱼肉又白又嫩又爽又滑，口感非常赞。</p><h1 id="五-宴席"><a href="#五-宴席" class="headerlink" title="五 宴席"></a>五 宴席</h1><p>吃饭的时候，八个人围成一圈，开始一边烤肉一边吃。</p><p>菜有烤羊排、烤串、烤鱼、骨肉相连、烤鸡翅，还有炖鸡、冰虹鳟鱼、炸虾和一些凉菜。</p><p>喝的有鲜橙多，和啤酒。</p><p>大家一起吃饭，不一会儿就玩起来了真心话大冒险，够劲爆。</p><h1 id="六-归程"><a href="#六-归程" class="headerlink" title="六 归程"></a>六 归程</h1><p>吃完了之后，帮忙收拾完桌子，大家就开始回去了。</p><p>天气不是很晴，头顶一片雾蒙蒙，不知道是阴了天还是雾霾。春天就是如此，阴晴变化，造化阴阳。</p><p>大家一起走到车站，有说有笑。坐上916路长途车，回家在望。</p><p>在车站，大家依依惜别，挥手道别，笑容满面。心中满是不舍。</p>]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> trip </tag>
            
            <tag> happy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://www.wbprime.me/2015/05/13/Hello-World/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[坚持住 外婆]]></title>
      <url>http://www.wbprime.me/2014/05/16/jianchizhu-waipo/</url>
      <content type="html"><![CDATA[<p>外婆 小时候跟你一起长大</p><p>现在 长大了外婆却老了</p><p>还记得那时 大清早去一起别人家的栗子树下面捡板栗</p><p>还记得那时 偷摸摸把我叫到房间塞给我一大把糖果</p><p>还记得那时 跑到山上面去摘茶树果子一边唱山歌</p><p>还记得那时侯的外婆拉着我的手 讲解放前的新鲜事儿 夜空中繁星闪烁 萤火虫在身边上下翻舞</p><p>那是外婆</p><p>这几年在外面游荡 外婆不经意间就老了</p><p>老着老着 不经意间身体就差了</p><p>上上周回家 7月9号去看的外婆 拉着她的手 她看着我 说 泼你来了</p><p>现在想起来 潸然泪下</p><p>现在出了意外 希望她老人家逢凶化吉 恢复健康</p><p>人生在世 其实值得哭一场的只有那么几个人 有些事情 如果缘分已尽 就不必强求了</p><p>外婆 愿你安静走过</p>]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> upset </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[突然想起注释来]]></title>
      <url>http://www.wbprime.me/2014/05/16/turan-xiangqi-zhushi-lai/</url>
      <content type="html"><![CDATA[<p>很奇怪的念头突然在脑中浮现出来：为什么代码中可以有注释？</p><p>先来看看C/C++的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">int main(int, char **)</div><div class="line">&#123;    </div><div class="line">    ......    </div><div class="line"></div><div class="line">    int a;</div><div class="line">    doSomthing(a);</div><div class="line">    //  maybeDosomthing(a);</div><div class="line"></div><div class="line">    ......</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这一行：<code>// maybeDosomthing(a);</code>说明了注释的用途。可能作者原来想干点什么事情，然后在后续的过程中又改变了主意。</p><p>注释在这里起到了一个后悔药的作用，以前的东西先暂时保存起来，在当前消失，在未来可能再现。</p><p>然而，版本控制工具可以达到更好的效果，不需要注释：不是代码本身，而是额外的载体记录代码改动的变化。过去就是过去，历史就是历史。过往的可以存在于记忆中，可以记录在空气里，但是却不能再回来了。</p><p>没有事情会永远不变，也没有东西永远改变。希望过去的要过去，过去了就过去。</p><p>什么乱七八糟的，自己都不知道自己在说什么。</p><p>在南京第二天了，昨天晚上吃完饭心情极其低落。打了个车走上长江边上，夜晚中的江流起伏，暗涌的潮声淹没在夜幕里。听得见去看不见，听见了就会很害怕，害怕未知，害怕黑暗，害怕恐惧。凉风侵袭过来，漫天的都是黑夜，看不见江水，看不见灯光，看不见北京。</p><p>谨记之！</p>]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> upset </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[知足]]></title>
      <url>http://www.wbprime.me/2013/05/16/zhizu/</url>
      <content type="html"><![CDATA[<p>一直很喜欢这首知足；但是一直也不想写这首知足。</p><p>为什么？</p><p>因为知足，当然是在经历过失去的悲痛欲绝和求不得的纠结难耐之后，才明白的要珍惜拥有的惶惶然和主动放手的戚戚然。</p><p>所以知足，是一种决然。</p><p>但是，不知天高地厚的人，怎么知足，怎么知道知足？</p><p>得到了，害怕失去；拥有了，害怕分离；即使过去了，也希望有一只时光机器。</p><p>也许是过去太美好了，也许是未来太残酷了。</p><p>也许是人太懦弱了。</p><p>也许是我太悲观了。</p><p>五月天，知足。</p><p>传说是六月份蟹子的最爱。</p><p>因为蟹子内心的敏感不安；也因为蟹子天性的内向消极。</p><p>什么是真实的？</p><p>什么是永恒的？</p><p>过去终究是梦诞的；未来永远是虚妄的。</p><p>失去的到底是别人的；追求的未必是自己的。</p><p>只有现在才是真实的；只有攥在手心能够听见自己心跳的才是永恒的。</p><p>所以要知足！</p><p>所以要知足。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">知足</div><div class="line"></div><div class="line">作词：阿信</div><div class="line"></div><div class="line">作曲：阿信</div><div class="line"></div><div class="line">怎么去拥有 一道彩虹 </div><div class="line"></div><div class="line">怎么去拥抱 一夏天的风 </div><div class="line"></div><div class="line">天上的星星 笑地上的人 </div><div class="line"></div><div class="line">总是不能懂 不能觉得足够 </div><div class="line"></div><div class="line">如果我爱上 你的笑容 </div><div class="line"></div><div class="line">要怎么收藏 要怎么拥有 </div><div class="line"></div><div class="line">如果你快乐 不是为我 </div><div class="line"></div><div class="line">会不会放手 其实才是拥有 </div><div class="line"></div><div class="line">当一阵风 吹来 风筝飞上天空 </div><div class="line"></div><div class="line">为了你 而祈祷 而祝福 而感动 </div><div class="line"></div><div class="line">终于你身影 消失在人海尽头 </div><div class="line"></div><div class="line">才发现 笑着哭最痛 </div><div class="line"></div><div class="line">那天你和我 那个山丘 </div><div class="line"></div><div class="line">那样的唱着 那一年的歌 </div><div class="line"></div><div class="line">那样的回忆 那么足够 </div><div class="line"></div><div class="line">足够我天天 都品尝着寂寞 </div><div class="line"></div><div class="line">当一阵风吹来 风筝飞上天空 </div><div class="line"></div><div class="line">为了你 而祈祷 而祝福 而感动 </div><div class="line"></div><div class="line">终于你身影 消失在人海尽头 </div><div class="line"></div><div class="line">才发现 笑着哭最痛 </div><div class="line"></div><div class="line">当一阵风吹来 风筝飞上天空 </div><div class="line"></div><div class="line">为了你 而祈祷 而祝福 而感动 </div><div class="line"></div><div class="line">终于你身影 消失在人海尽头 </div><div class="line"></div><div class="line">才发现 笑着哭最痛 </div><div class="line"></div><div class="line">如果我爱上 你的笑容 </div><div class="line"></div><div class="line">要怎么收藏 要怎么拥有 </div><div class="line"></div><div class="line">如果你快乐 再不是为我 </div><div class="line"></div><div class="line">会不会放手 其实才是拥有 </div><div class="line"></div><div class="line">知足的快乐 叫我忍受心痛 </div><div class="line"></div><div class="line">知足的快乐 叫我忍受心痛</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Mayday </category>
            
        </categories>
        
        
        <tags>
            
            <tag> calm </tag>
            
            <tag> Mayday </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[生命有一种绝对]]></title>
      <url>http://www.wbprime.me/2013/05/16/shengmingzhong-you-yizhong-juedui/</url>
      <content type="html"><![CDATA[<p>从来都不是一个豪气凌云的人，也从来没有经历过什么热血澎湃的岁月。</p><p>上学，考试，升学；上学，考试，升学；上学，考试，升学； 上学，考试，升学； 上学，然后呢？</p><p>放佛一下子就老了，突然之间觉得人生就这么没了。</p><p>不知不觉开始觉得，我不这样又如何？</p><p>开始想为什么活着，又要如何活着了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这个世界有你不能到达的地方，有你不应到达的地方，有你一辈子也不会去到达的地方，你的世界并不如你想象的那么大，界限也许就在你的身边，可你却以为你可以去任何地方。 《悟空传》</div></pre></td></tr></table></figure><p>你或许领悟到了，也或许没有领悟到，又或者这仅仅是一个错觉？</p><p>然而，你肯定会有这种感觉，那就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">你以为你有很多路可以选择，但是在你四周有很多看不见的墙，其实你只有一条路可以走。 《悟空传》</div></pre></td></tr></table></figure><p>或者一种命中注定的挫败感会缠着你，让你陷入某种玄之又玄的宿命之中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">是不是选择任何一个方向，都会游向同一个宿命呢？ 《悟空传》</div></pre></td></tr></table></figure><p>这是所有生灵的悲剧，从空而来，又向空而去，经历了，却又不知道要经历什么。然后就死了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">死是什么也看不见，什么也听不见，什么也感觉不到，什么也不会想，就像你未出生时一样。 《悟空传》</div></pre></td></tr></table></figure><p>只是，回忆中那个少年，为何依然不停的追？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">我要天下再无我战不胜之物！ 《悟空传》</div></pre></td></tr></table></figure><p>尽管，想要征服的世界，始终都没有改变。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">他宁愿死，也不肯输。  《悟空传》</div></pre></td></tr></table></figure><p>是的，生命有一种绝对！</p><p>绝对的不能放弃，绝对的不能认输，绝对的固执坚守最后的底线。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">你跳不出这个世界，是因为你不知道这个世界有多大，一旦你知道了，你就超出了它。《悟空传》</div></pre></td></tr></table></figure><p>勉之！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">生命有一种绝对</div><div class="line"></div><div class="line">作词：阿信</div><div class="line"></div><div class="line">作曲：阿信</div><div class="line"></div><div class="line">如果我不曾走过这一遍</div><div class="line"></div><div class="line">生命中还有多少苦和甜美</div><div class="line"></div><div class="line">那风中的歌声</div><div class="line"></div><div class="line">孤单哽咽的声音是谁</div><div class="line"></div><div class="line">回忆中那个少年</div><div class="line"></div><div class="line">为何依然不停的追</div><div class="line"></div><div class="line">想要征服的世界</div><div class="line"></div><div class="line">始终都没有改变</div><div class="line"></div><div class="line">那地上无声蒸发我的泪</div><div class="line"></div><div class="line">黑暗中期待光线</div><div class="line"></div><div class="line">生命有一种绝对</div><div class="line"></div><div class="line">等待我 请等待我</div><div class="line"></div><div class="line">直到约定融化成笑颜</div><div class="line"></div><div class="line">那生命灿烂烟火般上演</div><div class="line"></div><div class="line">你和我最后都要回归地平线</div><div class="line"></div><div class="line">那留下的足迹</div><div class="line"></div><div class="line">浪花冲走回忆海岸线</div><div class="line"></div><div class="line">靠近我 再拥抱我</div><div class="line"></div><div class="line">请不要让我的心冷却</div><div class="line"></div><div class="line">想要征服的世界</div><div class="line"></div><div class="line">始终都没有改变</div><div class="line"></div><div class="line">那地上无声蒸发我的泪</div><div class="line"></div><div class="line">黑暗中期待光线</div><div class="line"></div><div class="line">生命有一种绝对</div><div class="line"></div><div class="line">等待我 请等待我</div><div class="line"></div><div class="line">直到约定融化成笑颜</div><div class="line"></div><div class="line">想要征服的世界</div><div class="line"></div><div class="line">始终都没有改变</div><div class="line"></div><div class="line">那地上无声蒸发我的泪</div><div class="line"></div><div class="line">黑暗中期待光线</div><div class="line"></div><div class="line">生命有一种绝对</div><div class="line"></div><div class="line">等待我 请等待我</div><div class="line"></div><div class="line">直到约定融化成笑颜</div><div class="line"></div><div class="line">想要征服的世界</div><div class="line"></div><div class="line">始终都没有改变</div><div class="line"></div><div class="line">那地上无声蒸发我的泪</div><div class="line"></div><div class="line">黑暗中期待光线</div><div class="line"></div><div class="line">生命有一种绝对</div><div class="line"></div><div class="line">等待我 请等待我</div><div class="line"></div><div class="line">靠近我 再拥抱我</div><div class="line"></div><div class="line">不要走 请不要走</div><div class="line"></div><div class="line">直到约定融化成笑颜</div><div class="line"></div><div class="line">直到我看见生命的绝对</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Mayday </category>
            
        </categories>
        
        
        <tags>
            
            <tag> calm </tag>
            
            <tag> Mayday </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一颗苹果]]></title>
      <url>http://www.wbprime.me/2013/05/16/yikepingguo/</url>
      <content type="html"><![CDATA[<p>累了，就停下来听这首歌。</p><p>倦了，也停下来听这首歌。</p><p>当你走着走着，突然忘了自己要往哪里走的时候。</p><p>当你飞着飞着，突然想起来没地方落下脚的时候。</p><p>当你努力努力，突然觉得自己很委屈无奈的时候。</p><p>也许，曾经的曾经早已变成了遗忘，未来的未来还只是幻想。</p><p>请记得，活着其实很好， 幸福刚好够用。</p><p>反正就这样吧，我知道我努力过，再吃一颗苹果！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">一颗苹果</div><div class="line"></div><div class="line">作词：阿信</div><div class="line"></div><div class="line">作曲：阿信</div><div class="line"></div><div class="line">经过了漫长的等候 梦想是梦想 我还是一个我</div><div class="line"></div><div class="line">那时间忘记挽留 最美时候 不经意匆匆的放过</div><div class="line"></div><div class="line">曾经想拥抱的彩虹 盛开的花朵 那纯真的笑容</div><div class="line"></div><div class="line">突然有风吹过 那一转眼只剩我</div><div class="line"></div><div class="line">我不懂 人世间的那些愁 他为什么要缠著我</div><div class="line"></div><div class="line">到底这会是谁的错 还是我不放手</div><div class="line"></div><div class="line">喔 人世间的那些愁 这世界给我的幽默</div><div class="line"></div><div class="line">这是不是要告诉我 潮起终究潮落</div><div class="line"></div><div class="line">总要有人来陪我 咽下苦果 喔 再尝一点美梦</div><div class="line"></div><div class="line">要等你先开口 那冬天才会走</div><div class="line"></div><div class="line">有些人经过我身旁 住在我脑中 在我心里钻洞</div><div class="line"></div><div class="line">有些人变成相片 堆在角落 灰尘像雪一般冰冻</div><div class="line"></div><div class="line">时间如果可以倒流 我想我还是 会卯起来蹉跎</div><div class="line"></div><div class="line">反正就这样吧 我知道我努力过</div><div class="line"></div><div class="line">我想到 遥远遥远的以后 会不会有人知道我</div><div class="line"></div><div class="line">在这个寂寞的星球 曾这样的活过</div><div class="line"></div><div class="line">喔 遥远遥远的以后 天长和地久的尽头</div><div class="line"></div><div class="line">应该没有人能抢走 我永远的感动</div><div class="line"></div><div class="line">总要有一首我的歌 大声唱过 喔 再看天地辽阔</div><div class="line"></div><div class="line">活著不多不少 幸福刚好够用</div><div class="line"></div><div class="line">活著其实很好 再吃一颗苹果</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Mayday </category>
            
        </categories>
        
        
        <tags>
            
            <tag> calm </tag>
            
            <tag> Mayday </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[疯狂世界]]></title>
      <url>http://www.wbprime.me/2013/05/16/fengkuangshijie/</url>
      <content type="html"><![CDATA[<p>五月天的歌曲，早期的代表作之一，疯狂世界。</p><p>我好想好想飞，逃离这个疯狂世界。</p><p>一无所有，又想拥有一切的年代。</p><p>失去了所有，绝望了存在的臆想。</p><p>恍惚间，那些曾经让我很热血很亢奋的词句都已经暗淡了下来。</p><p>好长时间没有去听这样一首歌了。</p><p>嗓音有一点稚嫩了，节奏有一点喧哗了。</p><p>然而，依然感动那一句。</p><p>你是一种感觉，写在夏日晚风里面。</p><p>不管怎样，五月天的词，总有能钻进你心里面去的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">疯狂世界</div><div class="line"></div><div class="line">作词：阿信</div><div class="line"></div><div class="line">作曲：阿信</div><div class="line"></div><div class="line">如果说了后悔 是不是一切就能倒退</div><div class="line"></div><div class="line">回忆多么美 活着多么狼狈</div><div class="line"></div><div class="line">为什么这个世界 总要叫人尝伤悲</div><div class="line"></div><div class="line">我不能了解 也不想了解</div><div class="line"></div><div class="line">我好想好想飞 逃离这个疯狂世界</div><div class="line"></div><div class="line">那么多苦 那么多累 那么多莫名的泪水</div><div class="line"></div><div class="line">我好想好想飞 逃离这个疯狂的世界</div><div class="line"></div><div class="line">如果是你 发现了我 也别将我挽回</div><div class="line"></div><div class="line">想了你一整夜 再也想不起你的脸</div><div class="line"></div><div class="line">你是一种感觉 写在夏夜晚风里面</div><div class="line"></div><div class="line">青春是挽不回的水 转眼消失在指间</div><div class="line"></div><div class="line">用力地浪费 再用力地后悔</div><div class="line"></div><div class="line">我好想好想飞 逃离这个疯狂世界</div><div class="line"></div><div class="line">那么多苦 那么多累 那么多莫名的泪水</div><div class="line"></div><div class="line">我好想好想飞 逃离这个疯狂的世界</div><div class="line"></div><div class="line">如果是你 发现了我 也别将我挽回</div><div class="line"></div><div class="line">我好想好想飞 逃离这个疯狂世界</div><div class="line"></div><div class="line">那么多苦 那么多累 那么多莫名的泪水</div><div class="line"></div><div class="line">我好想好想飞 逃离这个疯狂的世界</div><div class="line"></div><div class="line">如果是你 发现了我 也别将我挽回</div><div class="line"></div><div class="line">我好想好想飞 逃离这个疯狂世界</div><div class="line"></div><div class="line">那么多苦 那么多累 那么多莫名的伤悲</div><div class="line"></div><div class="line">我好想好想飞 逃离这个疯狂的世界</div><div class="line"></div><div class="line">如果是你 发现了我 也别将我挽回</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Mayday </category>
            
        </categories>
        
        
        <tags>
            
            <tag> calm </tag>
            
            <tag> Mayday </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[九号球]]></title>
      <url>http://www.wbprime.me/2013/05/16/jiuhaoqiu/</url>
      <content type="html"><![CDATA[<p>不知道这首歌的主旨是什么，这首歌的内涵是什么。</p><p>也许这一首歌，写给的对象是那种不想去思考内涵和意义，也没来及思考的人们，写给当年那个意气风发、浮躁叛逆的少年的。</p><p>我只能逃走，奔向自由。</p><p>自由了，才是人生的终极意义。</p><p>但人生哪有什么终极的意义啊？</p><p>也许我这一生，始终在追逐那颗九号球，追逐那些年少的轻狂和自由的独立。</p><p>却忘了是谁在爱我。</p><p>却忘了，父母才是我来到这个世界的理由。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">九号球</div><div class="line"></div><div class="line">作词：阿信</div><div class="line"></div><div class="line">作曲：怪兽</div><div class="line"></div><div class="line">逃走 翻过围墙</div><div class="line"></div><div class="line">我只能逃走 从教室里头</div><div class="line"></div><div class="line">奔向自由</div><div class="line"></div><div class="line">熟悉角落</div><div class="line"></div><div class="line">有人在等我 有挑衅的笑容</div><div class="line"></div><div class="line">今天谁先开球 让谁尝点苦头</div><div class="line"></div><div class="line">绿色地平线上 我撞著彩色堕落</div><div class="line"></div><div class="line">也许我这一杆 又没办法进球</div><div class="line"></div><div class="line">就像我的生活 一直在出差错</div><div class="line"></div><div class="line">也许我这一生 始终在追逐那颗九号球</div><div class="line"></div><div class="line">却忘了 是谁在爱我</div><div class="line"></div><div class="line">却忘了 是谁在罩著我</div><div class="line"></div><div class="line">从前 书包很满</div><div class="line"></div><div class="line">装不下的梦 就丢了一些</div><div class="line"></div><div class="line">未来我们</div><div class="line"></div><div class="line">要怎么活</div><div class="line"></div><div class="line">凝视著白球 暂时我不去想</div><div class="line"></div><div class="line">天空渐渐变红 影子爬满球桌</div><div class="line"></div><div class="line">输赢没有结果 像人生难以捉摸</div><div class="line"></div><div class="line">也许我这一杆 又没办法进球 </div><div class="line"></div><div class="line">就像我的生活 一直在出差错</div><div class="line"></div><div class="line">也许我这一生 始终在追逐那颗九号球</div><div class="line"></div><div class="line">却忘了 是谁在爱我</div><div class="line"></div><div class="line">却忘了 是谁在罩著我</div><div class="line"></div><div class="line">也许我这一杆 又没办法进球</div><div class="line"></div><div class="line">就像我的生活 一直在出差错</div><div class="line"></div><div class="line">也许我这一生 始终在追逐那颗九号球</div><div class="line"></div><div class="line">却忘了 是谁在爱我</div><div class="line"></div><div class="line">也许我这一杆 又没办法进球</div><div class="line"></div><div class="line">就像我的生活 一直在出差错</div><div class="line"></div><div class="line">也许我这一生 始终在追逐那颗九号球</div><div class="line"></div><div class="line">却忘了 是谁在爱我</div><div class="line"></div><div class="line">却忘了 是谁在罩著我</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Mayday </category>
            
        </categories>
        
        
        <tags>
            
            <tag> calm </tag>
            
            <tag> Mayday </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洗衣机]]></title>
      <url>http://www.wbprime.me/2013/05/16/xiyiji/</url>
      <content type="html"><![CDATA[<p>一首感怀母爱的歌曲，洗衣机应该是很平常。但是放在整张专辑里面来说，就有一些特殊的意味。</p><p>专辑名字叫作《第二人生》。</p><p>也许人这一辈子，最容易忽视的东西，其中有一样就叫做母爱。</p><p>洗衣机的前半部分，节奏轻快明了。</p><p>后半部分，听着听着就开始想起了小时候的那些场景。</p><p>那个骂你同时还紧紧抱着你的人啊。</p><p>那个厨房里炒菜时轻轻抹汗的人啊。</p><p>那个洗着衣服不时捶捶腰椎的人啊。</p><p>她总是不想你弱于人；也不想你累于己。</p><p>不管怎样，衣锦还乡，还是碌碌无为，那个女人，都是你的母亲。</p><p>母亲，对于你，只要健康快乐。</p><p>而已。</p><p>希望母亲，也要健康快乐，一定！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line">洗衣机</div><div class="line"></div><div class="line">词：阿信</div><div class="line"></div><div class="line">曲：怪兽</div><div class="line"></div><div class="line">洗衣机 穿著一身退色塑料压克力</div><div class="line"></div><div class="line">独坐在阳台上 受日晒风吹雨淋</div><div class="line"></div><div class="line">电视机 孩子们目光都以他为中心</div><div class="line"></div><div class="line">黑色简约外型 多适合客厅</div><div class="line"></div><div class="line">就算是吹风机 也有流线外型</div><div class="line"></div><div class="line">紧握在手心像 跳舞亲密</div><div class="line"></div><div class="line">光荣的电唱机 晋身为古董级</div><div class="line"></div><div class="line">典雅的中音比 谁都更受欢迎</div><div class="line"></div><div class="line">木讷的洗衣机 从没有主题曲</div><div class="line"></div><div class="line">只有风霜灰尘 让人不想接近</div><div class="line"></div><div class="line">从来没有一句的怨言 你丢多少它都洗</div><div class="line"></div><div class="line">脱水总是全心又全力 直到颤抖了身体</div><div class="line"></div><div class="line">多少年了旋转又旋转 时间一眨眼过去</div><div class="line"></div><div class="line">上了年纪却依然尽力 孤独勇敢洗衣机</div><div class="line"></div><div class="line">咖啡机 欧洲进口带著书卷贵族气</div><div class="line"></div><div class="line">孩子都长大了 爱围著它喝那堤</div><div class="line"></div><div class="line">洗衣机 一直以来度量很大没心机</div><div class="line"></div><div class="line">它的唯一关心 是何时放晴</div><div class="line"></div><div class="line">就算是已退役 的那台光碟机</div><div class="line"></div><div class="line">也带我经历冒 险和爱情</div><div class="line"></div><div class="line">冰箱的肚子里 啤酒和冰淇淋</div><div class="line"></div><div class="line">抚慰了多少失 眠和失恋的心</div><div class="line"></div><div class="line">木讷的洗衣机 从学不会讨喜</div><div class="line"></div><div class="line">洗过多少四季 然后再一世纪</div><div class="line"></div><div class="line">所有电器都住在屋檐 下不必风吹雨淋</div><div class="line"></div><div class="line">却只有它孤独的守在 阳台角落里运行</div><div class="line"></div><div class="line">多少年了旋转又旋转 时间一眨眼过去</div><div class="line"></div><div class="line">上了年纪却依然尽力 孤独勇敢洗衣机</div><div class="line"></div><div class="line">突然有天好想要帮忙 衣服放进洗衣机</div><div class="line"></div><div class="line">才发现了它早就坏了 只是舍不得换新</div><div class="line"></div><div class="line">奇怪是谁一直清洗著 我闯的祸和污泥</div><div class="line"></div><div class="line">好久以来原来我衣服 全部都是妈妈洗</div><div class="line"></div><div class="line">从来没有一句的怨言 你丢多少她都洗</div><div class="line"></div><div class="line">她却总是全心又全力 直到颤抖了身体</div><div class="line"></div><div class="line">多少年了旋转又旋转 时间一眨眼过去</div><div class="line"></div><div class="line">才发现了妈妈一直是 我无声洗衣机</div><div class="line"></div><div class="line">才发现了她的皱纹是 无法偿还的借据</div><div class="line"></div><div class="line">才发现了她的背影是 无法释怀的风景</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Mayday </category>
            
        </categories>
        
        
        <tags>
            
            <tag> calm </tag>
            
            <tag> Mayday </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我们]]></title>
      <url>http://www.wbprime.me/2013/05/16/women/</url>
      <content type="html"><![CDATA[<p>终于知道，为什么那么多人会信奉宗教？</p><p>世界的每一个角落里，遍布了上帝的信徒、安拉的仆人和佛陀的信众。</p><p>将自己的信仰放到一个自己理性上却只不会存在的存在上，让自己的心灵去向往美好，去追寻幸福。这是自我麻醉，也是自我救赎。</p><p>听过这首《我们（时时刻刻）》，突然觉得真善美，确实是我一直想追求的，也一直在追求的事物。</p><p>不知道阿信哪里来这么悲观绝望的黑暗？</p><p>希望所有的人幸福和快乐！</p><p>希望所有的人都充满了希望。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">我们</div><div class="line"></div><div class="line">词：阿信</div><div class="line"></div><div class="line">曲：阿信</div><div class="line"></div><div class="line">我为何要存在 为何要感慨 </div><div class="line"></div><div class="line">为何颤抖停不下来</div><div class="line"></div><div class="line">你为何要推翻 为何要离开</div><div class="line"></div><div class="line">为何给我这个答案</div><div class="line"></div><div class="line">我们曾经那么精彩</div><div class="line"></div><div class="line">我们曾经那么期待</div><div class="line"></div><div class="line">最后你把回忆还我 要我好好过</div><div class="line"></div><div class="line">你话中的计算 准确的伤害</div><div class="line"></div><div class="line">像精心打造的对白</div><div class="line"></div><div class="line">我划开了动脉 也许不醒来 </div><div class="line"></div><div class="line">至少昨天无法毁坏</div><div class="line"></div><div class="line">我们曾经那么精彩</div><div class="line"></div><div class="line">我们曾经那么期待</div><div class="line"></div><div class="line">最后你把回忆还我 要我好好过</div><div class="line"></div><div class="line">我们最后这么遗憾</div><div class="line"></div><div class="line">我们最后这么无关</div><div class="line"></div><div class="line">时时刻刻每个现在 都在嘲笑我</div><div class="line"></div><div class="line">我们曾经那么精彩</div><div class="line"></div><div class="line">我们曾经那么期待</div><div class="line"></div><div class="line">最后你把回忆还我 要我好好过</div><div class="line"></div><div class="line">我们最后这么遗憾</div><div class="line"></div><div class="line">我们最后这么无关</div><div class="line"></div><div class="line">时时刻刻每个现在 都在嘲笑我</div><div class="line"></div><div class="line">我们曾经那么精彩</div><div class="line"></div><div class="line">我们曾经那么期待</div><div class="line"></div><div class="line">最后你把回忆还我 要我好好过</div><div class="line"></div><div class="line">我们最后这么遗憾</div><div class="line"></div><div class="line">我们最后这么无关</div><div class="line"></div><div class="line">时时刻刻每个现在 都在嘲笑我 嘲笑着我</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Mayday </category>
            
        </categories>
        
        
        <tags>
            
            <tag> calm </tag>
            
            <tag> Mayday </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[米老鼠]]></title>
      <url>http://www.wbprime.me/2013/05/16/milaoshu/</url>
      <content type="html"><![CDATA[<p>五月天的歌曲确实写的很有新意。</p><p>不管是纯真、温柔还是倔强，明明是已经写无可写、唱无可唱的主题，明明是已经山穷水尽，竟然真的可以柳暗花明。</p><p>这一首米老鼠，就是阿信创作才情之汪洋奔肆的绝佳体现。</p><p>以为我爱著孤独；以为自己不会迷路；以为自己跟自己，再不用谁照顾；以为我爱著孤独，却又崩溃的无助。</p><p>这样一句词，醍醐灌顶，顿时让我动弹不得。</p><p>曾几何时，年少轻狂；曾几何时，鲜衣怒马。</p><p>冠盖满京华，斯人独憔悴。</p><p>人生天地间，忽如远行客。</p><p>有一天累了，倦了，乏了，跌倒在命运里面，哪里会有，那样一只，米老鼠。</p><p>谁能让我拥抱著，尽情的哭 ？</p><p>谁又会扶着我，说一句，辛苦了！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">米老鼠</div><div class="line"></div><div class="line">词：阿信</div><div class="line"></div><div class="line">曲：怪兽</div><div class="line"></div><div class="line">一身黑皮肤 白手套红短裤</div><div class="line"></div><div class="line">一双大大耳朵 </div><div class="line"></div><div class="line">随时在 向人打招呼</div><div class="line"></div><div class="line">他是我朋友 陪我笑陪我哭</div><div class="line"></div><div class="line">尤其是当我 当我最无助</div><div class="line"></div><div class="line">有他 听著我倾诉</div><div class="line"></div><div class="line">梦中 城堡里面跳舞</div><div class="line"></div><div class="line">醒了 世界依然残酷</div><div class="line"></div><div class="line">以为我爱著孤独</div><div class="line"></div><div class="line">以为自己不会迷路</div><div class="line"></div><div class="line">以为自己跟自己 再不用谁照顾</div><div class="line"></div><div class="line">以为我爱著孤独 却又崩溃的无助</div><div class="line"></div><div class="line">谁能让我拥抱著 尽情的哭</div><div class="line"></div><div class="line">谁是草莓族 你才是榴连族</div><div class="line"></div><div class="line">一身伤 仍顽固 </div><div class="line"></div><div class="line">伤害我 还要我不哭</div><div class="line"></div><div class="line">摩天轮停住 咖啡杯不跳舞</div><div class="line"></div><div class="line">孩子练习著 让悲伤麻木</div><div class="line"></div><div class="line">快乐 也开始麻木</div><div class="line"></div><div class="line">梦中 城堡里面跳舞</div><div class="line"></div><div class="line">醒了 世界依然残酷</div><div class="line"></div><div class="line">以为我爱著孤独</div><div class="line"></div><div class="line">以为自己不会迷路</div><div class="line"></div><div class="line">以为自己跟自己 再不用谁照顾</div><div class="line"></div><div class="line">以为我爱著孤独 却又崩溃的无助</div><div class="line"></div><div class="line">谁能让我拥抱著 尽情的哭</div><div class="line"></div><div class="line">让我唯一的朋友 不是老鼠</div><div class="line"></div><div class="line">让我唯一的朋友 不是老鼠</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Mayday </category>
            
        </categories>
        
        
        <tags>
            
            <tag> calm </tag>
            
            <tag> Mayday </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[仓颉]]></title>
      <url>http://www.wbprime.me/2013/05/16/cangjie/</url>
      <content type="html"><![CDATA[<p>如果世界上不存在语言与文字，我们的相遇，究竟是命运或几率？</p><p>如果世界上不存在语言与文字，我们的曾经，究竟是真实或梦境？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">《淮南子 本经训》：昔者仓颉作书，而天雨粟，鬼夜哭；伯益作井，而龙登玄云，神栖昆仑。能愈多而德愈薄矣。故周鼎著倕，使衔其指，以明大巧之不可为也。</div><div class="line">仓颉造字，开民智，教化了天下百姓。而天下也开始美美恶丑，追逐欲望。</div></pre></td></tr></table></figure><p>故而老子摒弃仁义，专讲道德。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">《道德经》：大道废，有仁义；慧智出，有大伪；六亲不和，有孝慈；国家昏乱，有忠臣。</div><div class="line">《道德经》：绝圣弃智，民利百倍；绝仁弃义，民复孝慈；绝巧弃利，盗贼无有。</div></pre></td></tr></table></figure><p>然而，仓颉造字，创造光同时也创造了暗。然而若非有消极阴冷的暗，光的美好怎会那样吸引人？</p><p>爱。</p><p>有一句话，叫永远。</p><p>有一句话，叫我爱你。</p><p>有一句话，叫至死不渝。</p><p>有一句话，叫执子之手，与子偕老。</p><p>有一句话， 天雨粟，鬼夜哭，思念漫太古。</p><p>有些东西，错过了就不再拥有；有些事情，经历了就难以忘怀。</p><p>如果可以，我愿意为你写诗，用最美丽的文字描绘你的容颜，和我的思念。</p><p>突然好想你，那是想念；听仓颉，是在思念。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">仓颉</div><div class="line"></div><div class="line">词：阿信</div><div class="line"></div><div class="line">曲：石头</div><div class="line"></div><div class="line">一颗葡萄有多甜美</div><div class="line"></div><div class="line">用尽了所有的图腾和语言描写</div><div class="line"></div><div class="line">想一个人有多想念</div><div class="line"></div><div class="line">那又是文字失效瞬间</div><div class="line"></div><div class="line">结一个纪念的绳结</div><div class="line"></div><div class="line">记录你离去后万语和千言瓦解</div><div class="line"></div><div class="line">升起了慌张的狼烟</div><div class="line"></div><div class="line">我遗落在最孤独史前的荒野</div><div class="line"></div><div class="line">多遥远 多纠结 多想念 多无法描写</div><div class="line"></div><div class="line">疼痛和疯癫 你都看不见</div><div class="line"></div><div class="line">想穿越 想飞天 想变成 造字的仓颉</div><div class="line"></div><div class="line">写出能让你 快回来的诗篇</div><div class="line"></div><div class="line">一只蝴蝶有多鲜艳</div><div class="line"></div><div class="line">能不能飞越过猜忌和冷漠世界</div><div class="line"></div><div class="line">给你的简讯和留言</div><div class="line"></div><div class="line">说不清万分之一追悔</div><div class="line"></div><div class="line">当星宿都沉没山岳</div><div class="line"></div><div class="line">只盼你会抬头看我寄托的弯月</div><div class="line"></div><div class="line">当一个文明即将熄灭</div><div class="line"></div><div class="line">有什么证明你我存在的岁月</div><div class="line"></div><div class="line">多遥远 多纠结 多想念 多无法描写</div><div class="line"></div><div class="line">疼痛和疯癫 你都看不见</div><div class="line"></div><div class="line">想穿越 想飞天 想变成 造字的仓颉</div><div class="line"></div><div class="line">创造能让你 想起我的字眼</div><div class="line"></div><div class="line">多遥远 多纠结 多想念 多无法描写</div><div class="line"></div><div class="line">疼痛和疯癫 你都看不见</div><div class="line"></div><div class="line">想穿越 想飞天 想变成 造字的仓颉</div><div class="line"></div><div class="line">写出能让你 快回来的诗</div><div class="line"></div><div class="line">需要你 需要你 需要你 想逆转时间</div><div class="line"></div><div class="line">回到最开始 有你的世界</div><div class="line"></div><div class="line">想穿越 想飞天 想变成 造字的仓颉</div><div class="line"></div><div class="line">写出让宇宙 能重来的诗篇</div><div class="line"></div><div class="line">天雨粟 鬼夜哭 思念漫太古</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Mayday </category>
            
        </categories>
        
        
        <tags>
            
            <tag> calm </tag>
            
            <tag> Mayday </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[后青春期的诗]]></title>
      <url>http://www.wbprime.me/2013/05/16/houqingchunqi-de-shi/</url>
      <content type="html"><![CDATA[<p>青春之後，认输之前，我在哪里？</p><p>没有假若，没有如果，只有命中注定。</p><p>命中注定我们会在肆无忌惮的懵懂和天真之后，步入成年人的世界。</p><p>既然已经无法避免，那么就坦然接受。</p><p>如果未来是激情四射的阳光，那么就去尽情地享受；</p><p>如果未来是雾霭茫茫的寂寥，那么就去释放出自己的光和热。</p><p>谁说不能让我此生唯一自传，如同诗一般？</p><p>青春之后，认输之前，我依然用力的活著。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">后青春期的诗</div><div class="line"></div><div class="line">词：阿信</div><div class="line"></div><div class="line">曲：阿信</div><div class="line"></div><div class="line">当烟雾随晨光飘散 </div><div class="line"></div><div class="line">枕畔的湖已风乾 </div><div class="line"></div><div class="line">期待已退化成等待 </div><div class="line"></div><div class="line">而我告别了突然 </div><div class="line"></div><div class="line">当泪痕勾勒成遗憾 </div><div class="line"></div><div class="line">回忆夸饰著伤感 </div><div class="line"></div><div class="line">逝水比喻时光荏苒 </div><div class="line"></div><div class="line">终于我们不再为了生命狂欢 </div><div class="line"></div><div class="line">为爱情狂乱</div><div class="line"></div><div class="line">然而青春彼岸 </div><div class="line"></div><div class="line">盛夏正要一天一天一天的灿烂</div><div class="line"></div><div class="line">谁说不能让我此生唯一自传 </div><div class="line"></div><div class="line">如同诗一般 </div><div class="line"></div><div class="line">无论多远未来 </div><div class="line"></div><div class="line">读来依然一字一句一篇都灿烂 </div><div class="line"></div><div class="line">让天空解释著蔚蓝 </div><div class="line"></div><div class="line">浮云定义着洁白 </div><div class="line"></div><div class="line">落花铺成一片红色地毯 </div><div class="line"></div><div class="line">迎接我们到未来 </div><div class="line"></div><div class="line">精彩未完的未来</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Mayday </category>
            
        </categories>
        
        
        <tags>
            
            <tag> calm </tag>
            
            <tag> Mayday </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小时候]]></title>
      <url>http://www.wbprime.me/2013/05/16/xiaoshihou/</url>
      <content type="html"><![CDATA[<p>时间是一把无情的刻刀，将最纯真磨灭，将最梦想销毁，将曾经的小时候变成现在的长大后。</p><p>那时候，棒棒糖还是甜的。</p><p>那时候，星空还是明亮的。</p><p>那时候，唐僧心还是好的，悟空还是降妖伏怪的，猪八还是懒懒的，沙僧还是忠厚老实的。</p><p>那时候，女孩子还是要穿衣服的。</p><p>那时候，男孩子结婚是过家家的。</p><p>长大了，经历了，也成熟了。</p><p>毛毛虫从厚厚的茧中爬出来的时候，蜕变成了美艳的蝴蝶。</p><p>成长了也就蜕变了。</p><p>收获了一身的万众瞩目和丰功伟业。</p><p>留下了遍体的伤痕累累与疲惫重重。</p><p>失去了的呢？</p><p>怀念小时候，其实是对于现实产生了迷惘和怀疑。</p><p>我究竟得到了什么？</p><p>我究竟失去了什么？</p><p>当你的心已累，以为失去了一切，其实等在前面还有一整个世界；</p><p>当你的爱已碎，以为纯真会幻灭，其实等在前面还有一整个新的视野，新的起点。</p><p>谢谢张雨生，谢谢五月天。</p><p>我终于知道了，展翅高飞那是雄鹰的宿命，也是雄鹰独一无二的骄傲。</p><p>飞起来，像海燕一样，向风暴最猛烈的地方飞去吧！</p><p>历经风雨不褪色，这才是我的本色。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">小时候</div><div class="line"></div><div class="line">词：张雨生</div><div class="line"></div><div class="line">曲：阿信</div><div class="line"></div><div class="line">小时候 我一直有个梦 </div><div class="line"></div><div class="line">有一天 我要飞上外太空</div><div class="line"></div><div class="line">就像夏夜繁星闪烁 </div><div class="line"></div><div class="line">幻想我能穿梭其中 </div><div class="line"></div><div class="line">你有没有过 </div><div class="line"></div><div class="line">你有没有过</div><div class="line"></div><div class="line">小时候 渴望硕壮的成熟</div><div class="line"></div><div class="line">长大后 我有雪亮的天空</div><div class="line"></div><div class="line">风雨却让世界不同</div><div class="line"></div><div class="line">面对遍体鳞伤的痛</div><div class="line"></div><div class="line">你有没有放弃梦想的冲动</div><div class="line"></div><div class="line">当你的心已累 以为失去了一切</div><div class="line"></div><div class="line">其实等在前面 还有一整个世界</div><div class="line"></div><div class="line">当你的爱已碎 以为纯真会幻灭</div><div class="line"></div><div class="line">其实等在前面 还有一整个新的视野</div><div class="line"></div><div class="line">新的起点</div><div class="line"></div><div class="line">小时候 我一直有个梦</div><div class="line"></div><div class="line">有一天 我要飞上外太空</div><div class="line"></div><div class="line">即使越来越淡的星座</div><div class="line"></div><div class="line">越来越远的神话传说</div><div class="line"></div><div class="line">我不会忘记在夏夜里的时空遨游</div><div class="line"></div><div class="line">当你的心已累 以为失去了一切</div><div class="line"></div><div class="line">其实等在前面 还有一整个世界</div><div class="line"></div><div class="line">当你的爱已碎 以为纯真会幻灭</div><div class="line"></div><div class="line">其实等在前面 还有一整个新的视野</div><div class="line"></div><div class="line">新的起点</div><div class="line"></div><div class="line">当你的心已累 以为失去了一切</div><div class="line"></div><div class="line">其实等在前面 还有一整个世界</div><div class="line"></div><div class="line">当你的爱已碎 以为纯真会幻灭</div><div class="line"></div><div class="line">其实等在前面 还有一整个新的视野</div><div class="line"></div><div class="line">新的起点</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Mayday </category>
            
        </categories>
        
        
        <tags>
            
            <tag> calm </tag>
            
            <tag> Mayday </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2012]]></title>
      <url>http://www.wbprime.me/2013/05/16/2012/</url>
      <content type="html"><![CDATA[<p>这首歌词，大爱啊！</p><p>总是在失去之后才会珍惜拥有。</p><p>总是在绝望里面坚持追寻希望。</p><p>五月天，亲手为我们描绘了末日的景象。</p><p>毁灭，还不够毁灭；绝望，还不够绝望。</p><p>落叶剂制造落叶的秋；辐射尘覆盖清晨的冬。</p><p>摘一颗星星，要盖高楼；爱一种自由，燃尽石油；追一种富有，却要挥霍。</p><p>寄生地表的虫，我们啊，是先坠落，或先坠入自甘堕落？</p><p>今天，珍重，谁知道是真是梦？</p><p>我们啊，将变星尘，永远飘在黑暗宇宙。</p><p>明天过后，是解答或解脱？</p><p>如果你在幸存的平行宇宙，请记得这首歌预言过。</p><p>要怎么做，要怎么活，请你对自己说 ！</p><p>PS：看了诺亚方舟和第二人生的MV，对2012的MV报了太大期待，结果很失望。想想也是，诺亚方舟是要给人以希望，所以MV恢弘大气；第二人生是劝人奋进，所以MV细腻动人；2012的歌词太过绝望，只能配以Mayday的现场，期许稍解人们的不安和恐惧吧！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line">2012</div><div class="line"></div><div class="line">词：阿信</div><div class="line"></div><div class="line">曲：阿信</div><div class="line"></div><div class="line">再没有时间 能去延后</div><div class="line"></div><div class="line">再没有后路 能去逃脱</div><div class="line"></div><div class="line">再没有备案 没有逃生线索</div><div class="line"></div><div class="line">再没蓝色天空</div><div class="line"></div><div class="line">我突然想到 小的时候</div><div class="line"></div><div class="line">总等着长大 去追的梦</div><div class="line"></div><div class="line">就这么活着 突然西元尽头</div><div class="line"></div><div class="line">却没有一件 真的去做</div><div class="line"></div><div class="line">再看 最后一眼 青春的星空</div><div class="line"></div><div class="line">灿烂 火光就像 盛夏的烟火</div><div class="line"></div><div class="line">欢送 挣扎万年 文明的巅峰</div><div class="line"></div><div class="line">我们啊 将变星尘 永远飘在黑暗宇宙</div><div class="line"></div><div class="line">今天 珍重 谁知道是真是梦</div><div class="line"></div><div class="line">明天 过后 是解答或解脱</div><div class="line"></div><div class="line">摘一颗星星 要盖高楼</div><div class="line"></div><div class="line">爱一种自由 燃尽石油</div><div class="line"></div><div class="line">追一种富有 却要挥霍</div><div class="line"></div><div class="line">寄生地表的虫</div><div class="line"></div><div class="line">落叶剂制造 落叶的秋</div><div class="line"></div><div class="line">辐射尘覆盖 清晨的冬</div><div class="line"></div><div class="line">地球还残喘 人就创作末日</div><div class="line"></div><div class="line">又何必等到 上帝没收</div><div class="line"></div><div class="line">谁把 愉快的愉 换 偷窃的偷</div><div class="line"></div><div class="line">难道 自找的找 是 自我的我</div><div class="line"></div><div class="line">终于 未来的未 变 末日的末</div><div class="line"></div><div class="line">我们啊 是先坠落 或先坠入自甘堕落</div><div class="line"></div><div class="line">今天 珍重 谁知道是真是梦</div><div class="line"></div><div class="line">明天 过后 解答或解脱</div><div class="line"></div><div class="line">如果 你在 幸存的平行宇宙</div><div class="line"></div><div class="line">请记得我 曾这么预言过</div><div class="line"></div><div class="line">这首歌预言过</div><div class="line"></div><div class="line">听着 无人电台 最终的播送</div><div class="line"></div><div class="line">那些 爱过的歌 像浩瀚乡愁</div><div class="line"></div><div class="line">花朵长出云朵 弹头落在街头</div><div class="line"></div><div class="line">我们啊 停不下来 以为闯关 却在闯祸</div><div class="line"></div><div class="line">今天 珍重 谁知道是真是梦</div><div class="line"></div><div class="line">明天 过后 解答或解脱</div><div class="line"></div><div class="line">如果 你在 幸存的平行宇宙</div><div class="line"></div><div class="line">要怎么做 要怎么活 请你对自己说</div><div class="line"></div><div class="line">诚实对自己说</div><div class="line"></div><div class="line">快对自己说</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Mayday </category>
            
        </categories>
        
        
        <tags>
            
            <tag> calm </tag>
            
            <tag> Mayday </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[星空]]></title>
      <url>http://www.wbprime.me/2013/05/16/xingkong/</url>
      <content type="html"><![CDATA[<p>我问你，摸不到的颜色是否叫彩虹？</p><p>我问你，看不到的拥抱是否叫作微风？</p><p>每一个生灵都是天上的星宿，究竟星星还发不发光？</p><p>此时此刻，星空一片灰蒙蒙。</p><p>如果，给我一杆杠杆，我就能撬动地球。</p><p>结果，我只剩下半斤纯真和一两高尚。</p><p>曾经的初衷太也天真。</p><p>现实的苦衷太也无奈。</p><p>原来所有所得所获，不如一夜的星空。</p><p>不如，那一年我们一起望着的星空。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">星空</div><div class="line"></div><div class="line">词：阿信</div><div class="line"></div><div class="line">曲：石头</div><div class="line"></div><div class="line">摸不到的颜色 是否叫彩虹</div><div class="line"></div><div class="line">看不到的拥抱 是否叫做微风</div><div class="line"></div><div class="line">一个人 想着一个人 是否就叫寂寞</div><div class="line"></div><div class="line">命运偷走如果 只留下结果</div><div class="line"></div><div class="line">时间偷走初衷 只留下了苦衷</div><div class="line"></div><div class="line">你来过 然后你走后 只留下星空</div><div class="line"></div><div class="line">那一年 我们望着星空 有那么多的 灿烂的梦</div><div class="line"></div><div class="line">以为快乐会永久 像不变星空 陪着我</div><div class="line"></div><div class="line">猎户 天狼 织女 光年外沉默</div><div class="line"></div><div class="line">回忆 青春 梦想 何时偷偷陨落</div><div class="line"></div><div class="line">我爱过 然后我沈默 人海里漂流</div><div class="line"></div><div class="line">那一年 我们望着星空 </div><div class="line"></div><div class="line">未来的未来 从没想过</div><div class="line"></div><div class="line">当故事失去美梦 美梦失去线索 </div><div class="line"></div><div class="line">而我们失去联络</div><div class="line"></div><div class="line">这一片 无言无语星空 </div><div class="line"></div><div class="line">为什么静静 看我泪流</div><div class="line"></div><div class="line">如果你在 的时候 </div><div class="line"></div><div class="line">会不会伸手 拥抱我</div><div class="line"></div><div class="line">细数繁星闪烁 细数此生奔波</div><div class="line"></div><div class="line">原来 所有 所得 所获 不如一夜的星空</div><div class="line"></div><div class="line">空气中的温柔 回忆你的笑容</div><div class="line"></div><div class="line">彷彿只要伸手 就能触摸</div><div class="line"></div><div class="line">摸不到的颜色 是否叫彩虹</div><div class="line"></div><div class="line">看不到的拥抱 是否叫做微风</div><div class="line"></div><div class="line">一个人 习惯一个人</div><div class="line"></div><div class="line">这一刻 独自望着星空 从前的从前 从没变过</div><div class="line"></div><div class="line">寂寞可以是忍受 也可以是享受 </div><div class="line"></div><div class="line">享受仅有的拥有</div><div class="line"></div><div class="line">那一年我们望着星空 有那么多的 灿烂的梦</div><div class="line"></div><div class="line">至少回忆会永久 像不变星空 陪着我</div><div class="line"></div><div class="line">最后只剩下星空 像不变回忆 陪着我</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Mayday </category>
            
        </categories>
        
        
        <tags>
            
            <tag> calm </tag>
            
            <tag> Mayday </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[纯真]]></title>
      <url>http://www.wbprime.me/2013/05/16/chunzhen/</url>
      <content type="html"><![CDATA[<p>首先，这是一首情歌。</p><p>然后，这一首让人绝望的情歌。</p><p>今晚的天空有一颗流星划过，在预言着什麽？</p><p>依稀记得梁静茹演唱这首歌的时候，玛莎为她弹钢琴伴奏。</p><p>静茹脸上的淡淡的笑，真的很让人心动。</p><p>在无声之中你拉起了我的手。</p><p>我怎么感觉整个黑夜在震动。</p><p>耳朵里我听到了心跳的节奏。</p><p>星星在闪烁，你会怎么说？</p><p>阿信说，我们在夜晚偷偷地听自己心脏的跳动，应该不忍心将这个纯洁的心弄脏才是。是啊，这样的美好，就算在梦里，也会满足到偷笑的。然而。</p><p>你已经有他就不应该再有我，世界的纯真此刻为你有迷惑。</p><p>我想我应该轻轻放开你的手，我却没有力气这么做。</p><p>我却没有力气这么做。</p><p>没有力气，这么做。</p><p>玛莎写的，到今天才知道，放手比握手更需要力气和勇气。</p><p>其实，你当时还是不知道。</p><p>想想玛莎和静茹当初的默契，再看看此刻的境遇。</p><p>一言成谶。</p><p>想不明白，为什么那时候静茹要唱这首歌？</p><p>又为什么，玛莎写下了那一句话？</p><p>玛莎，静茹。</p><p>纯真，五月天。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">纯真</div><div class="line"></div><div class="line">词：阿信</div><div class="line"></div><div class="line">曲：阿信</div><div class="line"></div><div class="line">长长的路上 我想我们是朋友</div><div class="line"></div><div class="line">如果有期待 我想最好是不说 </div><div class="line"></div><div class="line">你总是微笑的你 总是不开口</div><div class="line"></div><div class="line">世界被你 掌握 </div><div class="line"></div><div class="line">月亮绕地球 地球绕着太阳走</div><div class="line"></div><div class="line">我以为世界 是座宁静的宇宙 </div><div class="line"></div><div class="line">今晚的天空 有一颗流星划过</div><div class="line"></div><div class="line">在预言着 什么</div><div class="line"></div><div class="line">在无声之中 你拉起了我的手</div><div class="line"></div><div class="line">我怎么感觉 整个黑夜在震动</div><div class="line"></div><div class="line">耳朵里我听到了 心跳的节奏</div><div class="line"></div><div class="line">星星在闪烁 你怎么说</div><div class="line"></div><div class="line">你心中一定 有座浓雾的湖泊</div><div class="line"></div><div class="line">任凭月光再 皎洁照也照不透</div><div class="line"></div><div class="line">你眼中闪烁湖面 无边的温柔</div><div class="line"></div><div class="line">那波光在 诱惑 </div><div class="line"></div><div class="line">在无声之中 你拉起了我的手</div><div class="line"></div><div class="line">我怎么感觉 整个黑夜在震动</div><div class="line"></div><div class="line">耳朵里我听到了 心跳的节奏</div><div class="line"></div><div class="line">星星在闪烁 你会怎么说</div><div class="line"></div><div class="line">在无声之中 你拉起了我的手</div><div class="line"></div><div class="line">我怎么感觉 整个黑夜在震动</div><div class="line"></div><div class="line">耳朵里我听到了 心跳的节奏</div><div class="line"></div><div class="line">星星在闪烁 你会怎么说</div><div class="line"></div><div class="line">你已经有他 就不应该再有我</div><div class="line"></div><div class="line">世界的纯真 此刻为你有迷惑</div><div class="line"></div><div class="line">我想我应该轻轻 放开你的手</div><div class="line"></div><div class="line">我却没有力气 这么做</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Mayday </category>
            
        </categories>
        
        
        <tags>
            
            <tag> calm </tag>
            
            <tag> Mayday </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[时光机]]></title>
      <url>http://www.wbprime.me/2013/05/16/shiguangji/</url>
      <content type="html"><![CDATA[<p>其实，这应该不是一首情歌。</p><p>放肆张扬的岁月，狂放不羁的风光，都已经一去不返了。</p><p>青春就是挽不回的水，用力地浪费，再用力地后悔。</p><p>浪费，再后悔，之后继续浪费。</p><p>这就是人生！</p><p>想念那如朝阳般灿烂的笑容，想念那如永恒似的深邃星空。</p><p>如果可以，我多么愿意跟你交换，用我的黑西装和白领带，换你的时光机，哆啦A梦。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">时光机</div><div class="line"></div><div class="line">词：阿信</div><div class="line"></div><div class="line">曲：阿信</div><div class="line"></div><div class="line">那阳光 碎裂在熟悉场景 好安静</div><div class="line"></div><div class="line">一个人 能背多少的往事 真不轻</div><div class="line"></div><div class="line">谁的笑 谁的温暖的手心 我着迷</div><div class="line"></div><div class="line">伤痕好像都变成 了曾经</div><div class="line"></div><div class="line">全剧终 看见满场空座椅 灯亮起</div><div class="line"></div><div class="line">这故事 好像真实又像虚幻的情境</div><div class="line"></div><div class="line">只是那 好不容易被说服 的自己</div><div class="line"></div><div class="line">借口又顶不住懊恼的侵袭</div><div class="line"></div><div class="line">好后悔 好伤心 想重来 行不行</div><div class="line"></div><div class="line">再一次 我就不会走向这样的结局</div><div class="line"></div><div class="line">好后悔 好伤心 谁把我 放回去</div><div class="line"></div><div class="line">我愿意 付出所有来换一个时光机</div><div class="line"></div><div class="line">对不起 独自回荡在空气 没人听</div><div class="line"></div><div class="line">最后又是孤单 到天明</div><div class="line"></div><div class="line">真的痛 总是来的很轻盈 没声音</div><div class="line"></div><div class="line">从背后 慢慢缓缓抱著我 就像你</div><div class="line"></div><div class="line">你和我 还有很多的地方 还没去</div><div class="line"></div><div class="line">为何留我荒唐地坐在这里</div><div class="line"></div><div class="line">好后悔 好伤心 想重来 行不行</div><div class="line"></div><div class="line">再一次 我就不会走向这样的结局</div><div class="line"></div><div class="line">好后悔 好伤心 谁把我 放回去</div><div class="line"></div><div class="line">我愿意 付出所有来换一个时光机</div><div class="line"></div><div class="line">对不起 独自回荡在空气 没人听</div><div class="line"></div><div class="line">最后又是孤单 到天明</div><div class="line"></div><div class="line">最后又是孤单 到天明</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Mayday </category>
            
        </categories>
        
        
        <tags>
            
            <tag> calm </tag>
            
            <tag> Mayday </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我心中尚未崩坏的地方]]></title>
      <url>http://www.wbprime.me/2013/05/16/woxinzhong-shangwei-benghuai-de-difang/</url>
      <content type="html"><![CDATA[<p>倔强之后，寻找心中尚未崩坏的地方。</p><p>离开小时候的纯真，挥别米老鼠的拥抱，终于开始了后青春期的诗。</p><p>忘不了小时候的梦，忘不了幻想穿梭外太空的翱翔。</p><p>忘不了米老鼠的孤独，忘不了以为自己跟自己，再不用人照顾的麻木。</p><p>人拒绝不了长大，真的好可惜！</p><p>五月天大声呐喊，我心中不肯腐烂的土壤，孩子一样！</p><p>伟大和伪装，灰尘或辉煌，那是一线之隔，或是一线曙光 ？</p><p>每个孤单天亮，我都一个人唱。超爱这一句，写的很决绝。</p><p>无关爱情，追逐理想，这才是我无暇的纯真，和骄傲的倔强！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">我心中尚未崩坏的地方</div><div class="line"></div><div class="line">词：阿信</div><div class="line"></div><div class="line">曲：怪兽</div><div class="line"></div><div class="line">醒在陌生的地方 镜头变成了刀枪 耳语也变成了真相 </div><div class="line"></div><div class="line">吉他告别了肩膀 诗人弃守了边疆 我们活在巨大片厂</div><div class="line"></div><div class="line">幸运的孩子 爬上了殿堂 成果代价都要品尝 </div><div class="line"></div><div class="line">单纯的孩子 是否变了样 跟着游戏规则 学着成长</div><div class="line"></div><div class="line">轰轰烈烈的排行 沸沸扬扬的颁奖 跟着节奏我常迷惘 </div><div class="line"></div><div class="line">当人心变成市场 当市场变成战场 战场埋葬多少理想</div><div class="line"></div><div class="line">回想着理想 稀薄的希望 走着钢索我的刚强 </div><div class="line"></div><div class="line">伟大和伪装 灰尘或辉煌 那是一线之隔 或是一线曙光</div><div class="line"></div><div class="line">每个孤单天亮 我都一个人唱 </div><div class="line"></div><div class="line">默默的让这旋律 和我心交响</div><div class="line"></div><div class="line">就算会有一天 没人与我合唱 </div><div class="line"></div><div class="line">至少在我的心中 还有个尚未崩坏的地方</div><div class="line"></div><div class="line">歌手追逐销售量 记者追逐点击量 没有谁比谁更善良 </div><div class="line"></div><div class="line">无论天后或天王 无论小兵或老将 曲终人散都要苍凉</div><div class="line"></div><div class="line">期待着彩虹 所以开了窗 窗外只有灼热闪光 </div><div class="line"></div><div class="line">所谓的彩虹 不过就是光 只要心还透明 就能折射希望</div><div class="line"></div><div class="line">每个孤单天亮 我都一个人唱 </div><div class="line"></div><div class="line">默默的让这旋律 和我心交响</div><div class="line"></div><div class="line">就算会有一天 没人与我合唱 </div><div class="line"></div><div class="line">至少在我的心中 还有个尚未崩坏的地方</div><div class="line"></div><div class="line">其实我们都一模一样 无名却充满了莫名渴望 </div><div class="line"></div><div class="line">一生等一次 发光</div><div class="line"></div><div class="line">宁愿重伤也不愿悲伤 让伤痕变成了我的徽章 </div><div class="line"></div><div class="line">刺在我心脏 永远不忘</div><div class="line"></div><div class="line">默默的让这旋律 和我心交响 </div><div class="line"></div><div class="line">至少在我的心中 自己为自己鼓掌</div><div class="line"></div><div class="line">每个孤单天亮 我都一个人唱 </div><div class="line"></div><div class="line">默默的让这旋律 和我心交响</div><div class="line"></div><div class="line">就算会有一天 没人与我合唱 </div><div class="line"></div><div class="line">至少在我的心中 还有个尚未崩坏的地方 </div><div class="line"></div><div class="line">孩子一样 不肯腐烂的土壤</div><div class="line"></div><div class="line">再唱 再唱 再唱 再唱 再唱</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Mayday </category>
            
        </categories>
        
        
        <tags>
            
            <tag> calm </tag>
            
            <tag> Mayday </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[突然好想你]]></title>
      <url>http://www.wbprime.me/2013/05/16/turan-hao-xiangni/</url>
      <content type="html"><![CDATA[<p>温柔、倔强、突然好想你。</p><p>这是五月天最值得听的三首歌，我认为。</p><p>温柔在于放弃，倔强在于坚持，而突然好想你，在于坚持或者放弃之后的淡淡惘然。</p><p>放弃了会后悔，坚持下来同样也会后悔的。</p><p>若干年后，我会怎么样？</p><p>此情可待成追忆，只是当时已惘然。</p><p>陈阿信说过一句，为了那些不能放弃的，我们究竟放弃了什么啊？</p><p>还有，为了那些想要放弃的，我们究竟放弃了什么啊？</p><p>也许没有什么，也不会有什么。</p><p>只是有点，突然好想你。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">突然好想你</div><div class="line"></div><div class="line">词：阿信</div><div class="line"></div><div class="line">曲：阿信</div><div class="line"></div><div class="line">最怕 空气突然安静</div><div class="line"></div><div class="line">最怕 朋友突然的关心</div><div class="line"></div><div class="line">最怕 回忆 突然翻滚绞痛着 不平息</div><div class="line"></div><div class="line">最怕 突然 听到你的消息</div><div class="line"></div><div class="line">想念 如果会有声音</div><div class="line"></div><div class="line">不愿 那是悲伤的哭泣</div><div class="line"></div><div class="line">事到如今 终于让自己属于我自己</div><div class="line"></div><div class="line">只剩眼泪 还骗不过自己</div><div class="line"></div><div class="line">突然好想你 你会在哪里</div><div class="line"></div><div class="line">过的快乐或委屈</div><div class="line"></div><div class="line">突然好想你</div><div class="line"></div><div class="line">突然锋利的回忆</div><div class="line"></div><div class="line">突然模糊的眼睛</div><div class="line"></div><div class="line">我们 像一首最美丽的歌曲</div><div class="line"></div><div class="line">变成两部悲伤的电影</div><div class="line"></div><div class="line">为什么你 带我走过 最难忘的旅行</div><div class="line"></div><div class="line">然后留下 最痛的纪念品</div><div class="line"></div><div class="line">我们 那么甜 那么美 那么相信</div><div class="line"></div><div class="line">那么疯 那么热烈的曾经</div><div class="line"></div><div class="line">为何我们 还是要奔向</div><div class="line"></div><div class="line">各自的幸福和遗憾中老去</div><div class="line"></div><div class="line">突然好想你 你会在哪里</div><div class="line"></div><div class="line">过的快乐或委屈</div><div class="line"></div><div class="line">突然好想你</div><div class="line"></div><div class="line">突然锋利的回忆</div><div class="line"></div><div class="line">突然模糊的眼睛</div><div class="line"></div><div class="line">最怕空气突然安静</div><div class="line"></div><div class="line">最怕朋友突然的关心</div><div class="line"></div><div class="line">最怕回忆 突然翻滚绞痛着 不平息</div><div class="line"></div><div class="line">最怕 突然 听到你的消息</div><div class="line"></div><div class="line">最怕此生 已经决心自己过 没有你 </div><div class="line"></div><div class="line">却又突然 听到你的消息</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Mayday </category>
            
        </categories>
        
        
        <tags>
            
            <tag> calm </tag>
            
            <tag> Mayday </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[诺亚方舟]]></title>
      <url>http://www.wbprime.me/2013/05/16/nuoya-fangzhou/</url>
      <content type="html"><![CDATA[<p>原来幻想中的这天，会比幻想更唯美 。</p><p>如果要告别，如果今夜就要和一切告别，如果你只能打一通电话，你会拨给谁？</p><p>诺亚方舟里面，是否会有一个人为我占座呢</p><p>或者，有没有那么一个人，让我冲动到去为她占座？</p><p>世界末日，诺亚方舟。</p><p>上帝对诺亚说，你把你的妻子、儿子、儿媳都带上方舟，地上的飞禽、走兽各带一雌一雄上方舟。</p><p>原来如此，原来如彼！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">诺亚方舟</div><div class="line"></div><div class="line">词：阿信 </div><div class="line">曲：玛莎</div><div class="line"></div><div class="line">再见 草莓甜甜圈 </div><div class="line"></div><div class="line">街角咖啡店 落下雨点</div><div class="line"></div><div class="line">再见 黑白老照片</div><div class="line"></div><div class="line">回忆电影院 埋进地面 </div><div class="line"></div><div class="line">再见 我们初识的那个公园</div><div class="line"></div><div class="line">那天是谁先吻了谁 被谁遗忘的秋千 </div><div class="line"></div><div class="line">再见 那麼多名车名表名鞋 </div><div class="line"></div><div class="line">最後我们只能带走 名为回忆的花园 </div><div class="line"></div><div class="line">如果要告别 如果今夜就要和一切告别 </div><div class="line"></div><div class="line">如果你只能打一通电话 你会拨给谁 </div><div class="line"></div><div class="line">晚安 鹦鹉和孔雀 </div><div class="line"></div><div class="line">花豹和人类 望著海面 </div><div class="line"></div><div class="line">晚安 底片和唱片 </div><div class="line"></div><div class="line">沉浮在浪间 就像诗篇 </div><div class="line"></div><div class="line">晚安 自由女神漂到华尔街 </div><div class="line"></div><div class="line">我们在甲板上摸到 杜拜塔顶的塔尖 </div><div class="line"></div><div class="line">晚安 海豚跃出西藏的屋檐 </div><div class="line"></div><div class="line">原来幻想中的这天 会比幻想更唯美 </div><div class="line"></div><div class="line">还是要告别 还是放弃海拔以下的世界 </div><div class="line"></div><div class="line">你会装进什麼回忆纪念 在行李里面 </div><div class="line"></div><div class="line">终於要告别 终於没有更多的明天要追 </div><div class="line"></div><div class="line">你有什麼遗憾依然残缺 还没有完美 </div><div class="line"></div><div class="line">当彗星燃烧天边 陨石像雨点 </div><div class="line"></div><div class="line">当辐射比阳光还要炽烈 </div><div class="line"></div><div class="line">当爱变得浓烈 </div><div class="line"></div><div class="line">当每段命运更加壮烈 </div><div class="line"></div><div class="line">当永远变成一种遥远 </div><div class="line"></div><div class="line">当句点变成一种观点 </div><div class="line"></div><div class="line">当人类终於变成同类 </div><div class="line"></div><div class="line">勇敢的告别 勇敢的向过去和未来告别 </div><div class="line"></div><div class="line">告别每段血缘身分地位 聪明或愚昧 </div><div class="line"></div><div class="line">最後的告别 </div><div class="line"></div><div class="line">最後一个心愿是学会高飞 </div><div class="line"></div><div class="line">飞在不存在的高山草原 星空和蓝天 </div><div class="line"></div><div class="line">让诺亚方舟航向了 海平线 </div><div class="line"></div><div class="line">让诺亚方舟航向了 换日线 </div><div class="line"></div><div class="line">让诺亚方舟航向了 天际线 </div><div class="line"></div><div class="line">让诺亚方舟航向了 无限</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Mayday </category>
            
        </categories>
        
        
        <tags>
            
            <tag> calm </tag>
            
            <tag> Mayday </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>

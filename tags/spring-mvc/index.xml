<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring Mvc on wbprime</title>
    <link>http://www.wbprime.me/tags/spring-mvc/</link>
    <description>Recent content in Spring Mvc on wbprime</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 09 Apr 2016 23:09:10 +0000</lastBuildDate>
    
	<atom:link href="http://www.wbprime.me/tags/spring-mvc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring MVC Integration Testing - JsonPath</title>
      <link>http://www.wbprime.me/posts/2016-04-09-spring-mvc-testing-integration-testing-jsonpath/</link>
      <pubDate>Sat, 09 Apr 2016 23:09:10 +0000</pubDate>
      
      <guid>http://www.wbprime.me/posts/2016-04-09-spring-mvc-testing-integration-testing-jsonpath/</guid>
      <description>本文是Spring MVC Testing集成测试系列的第1篇，原文链接：Integration Testing of Spring MVC Applications: Write Clean Assertions with JsonPath。</description>
    </item>
    
    <item>
      <title>Spring MVC Integration Testing - Security</title>
      <link>http://www.wbprime.me/posts/2016-04-09-spring-mvc-testing-integration-testing-security/</link>
      <pubDate>Sat, 09 Apr 2016 23:08:58 +0000</pubDate>
      
      <guid>http://www.wbprime.me/posts/2016-04-09-spring-mvc-testing-integration-testing-security/</guid>
      <description>本文是Spring MVC Testing集成测试系列的第1篇，原文链接：Integration Testing of Spring MVC Applications: Security。</description>
    </item>
    
    <item>
      <title>Spring MVC Integration Testing - REST API</title>
      <link>http://www.wbprime.me/posts/2016-04-09-spring-mvc-testing-integration-testing-rest-api/</link>
      <pubDate>Sat, 09 Apr 2016 23:08:39 +0000</pubDate>
      
      <guid>http://www.wbprime.me/posts/2016-04-09-spring-mvc-testing-integration-testing-rest-api/</guid>
      <description>本文是 Spring MVC Testing 集成测试系列的第4篇，原文链接：Integration Testing of Spring MVC Applications: REST API, Part One 和 Integration Testing of Spring MVC Applications: REST API, Part Two。
本文主要介绍如何为基于Spring MVC的REST-full的web应用程序添加集成测试。REST服务通过HTTP标准方法的语义（GET/POST/PUT/DELETE等）来隐喻常见的增删改查（CRUD）操作。
本文主要演示如何一步一步地为REST-full API服务添加集成测试用例，包括：
 获取Todo项列表接口的集成测试 获取单个Todo项接口的集成测试 删除单个Todo项接口的集成测试 添加新Todo项接口的集成测试 更新Todo项接口的集成测试  示例web应用结构 Domain 层 Domain层有一个Todo的实体类，代码如下：
import org.hibernate.annotations.Type; import org.joda.time.DateTime; import javax.persistence.*; @Entity @Table(name=&amp;quot;todos&amp;quot;) public class Todo { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; @Column(name = &amp;quot;creation_time&amp;quot;, nullable = false) @Type(type=&amp;quot;org.jadira.usertype.dateandtime.joda.PersistentDateTime&amp;quot;) private DateTime creationTime; @Column(name = &amp;quot;description&amp;quot;, nullable = true, length = 500) private String description; @Column(name = &amp;quot;modification_time&amp;quot;, nullable = false) @Type(type=&amp;quot;org.</description>
    </item>
    
    <item>
      <title>Spring MVC Integration Testing - Forms</title>
      <link>http://www.wbprime.me/posts/2016-04-09-spring-mvc-testing-integration-testing-forms/</link>
      <pubDate>Sat, 09 Apr 2016 23:08:24 +0000</pubDate>
      
      <guid>http://www.wbprime.me/posts/2016-04-09-spring-mvc-testing-integration-testing-forms/</guid>
      <description>本文是 Spring MVC Testing 集成测试系列的第3篇，原文链接：Integration Testing of Spring MVC Applications: Forms。
本文主要介绍为处理Form表单请求的接口编写集成测试用例。
本文紧接着上一篇 Spring MVC Integration Testing - Controllers 的内容，主要涉及到两个接口：创建新的Todo项和更新指定的Todo项。
通过Maven获取依赖 除了上一篇中介绍的依赖之外，本文添加了新的依赖：
 jackson-core-asl 1.9.9 jackson-mapper-asl 1.9.9  对应的pom.xml文件片段如下：
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.codehaus.jackson&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jackson-core-asl&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.9.9&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.codehaus.jackson&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jackson-mapper-asl&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.9.9&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt;  示例web应用结构 DTO 本文主要处理Form表单，对应的类为TodoDTO。TodoDTO类是一个简单的Java Bean类，除了setter和getter方法外，还是用到了validator规则：
 title项不能为空 title项的最大长度为100 description项的最大长度为500  对应的代码如下：
import org.hibernate.validator.constraints.Length; import org.hibernate.validator.constraints.NotEmpty; public class TodoDTO { private Long id; @Length(max = 500) private String description; @NotEmpty @Length(max = 100) private String title; public TodoDTO() { } //Getters and setters }  Service 层 对应地，TodoService接口也添加了两个方法：</description>
    </item>
    
    <item>
      <title>Spring MVC Integration Testing - Controllers</title>
      <link>http://www.wbprime.me/posts/2016-04-09-spring-mvc-testing-integration-testing-controllers/</link>
      <pubDate>Sat, 09 Apr 2016 23:08:01 +0000</pubDate>
      
      <guid>http://www.wbprime.me/posts/2016-04-09-spring-mvc-testing-integration-testing-controllers/</guid>
      <description>本文是Spring MVC Testing 集成测试系列的第2篇，原文链接：Integration Testing of Spring MVC Applications: Controllers。
本文主要介绍如何为“标准”Controller编写集成测试。在这里“标准”的含义延续前一个序列 Spring MVC Testing 中的含义，表示不使用Ajax的请求或者处理Form结果的请求。
同样地，本文还是一步一步地为我们的TodoApplication编写集成测试。该程序提供Todo项的增删改查（CRUD）接口，本文主要关注其中的3个接口：获取Todo项列表；查看单个Todo项的详情；以及删除某个Todo项。
通过Maven获取依赖 本文用到的依赖如下：
 Hamcrest 1.3 JUnit 4.10 Spring Test 3.2.3.RELEASE Spring Test DBUnit 1.0.0 DBUnit 2.4.8  生成的pom.xml文件的片段如下：
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.hamcrest&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hamcrest-all&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.3&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.10&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;exclusions&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;artifactId&amp;gt;hamcrest-core&amp;lt;/artifactId&amp;gt; &amp;lt;groupId&amp;gt;org.hamcrest&amp;lt;/groupId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;/exclusions&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-test&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.1.2.RELEASE&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-test&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.2.3.RELEASE&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.github.springtestdbunit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-test-dbunit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title>Spring MVC Integration Testing - Configuration</title>
      <link>http://www.wbprime.me/posts/2016-04-09-spring-mvc-testing-integration-testing-configuration/</link>
      <pubDate>Sat, 09 Apr 2016 23:07:53 +0000</pubDate>
      
      <guid>http://www.wbprime.me/posts/2016-04-09-spring-mvc-testing-integration-testing-configuration/</guid>
      <description>本文是 Spring MVC Testing 集成测试系列的第1篇，原文链接：Integration Testing of Spring MVC Applications: Configuration。
没有人会否认集成测试的重要性，它是验证我们开发的组件能够正常协同工作的重要手段。不幸的是，对使用Spring MVC开发的web应用程序作集成测试有一点麻烦。
过去我们一直用 Selenium 和 JWebUnit 来对web应用接口作集成测试，然后效果不是很好。这种方法有以下三个缺点：
 对于开发中的web接口，编写和维护测试的工作量比较大 对于使用Javascript，尤其是Ajax的web应用，可用性不高 必须在web容器中启动运行，导致速度慢而且很没有效率  经常就是开发者在后续开发过程中觉得维护之前的集成测试用例太过耗时而且效果不大，所以废弃了这种形式的集成测试。幸运的是，我们找到了一种新型的集成测试框架Spring MVC Test可以用来简化测试工作。
本文主要介绍如何配置Spring MVC Test框架来进行web应用的测试。本系列使用的工具包括：
 Spring Framework 3.2 JUnit 4.10 Maven 3.0.3  我们一起来开始进入Spring MVC Test的世界吧！
通过Maven获取依赖 译者注：原文写作的时候是基于Spring Framework 3.1.2，当时Spring-test-mvc还是作为一个独立的项目进行开发和发布。在Spring Framework 3.2以后，该项目被合并到Spring Framework中去了。现在Spring Framework已经发布了4.X系列，很少有人在使用3.2以下的版本，为了减少混淆，直接将原文的pom文件加以修改。特此说明。
生成的pom.xml文件如下：
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-test&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.2&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt;  MockMvc 配置 Spring MVC Test框架提供了MockMvc类体系来辅助编写基于Spring MVC开发的web应用的测试代码。我们需要做的就是使用MockMvcBuilder接口的实际实现来生成MockMvc实例。MockMvcBuilders工厂类提供了两个工厂方法创建MockMvcBuilder实例：
 StandaloneMockMvcBuilder standaloneSetup(Object… controllers) 主要用来对单个Controller进行测试，需要手动地配置各种Bean DefaultMockMvcBuilder webAppContextSetup(WebApplicationContext context) 主要使用配置好的Spring上下文来配置Bean  下面来详细看一下这两种方式分别如何使用。</description>
    </item>
    
    <item>
      <title>Spring MVC Unit Testing - REST API</title>
      <link>http://www.wbprime.me/posts/2016-04-09-spring-mvc-testing-unit-testing-rest-api/</link>
      <pubDate>Sat, 09 Apr 2016 23:07:22 +0000</pubDate>
      
      <guid>http://www.wbprime.me/posts/2016-04-09-spring-mvc-testing-unit-testing-rest-api/</guid>
      <description>本文是 Spring MVC Testing 单元测试系列的第3篇，原文链接：Unit Testing of Spring MVC Controllers: REST API。
使用Spring MVC可以很方便第创建REST风格的接口，但是编写REST风格接口的单元测试并不是那么方便。幸运的是，Spring MVC Test极大地简化了我们为REST风格controller编写单元测试的工作。
本文将通过为Todo项的增删改查（CRUD）的REST风格接口操作编写单元测试的方式，一步一步地讲解如何使用Spring MVC Test来进行单元测试。OK，我们快点进入正文吧！
通过Maven获取依赖 本系列用到的依赖如下：
 Hamcrest 1.3 (hamcrest-all) Junit 4.11 Mockito 1.9.5 (mockito-core) Spring Test 3.2.3.RELEASE JsonPath 0.8.1 (json-path and json-path-assert)  生成的pom.xml文件的片段如下：
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.hamcrest&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hamcrest-all&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.3&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.11&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;exclusions&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;artifactId&amp;gt;hamcrest-core&amp;lt;/artifactId&amp;gt; &amp;lt;groupId&amp;gt;org.hamcrest&amp;lt;/groupId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;/exclusions&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.mockito&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mockito-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.9.5&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-test&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.2.3.RELEASE&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.</description>
    </item>
    
    <item>
      <title>Spring MVC Unit Testing - Normal Controllers</title>
      <link>http://www.wbprime.me/posts/2016-04-09-spring-mvc-testing-unit-testing-normal-controllers/</link>
      <pubDate>Sat, 09 Apr 2016 23:07:12 +0000</pubDate>
      
      <guid>http://www.wbprime.me/posts/2016-04-09-spring-mvc-testing-unit-testing-normal-controllers/</guid>
      <description>本文是 Spring MVC Testing 单元测试系列的第2篇，原文链接：Unit Testing of Spring MVC Controllers: &amp;ldquo;Normal&amp;rdquo; Controllers。
本系列的第1部分讲述了使用Spring MVC Test应如何进行单元测试的配置，现在可以开始实战一下如何对标准controller编写单元测试。
首先需要明确一下。
 何为标准controller？
 注意：原文标准是加了双引号的（&amp;rdquo;normal&amp;rdquo;）
我们称之为标准controller的Controller，是渲染view或者处理form提交请求的Controller。（与之相对的是Rest Controller）。
OK，现在我们进入正文。
通过Maven获取依赖 本系列用到的依赖如下：
 Jackson 2.2.1 (core and databind modules) Hamcrest 1.3 JUnit 4.11 Mockito 1.9.5 Spring Test 3.2.3.RELEASE  生成的pom.xml文件的片段如下：
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.fasterxml.jackson.core&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jackson-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.1&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.fasterxml.jackson.core&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jackson-databind&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.1&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.hamcrest&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hamcrest-all&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.3&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.11&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;exclusions&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;artifactId&amp;gt;hamcrest-core&amp;lt;/artifactId&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title>Spring MVC Unit Testing - Configuration</title>
      <link>http://www.wbprime.me/posts/2016-04-09-spring-mvc-testing-unit-testing-configuration/</link>
      <pubDate>Sat, 09 Apr 2016 23:06:57 +0000</pubDate>
      
      <guid>http://www.wbprime.me/posts/2016-04-09-spring-mvc-testing-unit-testing-configuration/</guid>
      <description>本文是 Spring MVC Testing 单元测试系列的第1篇，原文链接：Unit Testing of Spring MVC Controllers: Configuration。
一直以来，为Spring MVC的Controller写单元测试的工作既简单又问题多多。简单体现在单元测试可以很简单地写个测试用例调用一下目标Controller的方法；问题在于这种单元测试完全没有用（不是HTTP的请求），比如说，这种单元测试的方法没办法测试请求映射、参数验证和异常映射等。
幸运的是，从Spring 3.2开始，我们可以使用Spring MVC Test Framework这一强大的工具通过DispatcherServlet来仿照HTTP请求的方式来单元测试Controller的方法。
本文主要介绍如何配置Spring使得可以单元测试Spring MVC Controllers。
下面进入正题。
通过Maven获取依赖 本系列用到的依赖如下：
 JUnit 4.11 Mockito Core 1.9.5 Spring Test 3.2.3.RELEASE  生成的pom.xml文件的片段如下：
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.11&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.mockito&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mockito-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.9.5&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-test&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.2.3.RELEASE&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt;  然后，我们进一步去看一下示例程序。
示例程序的结构 本教程的示例程序提供用于访问todo项的增删改查（CRUD）入口。为了更好地理解测试配置，首先看一下需要测试的controller类。
到目前为止，我们需要回答以下两个问题：
 待测试的controller类有哪些依赖 这些以来是如何注入待测试的controller类  我们可以创建的TodoController目标类的代码中去查找答案。相关代码如下：
import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.MessageSource; import org.springframework.stereotype.Controller; @Controller public class TodoController { private final TodoService service; private final MessageSource messageSource; @Autowired public TodoController(MessageSource messageSource, TodoService service) { this.</description>
    </item>
    
    <item>
      <title>Spring MVC Testing: Content</title>
      <link>http://www.wbprime.me/posts/2016-04-09-spring-mvc-testing-content/</link>
      <pubDate>Sat, 09 Apr 2016 23:03:35 +0000</pubDate>
      
      <guid>http://www.wbprime.me/posts/2016-04-09-spring-mvc-testing-content/</guid>
      <description>本系列翻译自Spring MVC Test Tutorial。
Springframework自3.2版本以后，提供了Spring MVC Test Framework用于对Spring MVC项目进行测试。
本系列一共两个部分：单元测试和集成测试。
单元测试将一个一个的Spring MVC Controller作为一个单元，对每一个接口进行测试。Controller层对Service层的调用使用Mockito进行模拟。
集成测试对整个web服务进行测试，虽然测试的单位仍然是接口，但是测试结果更偏向于生产环境。为了保证测试的稳定性，使用了DBUnit来控制每一次测试的数据样本。
需要注意的是，虽然这个系列将Spring MVC Test Framework分为单元测试和集成测试两个部分，但是对于Spring本身来说，其内部实现都是一样的。单元测试和集成测试的区分，是从开发者的角度进行的区分。
Spring MVC 单元测试：
 Unit Testing - Configuration Unit Testing - Normal Controllers Unit Testing - REST API  Spring MVC 集成测试：
 Integration Testing - Configuration Integration Testing - Controllers Integration Testing - Forms Integration Testing - REST API Integration Testing - Security Integration Testing - JsonPath  </description>
    </item>
    
  </channel>
</rss>